// /* tslint:disable */
// /* eslint-disable */
// //----------------------
// // <auto-generated>
// //     Generated using the NSwag toolchain v13.11.1.0 (NJsonSchema v10.4.3.0 (Newtonsoft.Json v11.0.0.0)) (http://NSwag.org)
// // </auto-generated>
// //----------------------
// // ReSharper disable InconsistentNaming
//
// import { mergeMap as _observableMergeMap, catchError as _observableCatch } from 'rxjs/operators';
// import { Observable, throwError as _observableThrow, of as _observableOf } from 'rxjs';
// import { Injectable, Inject, Optional, InjectionToken } from '@angular/core';
// import { HttpClient, HttpHeaders, HttpResponse, HttpResponseBase } from '@angular/common/http';
//
// import { DateTime, Duration } from "luxon";
//
// export const API_BASE_URL = new InjectionToken<string>('API_BASE_URL');
//
// @Injectable({providedIn: 'root'})
// export class AbpServiceProxy {
//     private http: HttpClient;
//     private baseUrl: string;
//     protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;
//
//     constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
//         this.http = http;
//         this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
//     }
//
//     /**
//      * @param includeTypes (optional)
//      * @return Success
//      */
//     apiDefinition(includeTypes: boolean | undefined): Observable<ApplicationApiDescriptionModel> {
//         let url_ = this.baseUrl + "/api/abp/api-definition?";
//         if (includeTypes === null)
//             throw new Error("The parameter 'includeTypes' cannot be null.");
//         else if (includeTypes !== undefined)
//             url_ += "IncludeTypes=" + encodeURIComponent("" + includeTypes) + "&";
//         url_ = url_.replace(/[?&]$/, "");
//
//         let options_ : any = {
//             observe: "response",
//             responseType: "blob",
//             headers: new HttpHeaders({
//                 "Accept": "text/plain"
//             })
//         };
//
//         return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
//             return this.processApiDefinition(response_);
//         })).pipe(_observableCatch((response_: any) => {
//             if (response_ instanceof HttpResponseBase) {
//                 try {
//                     return this.processApiDefinition(<any>response_);
//                 } catch (e) {
//                     return <Observable<ApplicationApiDescriptionModel>><any>_observableThrow(e);
//                 }
//             } else
//                 return <Observable<ApplicationApiDescriptionModel>><any>_observableThrow(response_);
//         }));
//     }
//
//     protected processApiDefinition(response: HttpResponseBase): Observable<ApplicationApiDescriptionModel> {
//         const status = response.status;
//         const responseBlob =
//             response instanceof HttpResponse ? response.body :
//             (<any>response).error instanceof Blob ? (<any>response).error : undefined;
//
//         let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
//         if (status === 200) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result200: any = null;
//             let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result200 = ApplicationApiDescriptionModel.fromJS(resultData200);
//             return _observableOf(result200);
//             }));
//         } else if (status === 403) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result403: any = null;
//             let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result403 = RemoteServiceErrorResponse.fromJS(resultData403);
//             return throwException("Forbidden", status, _responseText, _headers, result403);
//             }));
//         } else if (status === 401) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result401: any = null;
//             let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result401 = RemoteServiceErrorResponse.fromJS(resultData401);
//             return throwException("Unauthorized", status, _responseText, _headers, result401);
//             }));
//         } else if (status === 400) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result400: any = null;
//             let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result400 = RemoteServiceErrorResponse.fromJS(resultData400);
//             return throwException("Bad Request", status, _responseText, _headers, result400);
//             }));
//         } else if (status === 404) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result404: any = null;
//             let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result404 = RemoteServiceErrorResponse.fromJS(resultData404);
//             return throwException("Not Found", status, _responseText, _headers, result404);
//             }));
//         } else if (status === 501) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result501: any = null;
//             let resultData501 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result501 = RemoteServiceErrorResponse.fromJS(resultData501);
//             return throwException("Server Error", status, _responseText, _headers, result501);
//             }));
//         } else if (status === 500) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result500: any = null;
//             let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result500 = RemoteServiceErrorResponse.fromJS(resultData500);
//             return throwException("Server Error", status, _responseText, _headers, result500);
//             }));
//         } else if (status !== 200 && status !== 204) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             return throwException("An unexpected server error occurred.", status, _responseText, _headers);
//             }));
//         }
//         return _observableOf<ApplicationApiDescriptionModel>(<any>null);
//     }
//
//     /**
//      * @return Success
//      */
//     applicationConfiguration(): Observable<ApplicationConfigurationDto> {
//         let url_ = this.baseUrl + "/api/abp/application-configuration";
//         url_ = url_.replace(/[?&]$/, "");
//
//         let options_ : any = {
//             observe: "response",
//             responseType: "blob",
//             headers: new HttpHeaders({
//                 "Accept": "text/plain"
//             })
//         };
//
//         return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
//             return this.processApplicationConfiguration(response_);
//         })).pipe(_observableCatch((response_: any) => {
//             if (response_ instanceof HttpResponseBase) {
//                 try {
//                     return this.processApplicationConfiguration(<any>response_);
//                 } catch (e) {
//                     return <Observable<ApplicationConfigurationDto>><any>_observableThrow(e);
//                 }
//             } else
//                 return <Observable<ApplicationConfigurationDto>><any>_observableThrow(response_);
//         }));
//     }
//
//     protected processApplicationConfiguration(response: HttpResponseBase): Observable<ApplicationConfigurationDto> {
//         const status = response.status;
//         const responseBlob =
//             response instanceof HttpResponse ? response.body :
//             (<any>response).error instanceof Blob ? (<any>response).error : undefined;
//
//         let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
//         if (status === 200) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result200: any = null;
//             let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result200 = ApplicationConfigurationDto.fromJS(resultData200);
//             return _observableOf(result200);
//             }));
//         } else if (status === 403) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result403: any = null;
//             let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result403 = RemoteServiceErrorResponse.fromJS(resultData403);
//             return throwException("Forbidden", status, _responseText, _headers, result403);
//             }));
//         } else if (status === 401) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result401: any = null;
//             let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result401 = RemoteServiceErrorResponse.fromJS(resultData401);
//             return throwException("Unauthorized", status, _responseText, _headers, result401);
//             }));
//         } else if (status === 400) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result400: any = null;
//             let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result400 = RemoteServiceErrorResponse.fromJS(resultData400);
//             return throwException("Bad Request", status, _responseText, _headers, result400);
//             }));
//         } else if (status === 404) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result404: any = null;
//             let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result404 = RemoteServiceErrorResponse.fromJS(resultData404);
//             return throwException("Not Found", status, _responseText, _headers, result404);
//             }));
//         } else if (status === 501) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result501: any = null;
//             let resultData501 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result501 = RemoteServiceErrorResponse.fromJS(resultData501);
//             return throwException("Server Error", status, _responseText, _headers, result501);
//             }));
//         } else if (status === 500) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result500: any = null;
//             let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result500 = RemoteServiceErrorResponse.fromJS(resultData500);
//             return throwException("Server Error", status, _responseText, _headers, result500);
//             }));
//         } else if (status !== 200 && status !== 204) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             return throwException("An unexpected server error occurred.", status, _responseText, _headers);
//             }));
//         }
//         return _observableOf<ApplicationConfigurationDto>(<any>null);
//     }
// }
//
// @Injectable({providedIn: 'root'})
// export class TenantsServiceProxy {
//     private http: HttpClient;
//     private baseUrl: string;
//     protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;
//
//     constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
//         this.http = http;
//         this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
//     }
//
//     /**
//      * @return Success
//      */
//     byName(name: string): Observable<FindTenantResultDto> {
//         let url_ = this.baseUrl + "/api/abp/multi-tenancy/tenants/by-name/{name}";
//         if (name === undefined || name === null)
//             throw new Error("The parameter 'name' must be defined.");
//         url_ = url_.replace("{name}", encodeURIComponent("" + name));
//         url_ = url_.replace(/[?&]$/, "");
//
//         let options_ : any = {
//             observe: "response",
//             responseType: "blob",
//             headers: new HttpHeaders({
//                 "Accept": "text/plain"
//             })
//         };
//
//         return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
//             return this.processByName(response_);
//         })).pipe(_observableCatch((response_: any) => {
//             if (response_ instanceof HttpResponseBase) {
//                 try {
//                     return this.processByName(<any>response_);
//                 } catch (e) {
//                     return <Observable<FindTenantResultDto>><any>_observableThrow(e);
//                 }
//             } else
//                 return <Observable<FindTenantResultDto>><any>_observableThrow(response_);
//         }));
//     }
//
//     protected processByName(response: HttpResponseBase): Observable<FindTenantResultDto> {
//         const status = response.status;
//         const responseBlob =
//             response instanceof HttpResponse ? response.body :
//             (<any>response).error instanceof Blob ? (<any>response).error : undefined;
//
//         let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
//         if (status === 200) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result200: any = null;
//             let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result200 = FindTenantResultDto.fromJS(resultData200);
//             return _observableOf(result200);
//             }));
//         } else if (status === 403) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result403: any = null;
//             let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result403 = RemoteServiceErrorResponse.fromJS(resultData403);
//             return throwException("Forbidden", status, _responseText, _headers, result403);
//             }));
//         } else if (status === 401) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result401: any = null;
//             let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result401 = RemoteServiceErrorResponse.fromJS(resultData401);
//             return throwException("Unauthorized", status, _responseText, _headers, result401);
//             }));
//         } else if (status === 400) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result400: any = null;
//             let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result400 = RemoteServiceErrorResponse.fromJS(resultData400);
//             return throwException("Bad Request", status, _responseText, _headers, result400);
//             }));
//         } else if (status === 404) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result404: any = null;
//             let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result404 = RemoteServiceErrorResponse.fromJS(resultData404);
//             return throwException("Not Found", status, _responseText, _headers, result404);
//             }));
//         } else if (status === 501) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result501: any = null;
//             let resultData501 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result501 = RemoteServiceErrorResponse.fromJS(resultData501);
//             return throwException("Server Error", status, _responseText, _headers, result501);
//             }));
//         } else if (status === 500) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result500: any = null;
//             let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result500 = RemoteServiceErrorResponse.fromJS(resultData500);
//             return throwException("Server Error", status, _responseText, _headers, result500);
//             }));
//         } else if (status !== 200 && status !== 204) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             return throwException("An unexpected server error occurred.", status, _responseText, _headers);
//             }));
//         }
//         return _observableOf<FindTenantResultDto>(<any>null);
//     }
//
//     /**
//      * @return Success
//      */
//     byId(id: string): Observable<FindTenantResultDto> {
//         let url_ = this.baseUrl + "/api/abp/multi-tenancy/tenants/by-id/{id}";
//         if (id === undefined || id === null)
//             throw new Error("The parameter 'id' must be defined.");
//         url_ = url_.replace("{id}", encodeURIComponent("" + id));
//         url_ = url_.replace(/[?&]$/, "");
//
//         let options_ : any = {
//             observe: "response",
//             responseType: "blob",
//             headers: new HttpHeaders({
//                 "Accept": "text/plain"
//             })
//         };
//
//         return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
//             return this.processById(response_);
//         })).pipe(_observableCatch((response_: any) => {
//             if (response_ instanceof HttpResponseBase) {
//                 try {
//                     return this.processById(<any>response_);
//                 } catch (e) {
//                     return <Observable<FindTenantResultDto>><any>_observableThrow(e);
//                 }
//             } else
//                 return <Observable<FindTenantResultDto>><any>_observableThrow(response_);
//         }));
//     }
//
//     protected processById(response: HttpResponseBase): Observable<FindTenantResultDto> {
//         const status = response.status;
//         const responseBlob =
//             response instanceof HttpResponse ? response.body :
//             (<any>response).error instanceof Blob ? (<any>response).error : undefined;
//
//         let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
//         if (status === 200) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result200: any = null;
//             let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result200 = FindTenantResultDto.fromJS(resultData200);
//             return _observableOf(result200);
//             }));
//         } else if (status === 403) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result403: any = null;
//             let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result403 = RemoteServiceErrorResponse.fromJS(resultData403);
//             return throwException("Forbidden", status, _responseText, _headers, result403);
//             }));
//         } else if (status === 401) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result401: any = null;
//             let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result401 = RemoteServiceErrorResponse.fromJS(resultData401);
//             return throwException("Unauthorized", status, _responseText, _headers, result401);
//             }));
//         } else if (status === 400) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result400: any = null;
//             let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result400 = RemoteServiceErrorResponse.fromJS(resultData400);
//             return throwException("Bad Request", status, _responseText, _headers, result400);
//             }));
//         } else if (status === 404) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result404: any = null;
//             let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result404 = RemoteServiceErrorResponse.fromJS(resultData404);
//             return throwException("Not Found", status, _responseText, _headers, result404);
//             }));
//         } else if (status === 501) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result501: any = null;
//             let resultData501 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result501 = RemoteServiceErrorResponse.fromJS(resultData501);
//             return throwException("Server Error", status, _responseText, _headers, result501);
//             }));
//         } else if (status === 500) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result500: any = null;
//             let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result500 = RemoteServiceErrorResponse.fromJS(resultData500);
//             return throwException("Server Error", status, _responseText, _headers, result500);
//             }));
//         } else if (status !== 200 && status !== 204) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             return throwException("An unexpected server error occurred.", status, _responseText, _headers);
//             }));
//         }
//         return _observableOf<FindTenantResultDto>(<any>null);
//     }
//
//     /**
//      * @return Success
//      */
//     defaultConnectionStringGet(id: string): Observable<string> {
//         let url_ = this.baseUrl + "/api/saas/tenants/{id}/default-connection-string";
//         if (id === undefined || id === null)
//             throw new Error("The parameter 'id' must be defined.");
//         url_ = url_.replace("{id}", encodeURIComponent("" + id));
//         url_ = url_.replace(/[?&]$/, "");
//
//         let options_ : any = {
//             observe: "response",
//             responseType: "blob",
//             headers: new HttpHeaders({
//                 "Accept": "text/plain"
//             })
//         };
//
//         return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
//             return this.processDefaultConnectionStringGet(response_);
//         })).pipe(_observableCatch((response_: any) => {
//             if (response_ instanceof HttpResponseBase) {
//                 try {
//                     return this.processDefaultConnectionStringGet(<any>response_);
//                 } catch (e) {
//                     return <Observable<string>><any>_observableThrow(e);
//                 }
//             } else
//                 return <Observable<string>><any>_observableThrow(response_);
//         }));
//     }
//
//     protected processDefaultConnectionStringGet(response: HttpResponseBase): Observable<string> {
//         const status = response.status;
//         const responseBlob =
//             response instanceof HttpResponse ? response.body :
//             (<any>response).error instanceof Blob ? (<any>response).error : undefined;
//
//         let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
//         if (status === 200) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result200: any = null;
//             let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result200 = resultData200 !== undefined ? resultData200 : <any>null;
//             return _observableOf(result200);
//             }));
//         } else if (status === 403) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result403: any = null;
//             let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result403 = RemoteServiceErrorResponse.fromJS(resultData403);
//             return throwException("Forbidden", status, _responseText, _headers, result403);
//             }));
//         } else if (status === 401) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result401: any = null;
//             let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result401 = RemoteServiceErrorResponse.fromJS(resultData401);
//             return throwException("Unauthorized", status, _responseText, _headers, result401);
//             }));
//         } else if (status === 400) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result400: any = null;
//             let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result400 = RemoteServiceErrorResponse.fromJS(resultData400);
//             return throwException("Bad Request", status, _responseText, _headers, result400);
//             }));
//         } else if (status === 404) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result404: any = null;
//             let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result404 = RemoteServiceErrorResponse.fromJS(resultData404);
//             return throwException("Not Found", status, _responseText, _headers, result404);
//             }));
//         } else if (status === 501) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result501: any = null;
//             let resultData501 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result501 = RemoteServiceErrorResponse.fromJS(resultData501);
//             return throwException("Server Error", status, _responseText, _headers, result501);
//             }));
//         } else if (status === 500) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result500: any = null;
//             let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result500 = RemoteServiceErrorResponse.fromJS(resultData500);
//             return throwException("Server Error", status, _responseText, _headers, result500);
//             }));
//         } else if (status !== 200 && status !== 204) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             return throwException("An unexpected server error occurred.", status, _responseText, _headers);
//             }));
//         }
//         return _observableOf<string>(<any>null);
//     }
//
//     /**
//      * @param defaultConnectionString (optional)
//      * @return Success
//      */
//     defaultConnectionStringPut(id: string, defaultConnectionString: string | undefined): Observable<void> {
//         let url_ = this.baseUrl + "/api/saas/tenants/{id}/default-connection-string?";
//         if (id === undefined || id === null)
//             throw new Error("The parameter 'id' must be defined.");
//         url_ = url_.replace("{id}", encodeURIComponent("" + id));
//         if (defaultConnectionString === null)
//             throw new Error("The parameter 'defaultConnectionString' cannot be null.");
//         else if (defaultConnectionString !== undefined)
//             url_ += "defaultConnectionString=" + encodeURIComponent("" + defaultConnectionString) + "&";
//         url_ = url_.replace(/[?&]$/, "");
//
//         let options_ : any = {
//             observe: "response",
//             responseType: "blob",
//             headers: new HttpHeaders({
//             })
//         };
//
//         return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
//             return this.processDefaultConnectionStringPut(response_);
//         })).pipe(_observableCatch((response_: any) => {
//             if (response_ instanceof HttpResponseBase) {
//                 try {
//                     return this.processDefaultConnectionStringPut(<any>response_);
//                 } catch (e) {
//                     return <Observable<void>><any>_observableThrow(e);
//                 }
//             } else
//                 return <Observable<void>><any>_observableThrow(response_);
//         }));
//     }
//
//     protected processDefaultConnectionStringPut(response: HttpResponseBase): Observable<void> {
//         const status = response.status;
//         const responseBlob =
//             response instanceof HttpResponse ? response.body :
//             (<any>response).error instanceof Blob ? (<any>response).error : undefined;
//
//         let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
//         if (status === 200) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             return _observableOf<void>(<any>null);
//             }));
//         } else if (status === 403) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result403: any = null;
//             let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result403 = RemoteServiceErrorResponse.fromJS(resultData403);
//             return throwException("Forbidden", status, _responseText, _headers, result403);
//             }));
//         } else if (status === 401) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result401: any = null;
//             let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result401 = RemoteServiceErrorResponse.fromJS(resultData401);
//             return throwException("Unauthorized", status, _responseText, _headers, result401);
//             }));
//         } else if (status === 400) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result400: any = null;
//             let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result400 = RemoteServiceErrorResponse.fromJS(resultData400);
//             return throwException("Bad Request", status, _responseText, _headers, result400);
//             }));
//         } else if (status === 404) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result404: any = null;
//             let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result404 = RemoteServiceErrorResponse.fromJS(resultData404);
//             return throwException("Not Found", status, _responseText, _headers, result404);
//             }));
//         } else if (status === 501) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result501: any = null;
//             let resultData501 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result501 = RemoteServiceErrorResponse.fromJS(resultData501);
//             return throwException("Server Error", status, _responseText, _headers, result501);
//             }));
//         } else if (status === 500) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result500: any = null;
//             let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result500 = RemoteServiceErrorResponse.fromJS(resultData500);
//             return throwException("Server Error", status, _responseText, _headers, result500);
//             }));
//         } else if (status !== 200 && status !== 204) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             return throwException("An unexpected server error occurred.", status, _responseText, _headers);
//             }));
//         }
//         return _observableOf<void>(<any>null);
//     }
//
//     /**
//      * @return Success
//      */
//     defaultConnectionStringDelete(id: string): Observable<void> {
//         let url_ = this.baseUrl + "/api/saas/tenants/{id}/default-connection-string";
//         if (id === undefined || id === null)
//             throw new Error("The parameter 'id' must be defined.");
//         url_ = url_.replace("{id}", encodeURIComponent("" + id));
//         url_ = url_.replace(/[?&]$/, "");
//
//         let options_ : any = {
//             observe: "response",
//             responseType: "blob",
//             headers: new HttpHeaders({
//             })
//         };
//
//         return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
//             return this.processDefaultConnectionStringDelete(response_);
//         })).pipe(_observableCatch((response_: any) => {
//             if (response_ instanceof HttpResponseBase) {
//                 try {
//                     return this.processDefaultConnectionStringDelete(<any>response_);
//                 } catch (e) {
//                     return <Observable<void>><any>_observableThrow(e);
//                 }
//             } else
//                 return <Observable<void>><any>_observableThrow(response_);
//         }));
//     }
//
//     protected processDefaultConnectionStringDelete(response: HttpResponseBase): Observable<void> {
//         const status = response.status;
//         const responseBlob =
//             response instanceof HttpResponse ? response.body :
//             (<any>response).error instanceof Blob ? (<any>response).error : undefined;
//
//         let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
//         if (status === 200) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             return _observableOf<void>(<any>null);
//             }));
//         } else if (status === 403) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result403: any = null;
//             let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result403 = RemoteServiceErrorResponse.fromJS(resultData403);
//             return throwException("Forbidden", status, _responseText, _headers, result403);
//             }));
//         } else if (status === 401) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result401: any = null;
//             let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result401 = RemoteServiceErrorResponse.fromJS(resultData401);
//             return throwException("Unauthorized", status, _responseText, _headers, result401);
//             }));
//         } else if (status === 400) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result400: any = null;
//             let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result400 = RemoteServiceErrorResponse.fromJS(resultData400);
//             return throwException("Bad Request", status, _responseText, _headers, result400);
//             }));
//         } else if (status === 404) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result404: any = null;
//             let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result404 = RemoteServiceErrorResponse.fromJS(resultData404);
//             return throwException("Not Found", status, _responseText, _headers, result404);
//             }));
//         } else if (status === 501) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result501: any = null;
//             let resultData501 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result501 = RemoteServiceErrorResponse.fromJS(resultData501);
//             return throwException("Server Error", status, _responseText, _headers, result501);
//             }));
//         } else if (status === 500) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result500: any = null;
//             let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result500 = RemoteServiceErrorResponse.fromJS(resultData500);
//             return throwException("Server Error", status, _responseText, _headers, result500);
//             }));
//         } else if (status !== 200 && status !== 204) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             return throwException("An unexpected server error occurred.", status, _responseText, _headers);
//             }));
//         }
//         return _observableOf<void>(<any>null);
//     }
//
//     /**
//      * @return Success
//      */
//     applyDatabaseMigrations(id: string): Observable<void> {
//         let url_ = this.baseUrl + "/api/saas/tenants/{id}/apply-database-migrations";
//         if (id === undefined || id === null)
//             throw new Error("The parameter 'id' must be defined.");
//         url_ = url_.replace("{id}", encodeURIComponent("" + id));
//         url_ = url_.replace(/[?&]$/, "");
//
//         let options_ : any = {
//             observe: "response",
//             responseType: "blob",
//             headers: new HttpHeaders({
//             })
//         };
//
//         return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
//             return this.processApplyDatabaseMigrations(response_);
//         })).pipe(_observableCatch((response_: any) => {
//             if (response_ instanceof HttpResponseBase) {
//                 try {
//                     return this.processApplyDatabaseMigrations(<any>response_);
//                 } catch (e) {
//                     return <Observable<void>><any>_observableThrow(e);
//                 }
//             } else
//                 return <Observable<void>><any>_observableThrow(response_);
//         }));
//     }
//
//     protected processApplyDatabaseMigrations(response: HttpResponseBase): Observable<void> {
//         const status = response.status;
//         const responseBlob =
//             response instanceof HttpResponse ? response.body :
//             (<any>response).error instanceof Blob ? (<any>response).error : undefined;
//
//         let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
//         if (status === 200) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             return _observableOf<void>(<any>null);
//             }));
//         } else if (status === 403) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result403: any = null;
//             let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result403 = RemoteServiceErrorResponse.fromJS(resultData403);
//             return throwException("Forbidden", status, _responseText, _headers, result403);
//             }));
//         } else if (status === 401) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result401: any = null;
//             let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result401 = RemoteServiceErrorResponse.fromJS(resultData401);
//             return throwException("Unauthorized", status, _responseText, _headers, result401);
//             }));
//         } else if (status === 400) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result400: any = null;
//             let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result400 = RemoteServiceErrorResponse.fromJS(resultData400);
//             return throwException("Bad Request", status, _responseText, _headers, result400);
//             }));
//         } else if (status === 404) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result404: any = null;
//             let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result404 = RemoteServiceErrorResponse.fromJS(resultData404);
//             return throwException("Not Found", status, _responseText, _headers, result404);
//             }));
//         } else if (status === 501) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result501: any = null;
//             let resultData501 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result501 = RemoteServiceErrorResponse.fromJS(resultData501);
//             return throwException("Server Error", status, _responseText, _headers, result501);
//             }));
//         } else if (status === 500) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result500: any = null;
//             let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result500 = RemoteServiceErrorResponse.fromJS(resultData500);
//             return throwException("Server Error", status, _responseText, _headers, result500);
//             }));
//         } else if (status !== 200 && status !== 204) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             return throwException("An unexpected server error occurred.", status, _responseText, _headers);
//             }));
//         }
//         return _observableOf<void>(<any>null);
//     }
// }
//
// @Injectable({providedIn: 'root'})
// export class AccountServiceProxy {
//     private http: HttpClient;
//     private baseUrl: string;
//     protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;
//
//     constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
//         this.http = http;
//         this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
//     }
//
//     /**
//      * @param body (optional)
//      * @return Success
//      */
//     register(body: RegisterDto | undefined): Observable<IdentityUserDto> {
//         let url_ = this.baseUrl + "/api/account/register";
//         url_ = url_.replace(/[?&]$/, "");
//
//         const content_ = JSON.stringify(body);
//
//         let options_ : any = {
//             body: content_,
//             observe: "response",
//             responseType: "blob",
//             headers: new HttpHeaders({
//                 "Content-Type": "application/json",
//                 "Accept": "text/plain"
//             })
//         };
//
//         return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
//             return this.processRegister(response_);
//         })).pipe(_observableCatch((response_: any) => {
//             if (response_ instanceof HttpResponseBase) {
//                 try {
//                     return this.processRegister(<any>response_);
//                 } catch (e) {
//                     return <Observable<IdentityUserDto>><any>_observableThrow(e);
//                 }
//             } else
//                 return <Observable<IdentityUserDto>><any>_observableThrow(response_);
//         }));
//     }
//
//     protected processRegister(response: HttpResponseBase): Observable<IdentityUserDto> {
//         const status = response.status;
//         const responseBlob =
//             response instanceof HttpResponse ? response.body :
//             (<any>response).error instanceof Blob ? (<any>response).error : undefined;
//
//         let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
//         if (status === 200) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result200: any = null;
//             let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result200 = IdentityUserDto.fromJS(resultData200);
//             return _observableOf(result200);
//             }));
//         } else if (status === 403) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result403: any = null;
//             let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result403 = RemoteServiceErrorResponse.fromJS(resultData403);
//             return throwException("Forbidden", status, _responseText, _headers, result403);
//             }));
//         } else if (status === 401) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result401: any = null;
//             let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result401 = RemoteServiceErrorResponse.fromJS(resultData401);
//             return throwException("Unauthorized", status, _responseText, _headers, result401);
//             }));
//         } else if (status === 400) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result400: any = null;
//             let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result400 = RemoteServiceErrorResponse.fromJS(resultData400);
//             return throwException("Bad Request", status, _responseText, _headers, result400);
//             }));
//         } else if (status === 404) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result404: any = null;
//             let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result404 = RemoteServiceErrorResponse.fromJS(resultData404);
//             return throwException("Not Found", status, _responseText, _headers, result404);
//             }));
//         } else if (status === 501) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result501: any = null;
//             let resultData501 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result501 = RemoteServiceErrorResponse.fromJS(resultData501);
//             return throwException("Server Error", status, _responseText, _headers, result501);
//             }));
//         } else if (status === 500) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result500: any = null;
//             let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result500 = RemoteServiceErrorResponse.fromJS(resultData500);
//             return throwException("Server Error", status, _responseText, _headers, result500);
//             }));
//         } else if (status !== 200 && status !== 204) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             return throwException("An unexpected server error occurred.", status, _responseText, _headers);
//             }));
//         }
//         return _observableOf<IdentityUserDto>(<any>null);
//     }
//
//     /**
//      * @param body (optional)
//      * @return Success
//      */
//     sendPasswordResetCode(body: SendPasswordResetCodeDto | undefined): Observable<void> {
//         let url_ = this.baseUrl + "/api/account/send-password-reset-code";
//         url_ = url_.replace(/[?&]$/, "");
//
//         const content_ = JSON.stringify(body);
//
//         let options_ : any = {
//             body: content_,
//             observe: "response",
//             responseType: "blob",
//             headers: new HttpHeaders({
//                 "Content-Type": "application/json",
//             })
//         };
//
//         return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
//             return this.processSendPasswordResetCode(response_);
//         })).pipe(_observableCatch((response_: any) => {
//             if (response_ instanceof HttpResponseBase) {
//                 try {
//                     return this.processSendPasswordResetCode(<any>response_);
//                 } catch (e) {
//                     return <Observable<void>><any>_observableThrow(e);
//                 }
//             } else
//                 return <Observable<void>><any>_observableThrow(response_);
//         }));
//     }
//
//     protected processSendPasswordResetCode(response: HttpResponseBase): Observable<void> {
//         const status = response.status;
//         const responseBlob =
//             response instanceof HttpResponse ? response.body :
//             (<any>response).error instanceof Blob ? (<any>response).error : undefined;
//
//         let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
//         if (status === 200) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             return _observableOf<void>(<any>null);
//             }));
//         } else if (status === 403) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result403: any = null;
//             let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result403 = RemoteServiceErrorResponse.fromJS(resultData403);
//             return throwException("Forbidden", status, _responseText, _headers, result403);
//             }));
//         } else if (status === 401) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result401: any = null;
//             let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result401 = RemoteServiceErrorResponse.fromJS(resultData401);
//             return throwException("Unauthorized", status, _responseText, _headers, result401);
//             }));
//         } else if (status === 400) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result400: any = null;
//             let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result400 = RemoteServiceErrorResponse.fromJS(resultData400);
//             return throwException("Bad Request", status, _responseText, _headers, result400);
//             }));
//         } else if (status === 404) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result404: any = null;
//             let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result404 = RemoteServiceErrorResponse.fromJS(resultData404);
//             return throwException("Not Found", status, _responseText, _headers, result404);
//             }));
//         } else if (status === 501) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result501: any = null;
//             let resultData501 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result501 = RemoteServiceErrorResponse.fromJS(resultData501);
//             return throwException("Server Error", status, _responseText, _headers, result501);
//             }));
//         } else if (status === 500) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result500: any = null;
//             let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result500 = RemoteServiceErrorResponse.fromJS(resultData500);
//             return throwException("Server Error", status, _responseText, _headers, result500);
//             }));
//         } else if (status !== 200 && status !== 204) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             return throwException("An unexpected server error occurred.", status, _responseText, _headers);
//             }));
//         }
//         return _observableOf<void>(<any>null);
//     }
//
//     /**
//      * @param body (optional)
//      * @return Success
//      */
//     resetPassword(body: ResetPasswordDto | undefined): Observable<void> {
//         let url_ = this.baseUrl + "/api/account/reset-password";
//         url_ = url_.replace(/[?&]$/, "");
//
//         const content_ = JSON.stringify(body);
//
//         let options_ : any = {
//             body: content_,
//             observe: "response",
//             responseType: "blob",
//             headers: new HttpHeaders({
//                 "Content-Type": "application/json",
//             })
//         };
//
//         return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
//             return this.processResetPassword(response_);
//         })).pipe(_observableCatch((response_: any) => {
//             if (response_ instanceof HttpResponseBase) {
//                 try {
//                     return this.processResetPassword(<any>response_);
//                 } catch (e) {
//                     return <Observable<void>><any>_observableThrow(e);
//                 }
//             } else
//                 return <Observable<void>><any>_observableThrow(response_);
//         }));
//     }
//
//     protected processResetPassword(response: HttpResponseBase): Observable<void> {
//         const status = response.status;
//         const responseBlob =
//             response instanceof HttpResponse ? response.body :
//             (<any>response).error instanceof Blob ? (<any>response).error : undefined;
//
//         let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
//         if (status === 200) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             return _observableOf<void>(<any>null);
//             }));
//         } else if (status === 403) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result403: any = null;
//             let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result403 = RemoteServiceErrorResponse.fromJS(resultData403);
//             return throwException("Forbidden", status, _responseText, _headers, result403);
//             }));
//         } else if (status === 401) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result401: any = null;
//             let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result401 = RemoteServiceErrorResponse.fromJS(resultData401);
//             return throwException("Unauthorized", status, _responseText, _headers, result401);
//             }));
//         } else if (status === 400) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result400: any = null;
//             let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result400 = RemoteServiceErrorResponse.fromJS(resultData400);
//             return throwException("Bad Request", status, _responseText, _headers, result400);
//             }));
//         } else if (status === 404) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result404: any = null;
//             let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result404 = RemoteServiceErrorResponse.fromJS(resultData404);
//             return throwException("Not Found", status, _responseText, _headers, result404);
//             }));
//         } else if (status === 501) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result501: any = null;
//             let resultData501 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result501 = RemoteServiceErrorResponse.fromJS(resultData501);
//             return throwException("Server Error", status, _responseText, _headers, result501);
//             }));
//         } else if (status === 500) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result500: any = null;
//             let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result500 = RemoteServiceErrorResponse.fromJS(resultData500);
//             return throwException("Server Error", status, _responseText, _headers, result500);
//             }));
//         } else if (status !== 200 && status !== 204) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             return throwException("An unexpected server error occurred.", status, _responseText, _headers);
//             }));
//         }
//         return _observableOf<void>(<any>null);
//     }
//
//     /**
//      * @param id (optional)
//      * @return Success
//      */
//     confirmationState(id: string | undefined): Observable<IdentityUserConfirmationStateDto> {
//         let url_ = this.baseUrl + "/api/account/confirmation-state?";
//         if (id === null)
//             throw new Error("The parameter 'id' cannot be null.");
//         else if (id !== undefined)
//             url_ += "id=" + encodeURIComponent("" + id) + "&";
//         url_ = url_.replace(/[?&]$/, "");
//
//         let options_ : any = {
//             observe: "response",
//             responseType: "blob",
//             headers: new HttpHeaders({
//                 "Accept": "text/plain"
//             })
//         };
//
//         return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
//             return this.processConfirmationState(response_);
//         })).pipe(_observableCatch((response_: any) => {
//             if (response_ instanceof HttpResponseBase) {
//                 try {
//                     return this.processConfirmationState(<any>response_);
//                 } catch (e) {
//                     return <Observable<IdentityUserConfirmationStateDto>><any>_observableThrow(e);
//                 }
//             } else
//                 return <Observable<IdentityUserConfirmationStateDto>><any>_observableThrow(response_);
//         }));
//     }
//
//     protected processConfirmationState(response: HttpResponseBase): Observable<IdentityUserConfirmationStateDto> {
//         const status = response.status;
//         const responseBlob =
//             response instanceof HttpResponse ? response.body :
//             (<any>response).error instanceof Blob ? (<any>response).error : undefined;
//
//         let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
//         if (status === 200) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result200: any = null;
//             let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result200 = IdentityUserConfirmationStateDto.fromJS(resultData200);
//             return _observableOf(result200);
//             }));
//         } else if (status === 403) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result403: any = null;
//             let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result403 = RemoteServiceErrorResponse.fromJS(resultData403);
//             return throwException("Forbidden", status, _responseText, _headers, result403);
//             }));
//         } else if (status === 401) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result401: any = null;
//             let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result401 = RemoteServiceErrorResponse.fromJS(resultData401);
//             return throwException("Unauthorized", status, _responseText, _headers, result401);
//             }));
//         } else if (status === 400) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result400: any = null;
//             let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result400 = RemoteServiceErrorResponse.fromJS(resultData400);
//             return throwException("Bad Request", status, _responseText, _headers, result400);
//             }));
//         } else if (status === 404) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result404: any = null;
//             let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result404 = RemoteServiceErrorResponse.fromJS(resultData404);
//             return throwException("Not Found", status, _responseText, _headers, result404);
//             }));
//         } else if (status === 501) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result501: any = null;
//             let resultData501 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result501 = RemoteServiceErrorResponse.fromJS(resultData501);
//             return throwException("Server Error", status, _responseText, _headers, result501);
//             }));
//         } else if (status === 500) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result500: any = null;
//             let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result500 = RemoteServiceErrorResponse.fromJS(resultData500);
//             return throwException("Server Error", status, _responseText, _headers, result500);
//             }));
//         } else if (status !== 200 && status !== 204) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             return throwException("An unexpected server error occurred.", status, _responseText, _headers);
//             }));
//         }
//         return _observableOf<IdentityUserConfirmationStateDto>(<any>null);
//     }
//
//     /**
//      * @param body (optional)
//      * @return Success
//      */
//     sendPhoneNumberConfirmationToken(body: SendPhoneNumberConfirmationTokenDto | undefined): Observable<void> {
//         let url_ = this.baseUrl + "/api/account/send-phone-number-confirmation-token";
//         url_ = url_.replace(/[?&]$/, "");
//
//         const content_ = JSON.stringify(body);
//
//         let options_ : any = {
//             body: content_,
//             observe: "response",
//             responseType: "blob",
//             headers: new HttpHeaders({
//                 "Content-Type": "application/json",
//             })
//         };
//
//         return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
//             return this.processSendPhoneNumberConfirmationToken(response_);
//         })).pipe(_observableCatch((response_: any) => {
//             if (response_ instanceof HttpResponseBase) {
//                 try {
//                     return this.processSendPhoneNumberConfirmationToken(<any>response_);
//                 } catch (e) {
//                     return <Observable<void>><any>_observableThrow(e);
//                 }
//             } else
//                 return <Observable<void>><any>_observableThrow(response_);
//         }));
//     }
//
//     protected processSendPhoneNumberConfirmationToken(response: HttpResponseBase): Observable<void> {
//         const status = response.status;
//         const responseBlob =
//             response instanceof HttpResponse ? response.body :
//             (<any>response).error instanceof Blob ? (<any>response).error : undefined;
//
//         let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
//         if (status === 200) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             return _observableOf<void>(<any>null);
//             }));
//         } else if (status === 403) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result403: any = null;
//             let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result403 = RemoteServiceErrorResponse.fromJS(resultData403);
//             return throwException("Forbidden", status, _responseText, _headers, result403);
//             }));
//         } else if (status === 401) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result401: any = null;
//             let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result401 = RemoteServiceErrorResponse.fromJS(resultData401);
//             return throwException("Unauthorized", status, _responseText, _headers, result401);
//             }));
//         } else if (status === 400) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result400: any = null;
//             let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result400 = RemoteServiceErrorResponse.fromJS(resultData400);
//             return throwException("Bad Request", status, _responseText, _headers, result400);
//             }));
//         } else if (status === 404) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result404: any = null;
//             let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result404 = RemoteServiceErrorResponse.fromJS(resultData404);
//             return throwException("Not Found", status, _responseText, _headers, result404);
//             }));
//         } else if (status === 501) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result501: any = null;
//             let resultData501 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result501 = RemoteServiceErrorResponse.fromJS(resultData501);
//             return throwException("Server Error", status, _responseText, _headers, result501);
//             }));
//         } else if (status === 500) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result500: any = null;
//             let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result500 = RemoteServiceErrorResponse.fromJS(resultData500);
//             return throwException("Server Error", status, _responseText, _headers, result500);
//             }));
//         } else if (status !== 200 && status !== 204) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             return throwException("An unexpected server error occurred.", status, _responseText, _headers);
//             }));
//         }
//         return _observableOf<void>(<any>null);
//     }
//
//     /**
//      * @param body (optional)
//      * @return Success
//      */
//     sendEmailConfirmationToken(body: SendEmailConfirmationTokenDto | undefined): Observable<void> {
//         let url_ = this.baseUrl + "/api/account/send-email-confirmation-token";
//         url_ = url_.replace(/[?&]$/, "");
//
//         const content_ = JSON.stringify(body);
//
//         let options_ : any = {
//             body: content_,
//             observe: "response",
//             responseType: "blob",
//             headers: new HttpHeaders({
//                 "Content-Type": "application/json",
//             })
//         };
//
//         return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
//             return this.processSendEmailConfirmationToken(response_);
//         })).pipe(_observableCatch((response_: any) => {
//             if (response_ instanceof HttpResponseBase) {
//                 try {
//                     return this.processSendEmailConfirmationToken(<any>response_);
//                 } catch (e) {
//                     return <Observable<void>><any>_observableThrow(e);
//                 }
//             } else
//                 return <Observable<void>><any>_observableThrow(response_);
//         }));
//     }
//
//     protected processSendEmailConfirmationToken(response: HttpResponseBase): Observable<void> {
//         const status = response.status;
//         const responseBlob =
//             response instanceof HttpResponse ? response.body :
//             (<any>response).error instanceof Blob ? (<any>response).error : undefined;
//
//         let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
//         if (status === 200) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             return _observableOf<void>(<any>null);
//             }));
//         } else if (status === 403) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result403: any = null;
//             let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result403 = RemoteServiceErrorResponse.fromJS(resultData403);
//             return throwException("Forbidden", status, _responseText, _headers, result403);
//             }));
//         } else if (status === 401) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result401: any = null;
//             let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result401 = RemoteServiceErrorResponse.fromJS(resultData401);
//             return throwException("Unauthorized", status, _responseText, _headers, result401);
//             }));
//         } else if (status === 400) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result400: any = null;
//             let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result400 = RemoteServiceErrorResponse.fromJS(resultData400);
//             return throwException("Bad Request", status, _responseText, _headers, result400);
//             }));
//         } else if (status === 404) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result404: any = null;
//             let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result404 = RemoteServiceErrorResponse.fromJS(resultData404);
//             return throwException("Not Found", status, _responseText, _headers, result404);
//             }));
//         } else if (status === 501) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result501: any = null;
//             let resultData501 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result501 = RemoteServiceErrorResponse.fromJS(resultData501);
//             return throwException("Server Error", status, _responseText, _headers, result501);
//             }));
//         } else if (status === 500) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result500: any = null;
//             let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result500 = RemoteServiceErrorResponse.fromJS(resultData500);
//             return throwException("Server Error", status, _responseText, _headers, result500);
//             }));
//         } else if (status !== 200 && status !== 204) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             return throwException("An unexpected server error occurred.", status, _responseText, _headers);
//             }));
//         }
//         return _observableOf<void>(<any>null);
//     }
//
//     /**
//      * @param body (optional)
//      * @return Success
//      */
//     confirmPhoneNumber(body: ConfirmPhoneNumberInput | undefined): Observable<void> {
//         let url_ = this.baseUrl + "/api/account/confirm-phone-number";
//         url_ = url_.replace(/[?&]$/, "");
//
//         const content_ = JSON.stringify(body);
//
//         let options_ : any = {
//             body: content_,
//             observe: "response",
//             responseType: "blob",
//             headers: new HttpHeaders({
//                 "Content-Type": "application/json",
//             })
//         };
//
//         return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
//             return this.processConfirmPhoneNumber(response_);
//         })).pipe(_observableCatch((response_: any) => {
//             if (response_ instanceof HttpResponseBase) {
//                 try {
//                     return this.processConfirmPhoneNumber(<any>response_);
//                 } catch (e) {
//                     return <Observable<void>><any>_observableThrow(e);
//                 }
//             } else
//                 return <Observable<void>><any>_observableThrow(response_);
//         }));
//     }
//
//     protected processConfirmPhoneNumber(response: HttpResponseBase): Observable<void> {
//         const status = response.status;
//         const responseBlob =
//             response instanceof HttpResponse ? response.body :
//             (<any>response).error instanceof Blob ? (<any>response).error : undefined;
//
//         let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
//         if (status === 200) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             return _observableOf<void>(<any>null);
//             }));
//         } else if (status === 403) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result403: any = null;
//             let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result403 = RemoteServiceErrorResponse.fromJS(resultData403);
//             return throwException("Forbidden", status, _responseText, _headers, result403);
//             }));
//         } else if (status === 401) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result401: any = null;
//             let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result401 = RemoteServiceErrorResponse.fromJS(resultData401);
//             return throwException("Unauthorized", status, _responseText, _headers, result401);
//             }));
//         } else if (status === 400) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result400: any = null;
//             let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result400 = RemoteServiceErrorResponse.fromJS(resultData400);
//             return throwException("Bad Request", status, _responseText, _headers, result400);
//             }));
//         } else if (status === 404) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result404: any = null;
//             let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result404 = RemoteServiceErrorResponse.fromJS(resultData404);
//             return throwException("Not Found", status, _responseText, _headers, result404);
//             }));
//         } else if (status === 501) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result501: any = null;
//             let resultData501 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result501 = RemoteServiceErrorResponse.fromJS(resultData501);
//             return throwException("Server Error", status, _responseText, _headers, result501);
//             }));
//         } else if (status === 500) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result500: any = null;
//             let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result500 = RemoteServiceErrorResponse.fromJS(resultData500);
//             return throwException("Server Error", status, _responseText, _headers, result500);
//             }));
//         } else if (status !== 200 && status !== 204) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             return throwException("An unexpected server error occurred.", status, _responseText, _headers);
//             }));
//         }
//         return _observableOf<void>(<any>null);
//     }
//
//     /**
//      * @param body (optional)
//      * @return Success
//      */
//     confirmEmail(body: ConfirmEmailInput | undefined): Observable<void> {
//         let url_ = this.baseUrl + "/api/account/confirm-email";
//         url_ = url_.replace(/[?&]$/, "");
//
//         const content_ = JSON.stringify(body);
//
//         let options_ : any = {
//             body: content_,
//             observe: "response",
//             responseType: "blob",
//             headers: new HttpHeaders({
//                 "Content-Type": "application/json",
//             })
//         };
//
//         return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
//             return this.processConfirmEmail(response_);
//         })).pipe(_observableCatch((response_: any) => {
//             if (response_ instanceof HttpResponseBase) {
//                 try {
//                     return this.processConfirmEmail(<any>response_);
//                 } catch (e) {
//                     return <Observable<void>><any>_observableThrow(e);
//                 }
//             } else
//                 return <Observable<void>><any>_observableThrow(response_);
//         }));
//     }
//
//     protected processConfirmEmail(response: HttpResponseBase): Observable<void> {
//         const status = response.status;
//         const responseBlob =
//             response instanceof HttpResponse ? response.body :
//             (<any>response).error instanceof Blob ? (<any>response).error : undefined;
//
//         let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
//         if (status === 200) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             return _observableOf<void>(<any>null);
//             }));
//         } else if (status === 403) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result403: any = null;
//             let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result403 = RemoteServiceErrorResponse.fromJS(resultData403);
//             return throwException("Forbidden", status, _responseText, _headers, result403);
//             }));
//         } else if (status === 401) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result401: any = null;
//             let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result401 = RemoteServiceErrorResponse.fromJS(resultData401);
//             return throwException("Unauthorized", status, _responseText, _headers, result401);
//             }));
//         } else if (status === 400) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result400: any = null;
//             let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result400 = RemoteServiceErrorResponse.fromJS(resultData400);
//             return throwException("Bad Request", status, _responseText, _headers, result400);
//             }));
//         } else if (status === 404) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result404: any = null;
//             let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result404 = RemoteServiceErrorResponse.fromJS(resultData404);
//             return throwException("Not Found", status, _responseText, _headers, result404);
//             }));
//         } else if (status === 501) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result501: any = null;
//             let resultData501 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result501 = RemoteServiceErrorResponse.fromJS(resultData501);
//             return throwException("Server Error", status, _responseText, _headers, result501);
//             }));
//         } else if (status === 500) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result500: any = null;
//             let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result500 = RemoteServiceErrorResponse.fromJS(resultData500);
//             return throwException("Server Error", status, _responseText, _headers, result500);
//             }));
//         } else if (status !== 200 && status !== 204) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             return throwException("An unexpected server error occurred.", status, _responseText, _headers);
//             }));
//         }
//         return _observableOf<void>(<any>null);
//     }
//
//     /**
//      * @param body (optional)
//      * @return Success
//      */
//     profilePicturePost(body: ProfilePictureInput | undefined): Observable<void> {
//         let url_ = this.baseUrl + "/api/account/profile-picture";
//         url_ = url_.replace(/[?&]$/, "");
//
//         const content_ = JSON.stringify(body);
//
//         let options_ : any = {
//             body: content_,
//             observe: "response",
//             responseType: "blob",
//             headers: new HttpHeaders({
//                 "Content-Type": "application/json",
//             })
//         };
//
//         return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
//             return this.processProfilePicturePost(response_);
//         })).pipe(_observableCatch((response_: any) => {
//             if (response_ instanceof HttpResponseBase) {
//                 try {
//                     return this.processProfilePicturePost(<any>response_);
//                 } catch (e) {
//                     return <Observable<void>><any>_observableThrow(e);
//                 }
//             } else
//                 return <Observable<void>><any>_observableThrow(response_);
//         }));
//     }
//
//     protected processProfilePicturePost(response: HttpResponseBase): Observable<void> {
//         const status = response.status;
//         const responseBlob =
//             response instanceof HttpResponse ? response.body :
//             (<any>response).error instanceof Blob ? (<any>response).error : undefined;
//
//         let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
//         if (status === 200) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             return _observableOf<void>(<any>null);
//             }));
//         } else if (status === 403) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result403: any = null;
//             let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result403 = RemoteServiceErrorResponse.fromJS(resultData403);
//             return throwException("Forbidden", status, _responseText, _headers, result403);
//             }));
//         } else if (status === 401) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result401: any = null;
//             let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result401 = RemoteServiceErrorResponse.fromJS(resultData401);
//             return throwException("Unauthorized", status, _responseText, _headers, result401);
//             }));
//         } else if (status === 400) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result400: any = null;
//             let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result400 = RemoteServiceErrorResponse.fromJS(resultData400);
//             return throwException("Bad Request", status, _responseText, _headers, result400);
//             }));
//         } else if (status === 404) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result404: any = null;
//             let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result404 = RemoteServiceErrorResponse.fromJS(resultData404);
//             return throwException("Not Found", status, _responseText, _headers, result404);
//             }));
//         } else if (status === 501) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result501: any = null;
//             let resultData501 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result501 = RemoteServiceErrorResponse.fromJS(resultData501);
//             return throwException("Server Error", status, _responseText, _headers, result501);
//             }));
//         } else if (status === 500) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result500: any = null;
//             let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result500 = RemoteServiceErrorResponse.fromJS(resultData500);
//             return throwException("Server Error", status, _responseText, _headers, result500);
//             }));
//         } else if (status !== 200 && status !== 204) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             return throwException("An unexpected server error occurred.", status, _responseText, _headers);
//             }));
//         }
//         return _observableOf<void>(<any>null);
//     }
//
//     /**
//      * @return Success
//      */
//     profilePictureGet(id: string): Observable<ProfilePictureSourceDto> {
//         let url_ = this.baseUrl + "/api/account/profile-picture/{id}";
//         if (id === undefined || id === null)
//             throw new Error("The parameter 'id' must be defined.");
//         url_ = url_.replace("{id}", encodeURIComponent("" + id));
//         url_ = url_.replace(/[?&]$/, "");
//
//         let options_ : any = {
//             observe: "response",
//             responseType: "blob",
//             headers: new HttpHeaders({
//                 "Accept": "text/plain"
//             })
//         };
//
//         return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
//             return this.processProfilePictureGet(response_);
//         })).pipe(_observableCatch((response_: any) => {
//             if (response_ instanceof HttpResponseBase) {
//                 try {
//                     return this.processProfilePictureGet(<any>response_);
//                 } catch (e) {
//                     return <Observable<ProfilePictureSourceDto>><any>_observableThrow(e);
//                 }
//             } else
//                 return <Observable<ProfilePictureSourceDto>><any>_observableThrow(response_);
//         }));
//     }
//
//     protected processProfilePictureGet(response: HttpResponseBase): Observable<ProfilePictureSourceDto> {
//         const status = response.status;
//         const responseBlob =
//             response instanceof HttpResponse ? response.body :
//             (<any>response).error instanceof Blob ? (<any>response).error : undefined;
//
//         let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
//         if (status === 200) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result200: any = null;
//             let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result200 = ProfilePictureSourceDto.fromJS(resultData200);
//             return _observableOf(result200);
//             }));
//         } else if (status === 403) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result403: any = null;
//             let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result403 = RemoteServiceErrorResponse.fromJS(resultData403);
//             return throwException("Forbidden", status, _responseText, _headers, result403);
//             }));
//         } else if (status === 401) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result401: any = null;
//             let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result401 = RemoteServiceErrorResponse.fromJS(resultData401);
//             return throwException("Unauthorized", status, _responseText, _headers, result401);
//             }));
//         } else if (status === 400) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result400: any = null;
//             let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result400 = RemoteServiceErrorResponse.fromJS(resultData400);
//             return throwException("Bad Request", status, _responseText, _headers, result400);
//             }));
//         } else if (status === 404) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result404: any = null;
//             let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result404 = RemoteServiceErrorResponse.fromJS(resultData404);
//             return throwException("Not Found", status, _responseText, _headers, result404);
//             }));
//         } else if (status === 501) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result501: any = null;
//             let resultData501 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result501 = RemoteServiceErrorResponse.fromJS(resultData501);
//             return throwException("Server Error", status, _responseText, _headers, result501);
//             }));
//         } else if (status === 500) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result500: any = null;
//             let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result500 = RemoteServiceErrorResponse.fromJS(resultData500);
//             return throwException("Server Error", status, _responseText, _headers, result500);
//             }));
//         } else if (status !== 200 && status !== 204) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             return throwException("An unexpected server error occurred.", status, _responseText, _headers);
//             }));
//         }
//         return _observableOf<ProfilePictureSourceDto>(<any>null);
//     }
//
//     /**
//      * @param body (optional)
//      * @return Success
//      */
//     sendEmailSecurityCode(body: SendEmailSecurityCodeDto | undefined): Observable<void> {
//         let url_ = this.baseUrl + "/api/account/send-email-security-code";
//         url_ = url_.replace(/[?&]$/, "");
//
//         const content_ = JSON.stringify(body);
//
//         let options_ : any = {
//             body: content_,
//             observe: "response",
//             responseType: "blob",
//             headers: new HttpHeaders({
//                 "Content-Type": "application/json",
//             })
//         };
//
//         return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
//             return this.processSendEmailSecurityCode(response_);
//         })).pipe(_observableCatch((response_: any) => {
//             if (response_ instanceof HttpResponseBase) {
//                 try {
//                     return this.processSendEmailSecurityCode(<any>response_);
//                 } catch (e) {
//                     return <Observable<void>><any>_observableThrow(e);
//                 }
//             } else
//                 return <Observable<void>><any>_observableThrow(response_);
//         }));
//     }
//
//     protected processSendEmailSecurityCode(response: HttpResponseBase): Observable<void> {
//         const status = response.status;
//         const responseBlob =
//             response instanceof HttpResponse ? response.body :
//             (<any>response).error instanceof Blob ? (<any>response).error : undefined;
//
//         let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
//         if (status === 200) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             return _observableOf<void>(<any>null);
//             }));
//         } else if (status === 403) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result403: any = null;
//             let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result403 = RemoteServiceErrorResponse.fromJS(resultData403);
//             return throwException("Forbidden", status, _responseText, _headers, result403);
//             }));
//         } else if (status === 401) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result401: any = null;
//             let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result401 = RemoteServiceErrorResponse.fromJS(resultData401);
//             return throwException("Unauthorized", status, _responseText, _headers, result401);
//             }));
//         } else if (status === 400) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result400: any = null;
//             let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result400 = RemoteServiceErrorResponse.fromJS(resultData400);
//             return throwException("Bad Request", status, _responseText, _headers, result400);
//             }));
//         } else if (status === 404) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result404: any = null;
//             let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result404 = RemoteServiceErrorResponse.fromJS(resultData404);
//             return throwException("Not Found", status, _responseText, _headers, result404);
//             }));
//         } else if (status === 501) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result501: any = null;
//             let resultData501 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result501 = RemoteServiceErrorResponse.fromJS(resultData501);
//             return throwException("Server Error", status, _responseText, _headers, result501);
//             }));
//         } else if (status === 500) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result500: any = null;
//             let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result500 = RemoteServiceErrorResponse.fromJS(resultData500);
//             return throwException("Server Error", status, _responseText, _headers, result500);
//             }));
//         } else if (status !== 200 && status !== 204) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             return throwException("An unexpected server error occurred.", status, _responseText, _headers);
//             }));
//         }
//         return _observableOf<void>(<any>null);
//     }
//
//     /**
//      * @param body (optional)
//      * @return Success
//      */
//     sendPhoneSecurityCode(body: SendPhoneSecurityCodeDto | undefined): Observable<void> {
//         let url_ = this.baseUrl + "/api/account/send-phone-security-code";
//         url_ = url_.replace(/[?&]$/, "");
//
//         const content_ = JSON.stringify(body);
//
//         let options_ : any = {
//             body: content_,
//             observe: "response",
//             responseType: "blob",
//             headers: new HttpHeaders({
//                 "Content-Type": "application/json",
//             })
//         };
//
//         return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
//             return this.processSendPhoneSecurityCode(response_);
//         })).pipe(_observableCatch((response_: any) => {
//             if (response_ instanceof HttpResponseBase) {
//                 try {
//                     return this.processSendPhoneSecurityCode(<any>response_);
//                 } catch (e) {
//                     return <Observable<void>><any>_observableThrow(e);
//                 }
//             } else
//                 return <Observable<void>><any>_observableThrow(response_);
//         }));
//     }
//
//     protected processSendPhoneSecurityCode(response: HttpResponseBase): Observable<void> {
//         const status = response.status;
//         const responseBlob =
//             response instanceof HttpResponse ? response.body :
//             (<any>response).error instanceof Blob ? (<any>response).error : undefined;
//
//         let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
//         if (status === 200) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             return _observableOf<void>(<any>null);
//             }));
//         } else if (status === 403) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result403: any = null;
//             let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result403 = RemoteServiceErrorResponse.fromJS(resultData403);
//             return throwException("Forbidden", status, _responseText, _headers, result403);
//             }));
//         } else if (status === 401) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result401: any = null;
//             let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result401 = RemoteServiceErrorResponse.fromJS(resultData401);
//             return throwException("Unauthorized", status, _responseText, _headers, result401);
//             }));
//         } else if (status === 400) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result400: any = null;
//             let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result400 = RemoteServiceErrorResponse.fromJS(resultData400);
//             return throwException("Bad Request", status, _responseText, _headers, result400);
//             }));
//         } else if (status === 404) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result404: any = null;
//             let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result404 = RemoteServiceErrorResponse.fromJS(resultData404);
//             return throwException("Not Found", status, _responseText, _headers, result404);
//             }));
//         } else if (status === 501) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result501: any = null;
//             let resultData501 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result501 = RemoteServiceErrorResponse.fromJS(resultData501);
//             return throwException("Server Error", status, _responseText, _headers, result501);
//             }));
//         } else if (status === 500) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result500: any = null;
//             let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result500 = RemoteServiceErrorResponse.fromJS(resultData500);
//             return throwException("Server Error", status, _responseText, _headers, result500);
//             }));
//         } else if (status !== 200 && status !== 204) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             return throwException("An unexpected server error occurred.", status, _responseText, _headers);
//             }));
//         }
//         return _observableOf<void>(<any>null);
//     }
//
//     profilePictureFilePost(image: FileParameter | undefined): Observable<void> {
//         let url_ = this.baseUrl + "/api/account/profile-picture-file";
//         url_ = url_.replace(/[?&]$/, "");
//
//         const content_ = new FormData();
//         if (image === null || image === undefined)
//             throw new Error("The parameter 'image' cannot be null.");
//         else
//             content_.append("image", image.data, image.fileName ? image.fileName : "image");
//
//         let options_ : any = {
//             body: content_,
//             observe: "response",
//             responseType: "blob",
//             headers: new HttpHeaders({
//             })
//         };
//
//         return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
//             return this.processProfilePictureFilePost(response_);
//         })).pipe(_observableCatch((response_: any) => {
//             if (response_ instanceof HttpResponseBase) {
//                 try {
//                     return this.processProfilePictureFilePost(<any>response_);
//                 } catch (e) {
//                     return <Observable<void>><any>_observableThrow(e);
//                 }
//             } else
//                 return <Observable<void>><any>_observableThrow(response_);
//         }));
//     }
//
//     protected processProfilePictureFilePost(response: HttpResponseBase): Observable<void> {
//         const status = response.status;
//         const responseBlob =
//             response instanceof HttpResponse ? response.body :
//             (<any>response).error instanceof Blob ? (<any>response).error : undefined;
//
//         let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
//         if (status === 403) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result403: any = null;
//             let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result403 = RemoteServiceErrorResponse.fromJS(resultData403);
//             return throwException("Forbidden", status, _responseText, _headers, result403);
//             }));
//         } else if (status === 401) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result401: any = null;
//             let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result401 = RemoteServiceErrorResponse.fromJS(resultData401);
//             return throwException("Unauthorized", status, _responseText, _headers, result401);
//             }));
//         } else if (status === 400) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result400: any = null;
//             let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result400 = RemoteServiceErrorResponse.fromJS(resultData400);
//             return throwException("Bad Request", status, _responseText, _headers, result400);
//             }));
//         } else if (status === 404) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result404: any = null;
//             let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result404 = RemoteServiceErrorResponse.fromJS(resultData404);
//             return throwException("Not Found", status, _responseText, _headers, result404);
//             }));
//         } else if (status === 501) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result501: any = null;
//             let resultData501 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result501 = RemoteServiceErrorResponse.fromJS(resultData501);
//             return throwException("Server Error", status, _responseText, _headers, result501);
//             }));
//         } else if (status === 500) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result500: any = null;
//             let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result500 = RemoteServiceErrorResponse.fromJS(resultData500);
//             return throwException("Server Error", status, _responseText, _headers, result500);
//             }));
//         } else if (status !== 200 && status !== 204) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             return throwException("An unexpected server error occurred.", status, _responseText, _headers);
//             }));
//         }
//         return _observableOf<void>(<any>null);
//     }
//
//     profilePictureFileGet(id: string): Observable<void> {
//         let url_ = this.baseUrl + "/api/account/profile-picture-file/{id}";
//         if (id === undefined || id === null)
//             throw new Error("The parameter 'id' must be defined.");
//         url_ = url_.replace("{id}", encodeURIComponent("" + id));
//         url_ = url_.replace(/[?&]$/, "");
//
//         let options_ : any = {
//             observe: "response",
//             responseType: "blob",
//             headers: new HttpHeaders({
//             })
//         };
//
//         return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
//             return this.processProfilePictureFileGet(response_);
//         })).pipe(_observableCatch((response_: any) => {
//             if (response_ instanceof HttpResponseBase) {
//                 try {
//                     return this.processProfilePictureFileGet(<any>response_);
//                 } catch (e) {
//                     return <Observable<void>><any>_observableThrow(e);
//                 }
//             } else
//                 return <Observable<void>><any>_observableThrow(response_);
//         }));
//     }
//
//     protected processProfilePictureFileGet(response: HttpResponseBase): Observable<void> {
//         const status = response.status;
//         const responseBlob =
//             response instanceof HttpResponse ? response.body :
//             (<any>response).error instanceof Blob ? (<any>response).error : undefined;
//
//         let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
//         if (status === 403) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result403: any = null;
//             let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result403 = RemoteServiceErrorResponse.fromJS(resultData403);
//             return throwException("Forbidden", status, _responseText, _headers, result403);
//             }));
//         } else if (status === 401) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result401: any = null;
//             let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result401 = RemoteServiceErrorResponse.fromJS(resultData401);
//             return throwException("Unauthorized", status, _responseText, _headers, result401);
//             }));
//         } else if (status === 400) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result400: any = null;
//             let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result400 = RemoteServiceErrorResponse.fromJS(resultData400);
//             return throwException("Bad Request", status, _responseText, _headers, result400);
//             }));
//         } else if (status === 404) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result404: any = null;
//             let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result404 = RemoteServiceErrorResponse.fromJS(resultData404);
//             return throwException("Not Found", status, _responseText, _headers, result404);
//             }));
//         } else if (status === 501) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result501: any = null;
//             let resultData501 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result501 = RemoteServiceErrorResponse.fromJS(resultData501);
//             return throwException("Server Error", status, _responseText, _headers, result501);
//             }));
//         } else if (status === 500) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result500: any = null;
//             let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result500 = RemoteServiceErrorResponse.fromJS(resultData500);
//             return throwException("Server Error", status, _responseText, _headers, result500);
//             }));
//         } else if (status !== 200 && status !== 204) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             return throwException("An unexpected server error occurred.", status, _responseText, _headers);
//             }));
//         }
//         return _observableOf<void>(<any>null);
//     }
//
//     /**
//      * @param captchaResponse (optional)
//      * @return Success
//      */
//     recaptchaValidate(captchaResponse: string | undefined): Observable<void> {
//         let url_ = this.baseUrl + "/api/account/recaptcha-validate?";
//         if (captchaResponse === null)
//             throw new Error("The parameter 'captchaResponse' cannot be null.");
//         else if (captchaResponse !== undefined)
//             url_ += "captchaResponse=" + encodeURIComponent("" + captchaResponse) + "&";
//         url_ = url_.replace(/[?&]$/, "");
//
//         let options_ : any = {
//             observe: "response",
//             responseType: "blob",
//             headers: new HttpHeaders({
//             })
//         };
//
//         return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
//             return this.processRecaptchaValidate(response_);
//         })).pipe(_observableCatch((response_: any) => {
//             if (response_ instanceof HttpResponseBase) {
//                 try {
//                     return this.processRecaptchaValidate(<any>response_);
//                 } catch (e) {
//                     return <Observable<void>><any>_observableThrow(e);
//                 }
//             } else
//                 return <Observable<void>><any>_observableThrow(response_);
//         }));
//     }
//
//     protected processRecaptchaValidate(response: HttpResponseBase): Observable<void> {
//         const status = response.status;
//         const responseBlob =
//             response instanceof HttpResponse ? response.body :
//             (<any>response).error instanceof Blob ? (<any>response).error : undefined;
//
//         let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
//         if (status === 200) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             return _observableOf<void>(<any>null);
//             }));
//         } else if (status === 403) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result403: any = null;
//             let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result403 = RemoteServiceErrorResponse.fromJS(resultData403);
//             return throwException("Forbidden", status, _responseText, _headers, result403);
//             }));
//         } else if (status === 401) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result401: any = null;
//             let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result401 = RemoteServiceErrorResponse.fromJS(resultData401);
//             return throwException("Unauthorized", status, _responseText, _headers, result401);
//             }));
//         } else if (status === 400) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result400: any = null;
//             let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result400 = RemoteServiceErrorResponse.fromJS(resultData400);
//             return throwException("Bad Request", status, _responseText, _headers, result400);
//             }));
//         } else if (status === 404) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result404: any = null;
//             let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result404 = RemoteServiceErrorResponse.fromJS(resultData404);
//             return throwException("Not Found", status, _responseText, _headers, result404);
//             }));
//         } else if (status === 501) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result501: any = null;
//             let resultData501 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result501 = RemoteServiceErrorResponse.fromJS(resultData501);
//             return throwException("Server Error", status, _responseText, _headers, result501);
//             }));
//         } else if (status === 500) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result500: any = null;
//             let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result500 = RemoteServiceErrorResponse.fromJS(resultData500);
//             return throwException("Server Error", status, _responseText, _headers, result500);
//             }));
//         } else if (status !== 200 && status !== 204) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             return throwException("An unexpected server error occurred.", status, _responseText, _headers);
//             }));
//         }
//         return _observableOf<void>(<any>null);
//     }
//
//     /**
//      * @return Success
//      */
//     externalProvider(): Observable<ExternalProviderDto> {
//         let url_ = this.baseUrl + "/api/account/external-provider";
//         url_ = url_.replace(/[?&]$/, "");
//
//         let options_ : any = {
//             observe: "response",
//             responseType: "blob",
//             headers: new HttpHeaders({
//                 "Accept": "text/plain"
//             })
//         };
//
//         return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
//             return this.processExternalProvider(response_);
//         })).pipe(_observableCatch((response_: any) => {
//             if (response_ instanceof HttpResponseBase) {
//                 try {
//                     return this.processExternalProvider(<any>response_);
//                 } catch (e) {
//                     return <Observable<ExternalProviderDto>><any>_observableThrow(e);
//                 }
//             } else
//                 return <Observable<ExternalProviderDto>><any>_observableThrow(response_);
//         }));
//     }
//
//     protected processExternalProvider(response: HttpResponseBase): Observable<ExternalProviderDto> {
//         const status = response.status;
//         const responseBlob =
//             response instanceof HttpResponse ? response.body :
//             (<any>response).error instanceof Blob ? (<any>response).error : undefined;
//
//         let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
//         if (status === 200) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result200: any = null;
//             let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result200 = ExternalProviderDto.fromJS(resultData200);
//             return _observableOf(result200);
//             }));
//         } else if (status === 403) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result403: any = null;
//             let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result403 = RemoteServiceErrorResponse.fromJS(resultData403);
//             return throwException("Forbidden", status, _responseText, _headers, result403);
//             }));
//         } else if (status === 401) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result401: any = null;
//             let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result401 = RemoteServiceErrorResponse.fromJS(resultData401);
//             return throwException("Unauthorized", status, _responseText, _headers, result401);
//             }));
//         } else if (status === 400) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result400: any = null;
//             let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result400 = RemoteServiceErrorResponse.fromJS(resultData400);
//             return throwException("Bad Request", status, _responseText, _headers, result400);
//             }));
//         } else if (status === 404) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result404: any = null;
//             let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result404 = RemoteServiceErrorResponse.fromJS(resultData404);
//             return throwException("Not Found", status, _responseText, _headers, result404);
//             }));
//         } else if (status === 501) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result501: any = null;
//             let resultData501 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result501 = RemoteServiceErrorResponse.fromJS(resultData501);
//             return throwException("Server Error", status, _responseText, _headers, result501);
//             }));
//         } else if (status === 500) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result500: any = null;
//             let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result500 = RemoteServiceErrorResponse.fromJS(resultData500);
//             return throwException("Server Error", status, _responseText, _headers, result500);
//             }));
//         } else if (status !== 200 && status !== 204) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             return throwException("An unexpected server error occurred.", status, _responseText, _headers);
//             }));
//         }
//         return _observableOf<ExternalProviderDto>(<any>null);
//     }
//
//     /**
//      * @param body (optional)
//      * @return Success
//      */
//     login(body: UserLoginInfo | undefined): Observable<AbpLoginResult> {
//         let url_ = this.baseUrl + "/api/account/login";
//         url_ = url_.replace(/[?&]$/, "");
//
//         const content_ = JSON.stringify(body);
//
//         let options_ : any = {
//             body: content_,
//             observe: "response",
//             responseType: "blob",
//             headers: new HttpHeaders({
//                 "Content-Type": "application/json",
//                 "Accept": "text/plain"
//             })
//         };
//
//         return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
//             return this.processLogin(response_);
//         })).pipe(_observableCatch((response_: any) => {
//             if (response_ instanceof HttpResponseBase) {
//                 try {
//                     return this.processLogin(<any>response_);
//                 } catch (e) {
//                     return <Observable<AbpLoginResult>><any>_observableThrow(e);
//                 }
//             } else
//                 return <Observable<AbpLoginResult>><any>_observableThrow(response_);
//         }));
//     }
//
//     protected processLogin(response: HttpResponseBase): Observable<AbpLoginResult> {
//         const status = response.status;
//         const responseBlob =
//             response instanceof HttpResponse ? response.body :
//             (<any>response).error instanceof Blob ? (<any>response).error : undefined;
//
//         let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
//         if (status === 200) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result200: any = null;
//             let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result200 = AbpLoginResult.fromJS(resultData200);
//             return _observableOf(result200);
//             }));
//         } else if (status === 403) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result403: any = null;
//             let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result403 = RemoteServiceErrorResponse.fromJS(resultData403);
//             return throwException("Forbidden", status, _responseText, _headers, result403);
//             }));
//         } else if (status === 401) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result401: any = null;
//             let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result401 = RemoteServiceErrorResponse.fromJS(resultData401);
//             return throwException("Unauthorized", status, _responseText, _headers, result401);
//             }));
//         } else if (status === 400) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result400: any = null;
//             let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result400 = RemoteServiceErrorResponse.fromJS(resultData400);
//             return throwException("Bad Request", status, _responseText, _headers, result400);
//             }));
//         } else if (status === 404) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result404: any = null;
//             let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result404 = RemoteServiceErrorResponse.fromJS(resultData404);
//             return throwException("Not Found", status, _responseText, _headers, result404);
//             }));
//         } else if (status === 501) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result501: any = null;
//             let resultData501 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result501 = RemoteServiceErrorResponse.fromJS(resultData501);
//             return throwException("Server Error", status, _responseText, _headers, result501);
//             }));
//         } else if (status === 500) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result500: any = null;
//             let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result500 = RemoteServiceErrorResponse.fromJS(resultData500);
//             return throwException("Server Error", status, _responseText, _headers, result500);
//             }));
//         } else if (status !== 200 && status !== 204) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             return throwException("An unexpected server error occurred.", status, _responseText, _headers);
//             }));
//         }
//         return _observableOf<AbpLoginResult>(<any>null);
//     }
//
//     /**
//      * @param body (optional)
//      * @return Success
//      */
//     linkLogin(body: LinkUserLoginInfo | undefined): Observable<AbpLoginResult> {
//         let url_ = this.baseUrl + "/api/account/linkLogin";
//         url_ = url_.replace(/[?&]$/, "");
//
//         const content_ = JSON.stringify(body);
//
//         let options_ : any = {
//             body: content_,
//             observe: "response",
//             responseType: "blob",
//             headers: new HttpHeaders({
//                 "Content-Type": "application/json",
//                 "Accept": "text/plain"
//             })
//         };
//
//         return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
//             return this.processLinkLogin(response_);
//         })).pipe(_observableCatch((response_: any) => {
//             if (response_ instanceof HttpResponseBase) {
//                 try {
//                     return this.processLinkLogin(<any>response_);
//                 } catch (e) {
//                     return <Observable<AbpLoginResult>><any>_observableThrow(e);
//                 }
//             } else
//                 return <Observable<AbpLoginResult>><any>_observableThrow(response_);
//         }));
//     }
//
//     protected processLinkLogin(response: HttpResponseBase): Observable<AbpLoginResult> {
//         const status = response.status;
//         const responseBlob =
//             response instanceof HttpResponse ? response.body :
//             (<any>response).error instanceof Blob ? (<any>response).error : undefined;
//
//         let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
//         if (status === 200) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result200: any = null;
//             let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result200 = AbpLoginResult.fromJS(resultData200);
//             return _observableOf(result200);
//             }));
//         } else if (status === 403) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result403: any = null;
//             let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result403 = RemoteServiceErrorResponse.fromJS(resultData403);
//             return throwException("Forbidden", status, _responseText, _headers, result403);
//             }));
//         } else if (status === 401) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result401: any = null;
//             let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result401 = RemoteServiceErrorResponse.fromJS(resultData401);
//             return throwException("Unauthorized", status, _responseText, _headers, result401);
//             }));
//         } else if (status === 400) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result400: any = null;
//             let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result400 = RemoteServiceErrorResponse.fromJS(resultData400);
//             return throwException("Bad Request", status, _responseText, _headers, result400);
//             }));
//         } else if (status === 404) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result404: any = null;
//             let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result404 = RemoteServiceErrorResponse.fromJS(resultData404);
//             return throwException("Not Found", status, _responseText, _headers, result404);
//             }));
//         } else if (status === 501) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result501: any = null;
//             let resultData501 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result501 = RemoteServiceErrorResponse.fromJS(resultData501);
//             return throwException("Server Error", status, _responseText, _headers, result501);
//             }));
//         } else if (status === 500) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result500: any = null;
//             let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result500 = RemoteServiceErrorResponse.fromJS(resultData500);
//             return throwException("Server Error", status, _responseText, _headers, result500);
//             }));
//         } else if (status !== 200 && status !== 204) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             return throwException("An unexpected server error occurred.", status, _responseText, _headers);
//             }));
//         }
//         return _observableOf<AbpLoginResult>(<any>null);
//     }
//
//     /**
//      * @return Success
//      */
//     logout(): Observable<void> {
//         let url_ = this.baseUrl + "/api/account/logout";
//         url_ = url_.replace(/[?&]$/, "");
//
//         let options_ : any = {
//             observe: "response",
//             responseType: "blob",
//             headers: new HttpHeaders({
//             })
//         };
//
//         return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
//             return this.processLogout(response_);
//         })).pipe(_observableCatch((response_: any) => {
//             if (response_ instanceof HttpResponseBase) {
//                 try {
//                     return this.processLogout(<any>response_);
//                 } catch (e) {
//                     return <Observable<void>><any>_observableThrow(e);
//                 }
//             } else
//                 return <Observable<void>><any>_observableThrow(response_);
//         }));
//     }
//
//     protected processLogout(response: HttpResponseBase): Observable<void> {
//         const status = response.status;
//         const responseBlob =
//             response instanceof HttpResponse ? response.body :
//             (<any>response).error instanceof Blob ? (<any>response).error : undefined;
//
//         let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
//         if (status === 200) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             return _observableOf<void>(<any>null);
//             }));
//         } else if (status === 403) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result403: any = null;
//             let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result403 = RemoteServiceErrorResponse.fromJS(resultData403);
//             return throwException("Forbidden", status, _responseText, _headers, result403);
//             }));
//         } else if (status === 401) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result401: any = null;
//             let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result401 = RemoteServiceErrorResponse.fromJS(resultData401);
//             return throwException("Unauthorized", status, _responseText, _headers, result401);
//             }));
//         } else if (status === 400) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result400: any = null;
//             let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result400 = RemoteServiceErrorResponse.fromJS(resultData400);
//             return throwException("Bad Request", status, _responseText, _headers, result400);
//             }));
//         } else if (status === 404) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result404: any = null;
//             let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result404 = RemoteServiceErrorResponse.fromJS(resultData404);
//             return throwException("Not Found", status, _responseText, _headers, result404);
//             }));
//         } else if (status === 501) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result501: any = null;
//             let resultData501 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result501 = RemoteServiceErrorResponse.fromJS(resultData501);
//             return throwException("Server Error", status, _responseText, _headers, result501);
//             }));
//         } else if (status === 500) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result500: any = null;
//             let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result500 = RemoteServiceErrorResponse.fromJS(resultData500);
//             return throwException("Server Error", status, _responseText, _headers, result500);
//             }));
//         } else if (status !== 200 && status !== 204) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             return throwException("An unexpected server error occurred.", status, _responseText, _headers);
//             }));
//         }
//         return _observableOf<void>(<any>null);
//     }
//
//     /**
//      * @param body (optional)
//      * @return Success
//      */
//     checkPassword(body: UserLoginInfo | undefined): Observable<AbpLoginResult> {
//         let url_ = this.baseUrl + "/api/account/checkPassword";
//         url_ = url_.replace(/[?&]$/, "");
//
//         const content_ = JSON.stringify(body);
//
//         let options_ : any = {
//             body: content_,
//             observe: "response",
//             responseType: "blob",
//             headers: new HttpHeaders({
//                 "Content-Type": "application/json",
//                 "Accept": "text/plain"
//             })
//         };
//
//         return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
//             return this.processCheckPassword(response_);
//         })).pipe(_observableCatch((response_: any) => {
//             if (response_ instanceof HttpResponseBase) {
//                 try {
//                     return this.processCheckPassword(<any>response_);
//                 } catch (e) {
//                     return <Observable<AbpLoginResult>><any>_observableThrow(e);
//                 }
//             } else
//                 return <Observable<AbpLoginResult>><any>_observableThrow(response_);
//         }));
//     }
//
//     protected processCheckPassword(response: HttpResponseBase): Observable<AbpLoginResult> {
//         const status = response.status;
//         const responseBlob =
//             response instanceof HttpResponse ? response.body :
//             (<any>response).error instanceof Blob ? (<any>response).error : undefined;
//
//         let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
//         if (status === 200) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result200: any = null;
//             let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result200 = AbpLoginResult.fromJS(resultData200);
//             return _observableOf(result200);
//             }));
//         } else if (status === 403) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result403: any = null;
//             let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result403 = RemoteServiceErrorResponse.fromJS(resultData403);
//             return throwException("Forbidden", status, _responseText, _headers, result403);
//             }));
//         } else if (status === 401) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result401: any = null;
//             let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result401 = RemoteServiceErrorResponse.fromJS(resultData401);
//             return throwException("Unauthorized", status, _responseText, _headers, result401);
//             }));
//         } else if (status === 400) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result400: any = null;
//             let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result400 = RemoteServiceErrorResponse.fromJS(resultData400);
//             return throwException("Bad Request", status, _responseText, _headers, result400);
//             }));
//         } else if (status === 404) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result404: any = null;
//             let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result404 = RemoteServiceErrorResponse.fromJS(resultData404);
//             return throwException("Not Found", status, _responseText, _headers, result404);
//             }));
//         } else if (status === 501) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result501: any = null;
//             let resultData501 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result501 = RemoteServiceErrorResponse.fromJS(resultData501);
//             return throwException("Server Error", status, _responseText, _headers, result501);
//             }));
//         } else if (status === 500) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result500: any = null;
//             let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result500 = RemoteServiceErrorResponse.fromJS(resultData500);
//             return throwException("Server Error", status, _responseText, _headers, result500);
//             }));
//         } else if (status !== 200 && status !== 204) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             return throwException("An unexpected server error occurred.", status, _responseText, _headers);
//             }));
//         }
//         return _observableOf<AbpLoginResult>(<any>null);
//     }
// }
//
// @Injectable({providedIn: 'root'})
// export class ExternalProviderServiceProxy {
//     private http: HttpClient;
//     private baseUrl: string;
//     protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;
//
//     constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
//         this.http = http;
//         this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
//     }
//
//     /**
//      * @param tenantId (optional)
//      * @param name (optional)
//      * @return Success
//      */
//     byName(tenantId: string | undefined, name: string | undefined): Observable<ExternalProviderItemWithSecretDto> {
//         let url_ = this.baseUrl + "/api/account/external-provider/by-name?";
//         if (tenantId === null)
//             throw new Error("The parameter 'tenantId' cannot be null.");
//         else if (tenantId !== undefined)
//             url_ += "TenantId=" + encodeURIComponent("" + tenantId) + "&";
//         if (name === null)
//             throw new Error("The parameter 'name' cannot be null.");
//         else if (name !== undefined)
//             url_ += "Name=" + encodeURIComponent("" + name) + "&";
//         url_ = url_.replace(/[?&]$/, "");
//
//         let options_ : any = {
//             observe: "response",
//             responseType: "blob",
//             headers: new HttpHeaders({
//                 "Accept": "text/plain"
//             })
//         };
//
//         return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
//             return this.processByName(response_);
//         })).pipe(_observableCatch((response_: any) => {
//             if (response_ instanceof HttpResponseBase) {
//                 try {
//                     return this.processByName(<any>response_);
//                 } catch (e) {
//                     return <Observable<ExternalProviderItemWithSecretDto>><any>_observableThrow(e);
//                 }
//             } else
//                 return <Observable<ExternalProviderItemWithSecretDto>><any>_observableThrow(response_);
//         }));
//     }
//
//     protected processByName(response: HttpResponseBase): Observable<ExternalProviderItemWithSecretDto> {
//         const status = response.status;
//         const responseBlob =
//             response instanceof HttpResponse ? response.body :
//             (<any>response).error instanceof Blob ? (<any>response).error : undefined;
//
//         let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
//         if (status === 200) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result200: any = null;
//             let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result200 = ExternalProviderItemWithSecretDto.fromJS(resultData200);
//             return _observableOf(result200);
//             }));
//         } else if (status === 403) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result403: any = null;
//             let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result403 = RemoteServiceErrorResponse.fromJS(resultData403);
//             return throwException("Forbidden", status, _responseText, _headers, result403);
//             }));
//         } else if (status === 401) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result401: any = null;
//             let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result401 = RemoteServiceErrorResponse.fromJS(resultData401);
//             return throwException("Unauthorized", status, _responseText, _headers, result401);
//             }));
//         } else if (status === 400) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result400: any = null;
//             let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result400 = RemoteServiceErrorResponse.fromJS(resultData400);
//             return throwException("Bad Request", status, _responseText, _headers, result400);
//             }));
//         } else if (status === 404) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result404: any = null;
//             let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result404 = RemoteServiceErrorResponse.fromJS(resultData404);
//             return throwException("Not Found", status, _responseText, _headers, result404);
//             }));
//         } else if (status === 501) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result501: any = null;
//             let resultData501 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result501 = RemoteServiceErrorResponse.fromJS(resultData501);
//             return throwException("Server Error", status, _responseText, _headers, result501);
//             }));
//         } else if (status === 500) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result500: any = null;
//             let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result500 = RemoteServiceErrorResponse.fromJS(resultData500);
//             return throwException("Server Error", status, _responseText, _headers, result500);
//             }));
//         } else if (status !== 200 && status !== 204) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             return throwException("An unexpected server error occurred.", status, _responseText, _headers);
//             }));
//         }
//         return _observableOf<ExternalProviderItemWithSecretDto>(<any>null);
//     }
// }
//
// @Injectable({providedIn: 'root'})
// export class AccountAdminServiceProxy {
//     private http: HttpClient;
//     private baseUrl: string;
//     protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;
//
//     constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
//         this.http = http;
//         this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
//     }
//
//     /**
//      * @return Success
//      */
//     settingsGet(): Observable<AccountSettingsDto> {
//         let url_ = this.baseUrl + "/api/account-admin/settings";
//         url_ = url_.replace(/[?&]$/, "");
//
//         let options_ : any = {
//             observe: "response",
//             responseType: "blob",
//             headers: new HttpHeaders({
//                 "Accept": "text/plain"
//             })
//         };
//
//         return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
//             return this.processSettingsGet(response_);
//         })).pipe(_observableCatch((response_: any) => {
//             if (response_ instanceof HttpResponseBase) {
//                 try {
//                     return this.processSettingsGet(<any>response_);
//                 } catch (e) {
//                     return <Observable<AccountSettingsDto>><any>_observableThrow(e);
//                 }
//             } else
//                 return <Observable<AccountSettingsDto>><any>_observableThrow(response_);
//         }));
//     }
//
//     protected processSettingsGet(response: HttpResponseBase): Observable<AccountSettingsDto> {
//         const status = response.status;
//         const responseBlob =
//             response instanceof HttpResponse ? response.body :
//             (<any>response).error instanceof Blob ? (<any>response).error : undefined;
//
//         let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
//         if (status === 200) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result200: any = null;
//             let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result200 = AccountSettingsDto.fromJS(resultData200);
//             return _observableOf(result200);
//             }));
//         } else if (status === 403) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result403: any = null;
//             let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result403 = RemoteServiceErrorResponse.fromJS(resultData403);
//             return throwException("Forbidden", status, _responseText, _headers, result403);
//             }));
//         } else if (status === 401) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result401: any = null;
//             let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result401 = RemoteServiceErrorResponse.fromJS(resultData401);
//             return throwException("Unauthorized", status, _responseText, _headers, result401);
//             }));
//         } else if (status === 400) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result400: any = null;
//             let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result400 = RemoteServiceErrorResponse.fromJS(resultData400);
//             return throwException("Bad Request", status, _responseText, _headers, result400);
//             }));
//         } else if (status === 404) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result404: any = null;
//             let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result404 = RemoteServiceErrorResponse.fromJS(resultData404);
//             return throwException("Not Found", status, _responseText, _headers, result404);
//             }));
//         } else if (status === 501) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result501: any = null;
//             let resultData501 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result501 = RemoteServiceErrorResponse.fromJS(resultData501);
//             return throwException("Server Error", status, _responseText, _headers, result501);
//             }));
//         } else if (status === 500) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result500: any = null;
//             let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result500 = RemoteServiceErrorResponse.fromJS(resultData500);
//             return throwException("Server Error", status, _responseText, _headers, result500);
//             }));
//         } else if (status !== 200 && status !== 204) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             return throwException("An unexpected server error occurred.", status, _responseText, _headers);
//             }));
//         }
//         return _observableOf<AccountSettingsDto>(<any>null);
//     }
//
//     /**
//      * @param body (optional)
//      * @return Success
//      */
//     settingsPut(body: AccountSettingsDto | undefined): Observable<void> {
//         let url_ = this.baseUrl + "/api/account-admin/settings";
//         url_ = url_.replace(/[?&]$/, "");
//
//         const content_ = JSON.stringify(body);
//
//         let options_ : any = {
//             body: content_,
//             observe: "response",
//             responseType: "blob",
//             headers: new HttpHeaders({
//                 "Content-Type": "application/json",
//             })
//         };
//
//         return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
//             return this.processSettingsPut(response_);
//         })).pipe(_observableCatch((response_: any) => {
//             if (response_ instanceof HttpResponseBase) {
//                 try {
//                     return this.processSettingsPut(<any>response_);
//                 } catch (e) {
//                     return <Observable<void>><any>_observableThrow(e);
//                 }
//             } else
//                 return <Observable<void>><any>_observableThrow(response_);
//         }));
//     }
//
//     protected processSettingsPut(response: HttpResponseBase): Observable<void> {
//         const status = response.status;
//         const responseBlob =
//             response instanceof HttpResponse ? response.body :
//             (<any>response).error instanceof Blob ? (<any>response).error : undefined;
//
//         let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
//         if (status === 200) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             return _observableOf<void>(<any>null);
//             }));
//         } else if (status === 403) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result403: any = null;
//             let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result403 = RemoteServiceErrorResponse.fromJS(resultData403);
//             return throwException("Forbidden", status, _responseText, _headers, result403);
//             }));
//         } else if (status === 401) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result401: any = null;
//             let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result401 = RemoteServiceErrorResponse.fromJS(resultData401);
//             return throwException("Unauthorized", status, _responseText, _headers, result401);
//             }));
//         } else if (status === 400) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result400: any = null;
//             let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result400 = RemoteServiceErrorResponse.fromJS(resultData400);
//             return throwException("Bad Request", status, _responseText, _headers, result400);
//             }));
//         } else if (status === 404) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result404: any = null;
//             let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result404 = RemoteServiceErrorResponse.fromJS(resultData404);
//             return throwException("Not Found", status, _responseText, _headers, result404);
//             }));
//         } else if (status === 501) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result501: any = null;
//             let resultData501 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result501 = RemoteServiceErrorResponse.fromJS(resultData501);
//             return throwException("Server Error", status, _responseText, _headers, result501);
//             }));
//         } else if (status === 500) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result500: any = null;
//             let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result500 = RemoteServiceErrorResponse.fromJS(resultData500);
//             return throwException("Server Error", status, _responseText, _headers, result500);
//             }));
//         } else if (status !== 200 && status !== 204) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             return throwException("An unexpected server error occurred.", status, _responseText, _headers);
//             }));
//         }
//         return _observableOf<void>(<any>null);
//     }
// }
//
// @Injectable({providedIn: 'root'})
// export class SettingsServiceProxy {
//     private http: HttpClient;
//     private baseUrl: string;
//     protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;
//
//     constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
//         this.http = http;
//         this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
//     }
//
//     /**
//      * @return Success
//      */
//     ldapGet(): Observable<AccountLdapSettingsDto> {
//         let url_ = this.baseUrl + "/api/account-admin/settings/ldap";
//         url_ = url_.replace(/[?&]$/, "");
//
//         let options_ : any = {
//             observe: "response",
//             responseType: "blob",
//             headers: new HttpHeaders({
//                 "Accept": "text/plain"
//             })
//         };
//
//         return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
//             return this.processLdapGet(response_);
//         })).pipe(_observableCatch((response_: any) => {
//             if (response_ instanceof HttpResponseBase) {
//                 try {
//                     return this.processLdapGet(<any>response_);
//                 } catch (e) {
//                     return <Observable<AccountLdapSettingsDto>><any>_observableThrow(e);
//                 }
//             } else
//                 return <Observable<AccountLdapSettingsDto>><any>_observableThrow(response_);
//         }));
//     }
//
//     protected processLdapGet(response: HttpResponseBase): Observable<AccountLdapSettingsDto> {
//         const status = response.status;
//         const responseBlob =
//             response instanceof HttpResponse ? response.body :
//             (<any>response).error instanceof Blob ? (<any>response).error : undefined;
//
//         let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
//         if (status === 200) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result200: any = null;
//             let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result200 = AccountLdapSettingsDto.fromJS(resultData200);
//             return _observableOf(result200);
//             }));
//         } else if (status === 403) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result403: any = null;
//             let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result403 = RemoteServiceErrorResponse.fromJS(resultData403);
//             return throwException("Forbidden", status, _responseText, _headers, result403);
//             }));
//         } else if (status === 401) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result401: any = null;
//             let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result401 = RemoteServiceErrorResponse.fromJS(resultData401);
//             return throwException("Unauthorized", status, _responseText, _headers, result401);
//             }));
//         } else if (status === 400) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result400: any = null;
//             let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result400 = RemoteServiceErrorResponse.fromJS(resultData400);
//             return throwException("Bad Request", status, _responseText, _headers, result400);
//             }));
//         } else if (status === 404) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result404: any = null;
//             let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result404 = RemoteServiceErrorResponse.fromJS(resultData404);
//             return throwException("Not Found", status, _responseText, _headers, result404);
//             }));
//         } else if (status === 501) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result501: any = null;
//             let resultData501 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result501 = RemoteServiceErrorResponse.fromJS(resultData501);
//             return throwException("Server Error", status, _responseText, _headers, result501);
//             }));
//         } else if (status === 500) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result500: any = null;
//             let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result500 = RemoteServiceErrorResponse.fromJS(resultData500);
//             return throwException("Server Error", status, _responseText, _headers, result500);
//             }));
//         } else if (status !== 200 && status !== 204) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             return throwException("An unexpected server error occurred.", status, _responseText, _headers);
//             }));
//         }
//         return _observableOf<AccountLdapSettingsDto>(<any>null);
//     }
//
//     /**
//      * @param body (optional)
//      * @return Success
//      */
//     ldapPut(body: AccountLdapSettingsDto | undefined): Observable<void> {
//         let url_ = this.baseUrl + "/api/account-admin/settings/ldap";
//         url_ = url_.replace(/[?&]$/, "");
//
//         const content_ = JSON.stringify(body);
//
//         let options_ : any = {
//             body: content_,
//             observe: "response",
//             responseType: "blob",
//             headers: new HttpHeaders({
//                 "Content-Type": "application/json",
//             })
//         };
//
//         return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
//             return this.processLdapPut(response_);
//         })).pipe(_observableCatch((response_: any) => {
//             if (response_ instanceof HttpResponseBase) {
//                 try {
//                     return this.processLdapPut(<any>response_);
//                 } catch (e) {
//                     return <Observable<void>><any>_observableThrow(e);
//                 }
//             } else
//                 return <Observable<void>><any>_observableThrow(response_);
//         }));
//     }
//
//     protected processLdapPut(response: HttpResponseBase): Observable<void> {
//         const status = response.status;
//         const responseBlob =
//             response instanceof HttpResponse ? response.body :
//             (<any>response).error instanceof Blob ? (<any>response).error : undefined;
//
//         let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
//         if (status === 200) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             return _observableOf<void>(<any>null);
//             }));
//         } else if (status === 403) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result403: any = null;
//             let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result403 = RemoteServiceErrorResponse.fromJS(resultData403);
//             return throwException("Forbidden", status, _responseText, _headers, result403);
//             }));
//         } else if (status === 401) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result401: any = null;
//             let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result401 = RemoteServiceErrorResponse.fromJS(resultData401);
//             return throwException("Unauthorized", status, _responseText, _headers, result401);
//             }));
//         } else if (status === 400) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result400: any = null;
//             let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result400 = RemoteServiceErrorResponse.fromJS(resultData400);
//             return throwException("Bad Request", status, _responseText, _headers, result400);
//             }));
//         } else if (status === 404) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result404: any = null;
//             let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result404 = RemoteServiceErrorResponse.fromJS(resultData404);
//             return throwException("Not Found", status, _responseText, _headers, result404);
//             }));
//         } else if (status === 501) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result501: any = null;
//             let resultData501 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result501 = RemoteServiceErrorResponse.fromJS(resultData501);
//             return throwException("Server Error", status, _responseText, _headers, result501);
//             }));
//         } else if (status === 500) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result500: any = null;
//             let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result500 = RemoteServiceErrorResponse.fromJS(resultData500);
//             return throwException("Server Error", status, _responseText, _headers, result500);
//             }));
//         } else if (status !== 200 && status !== 204) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             return throwException("An unexpected server error occurred.", status, _responseText, _headers);
//             }));
//         }
//         return _observableOf<void>(<any>null);
//     }
//
//     /**
//      * @return Success
//      */
//     twoFactorGet(): Observable<AccountTwoFactorSettingsDto> {
//         let url_ = this.baseUrl + "/api/account-admin/settings/two-factor";
//         url_ = url_.replace(/[?&]$/, "");
//
//         let options_ : any = {
//             observe: "response",
//             responseType: "blob",
//             headers: new HttpHeaders({
//                 "Accept": "text/plain"
//             })
//         };
//
//         return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
//             return this.processTwoFactorGet(response_);
//         })).pipe(_observableCatch((response_: any) => {
//             if (response_ instanceof HttpResponseBase) {
//                 try {
//                     return this.processTwoFactorGet(<any>response_);
//                 } catch (e) {
//                     return <Observable<AccountTwoFactorSettingsDto>><any>_observableThrow(e);
//                 }
//             } else
//                 return <Observable<AccountTwoFactorSettingsDto>><any>_observableThrow(response_);
//         }));
//     }
//
//     protected processTwoFactorGet(response: HttpResponseBase): Observable<AccountTwoFactorSettingsDto> {
//         const status = response.status;
//         const responseBlob =
//             response instanceof HttpResponse ? response.body :
//             (<any>response).error instanceof Blob ? (<any>response).error : undefined;
//
//         let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
//         if (status === 200) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result200: any = null;
//             let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result200 = AccountTwoFactorSettingsDto.fromJS(resultData200);
//             return _observableOf(result200);
//             }));
//         } else if (status === 403) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result403: any = null;
//             let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result403 = RemoteServiceErrorResponse.fromJS(resultData403);
//             return throwException("Forbidden", status, _responseText, _headers, result403);
//             }));
//         } else if (status === 401) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result401: any = null;
//             let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result401 = RemoteServiceErrorResponse.fromJS(resultData401);
//             return throwException("Unauthorized", status, _responseText, _headers, result401);
//             }));
//         } else if (status === 400) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result400: any = null;
//             let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result400 = RemoteServiceErrorResponse.fromJS(resultData400);
//             return throwException("Bad Request", status, _responseText, _headers, result400);
//             }));
//         } else if (status === 404) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result404: any = null;
//             let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result404 = RemoteServiceErrorResponse.fromJS(resultData404);
//             return throwException("Not Found", status, _responseText, _headers, result404);
//             }));
//         } else if (status === 501) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result501: any = null;
//             let resultData501 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result501 = RemoteServiceErrorResponse.fromJS(resultData501);
//             return throwException("Server Error", status, _responseText, _headers, result501);
//             }));
//         } else if (status === 500) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result500: any = null;
//             let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result500 = RemoteServiceErrorResponse.fromJS(resultData500);
//             return throwException("Server Error", status, _responseText, _headers, result500);
//             }));
//         } else if (status !== 200 && status !== 204) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             return throwException("An unexpected server error occurred.", status, _responseText, _headers);
//             }));
//         }
//         return _observableOf<AccountTwoFactorSettingsDto>(<any>null);
//     }
//
//     /**
//      * @param body (optional)
//      * @return Success
//      */
//     twoFactorPut(body: AccountTwoFactorSettingsDto | undefined): Observable<void> {
//         let url_ = this.baseUrl + "/api/account-admin/settings/two-factor";
//         url_ = url_.replace(/[?&]$/, "");
//
//         const content_ = JSON.stringify(body);
//
//         let options_ : any = {
//             body: content_,
//             observe: "response",
//             responseType: "blob",
//             headers: new HttpHeaders({
//                 "Content-Type": "application/json",
//             })
//         };
//
//         return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
//             return this.processTwoFactorPut(response_);
//         })).pipe(_observableCatch((response_: any) => {
//             if (response_ instanceof HttpResponseBase) {
//                 try {
//                     return this.processTwoFactorPut(<any>response_);
//                 } catch (e) {
//                     return <Observable<void>><any>_observableThrow(e);
//                 }
//             } else
//                 return <Observable<void>><any>_observableThrow(response_);
//         }));
//     }
//
//     protected processTwoFactorPut(response: HttpResponseBase): Observable<void> {
//         const status = response.status;
//         const responseBlob =
//             response instanceof HttpResponse ? response.body :
//             (<any>response).error instanceof Blob ? (<any>response).error : undefined;
//
//         let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
//         if (status === 200) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             return _observableOf<void>(<any>null);
//             }));
//         } else if (status === 403) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result403: any = null;
//             let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result403 = RemoteServiceErrorResponse.fromJS(resultData403);
//             return throwException("Forbidden", status, _responseText, _headers, result403);
//             }));
//         } else if (status === 401) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result401: any = null;
//             let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result401 = RemoteServiceErrorResponse.fromJS(resultData401);
//             return throwException("Unauthorized", status, _responseText, _headers, result401);
//             }));
//         } else if (status === 400) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result400: any = null;
//             let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result400 = RemoteServiceErrorResponse.fromJS(resultData400);
//             return throwException("Bad Request", status, _responseText, _headers, result400);
//             }));
//         } else if (status === 404) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result404: any = null;
//             let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result404 = RemoteServiceErrorResponse.fromJS(resultData404);
//             return throwException("Not Found", status, _responseText, _headers, result404);
//             }));
//         } else if (status === 501) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result501: any = null;
//             let resultData501 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result501 = RemoteServiceErrorResponse.fromJS(resultData501);
//             return throwException("Server Error", status, _responseText, _headers, result501);
//             }));
//         } else if (status === 500) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result500: any = null;
//             let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result500 = RemoteServiceErrorResponse.fromJS(resultData500);
//             return throwException("Server Error", status, _responseText, _headers, result500);
//             }));
//         } else if (status !== 200 && status !== 204) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             return throwException("An unexpected server error occurred.", status, _responseText, _headers);
//             }));
//         }
//         return _observableOf<void>(<any>null);
//     }
//
//     /**
//      * @return Success
//      */
//     recaptchaGet(): Observable<AccountRecaptchaSettingsDto> {
//         let url_ = this.baseUrl + "/api/account-admin/settings/recaptcha";
//         url_ = url_.replace(/[?&]$/, "");
//
//         let options_ : any = {
//             observe: "response",
//             responseType: "blob",
//             headers: new HttpHeaders({
//                 "Accept": "text/plain"
//             })
//         };
//
//         return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
//             return this.processRecaptchaGet(response_);
//         })).pipe(_observableCatch((response_: any) => {
//             if (response_ instanceof HttpResponseBase) {
//                 try {
//                     return this.processRecaptchaGet(<any>response_);
//                 } catch (e) {
//                     return <Observable<AccountRecaptchaSettingsDto>><any>_observableThrow(e);
//                 }
//             } else
//                 return <Observable<AccountRecaptchaSettingsDto>><any>_observableThrow(response_);
//         }));
//     }
//
//     protected processRecaptchaGet(response: HttpResponseBase): Observable<AccountRecaptchaSettingsDto> {
//         const status = response.status;
//         const responseBlob =
//             response instanceof HttpResponse ? response.body :
//             (<any>response).error instanceof Blob ? (<any>response).error : undefined;
//
//         let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
//         if (status === 200) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result200: any = null;
//             let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result200 = AccountRecaptchaSettingsDto.fromJS(resultData200);
//             return _observableOf(result200);
//             }));
//         } else if (status === 403) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result403: any = null;
//             let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result403 = RemoteServiceErrorResponse.fromJS(resultData403);
//             return throwException("Forbidden", status, _responseText, _headers, result403);
//             }));
//         } else if (status === 401) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result401: any = null;
//             let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result401 = RemoteServiceErrorResponse.fromJS(resultData401);
//             return throwException("Unauthorized", status, _responseText, _headers, result401);
//             }));
//         } else if (status === 400) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result400: any = null;
//             let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result400 = RemoteServiceErrorResponse.fromJS(resultData400);
//             return throwException("Bad Request", status, _responseText, _headers, result400);
//             }));
//         } else if (status === 404) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result404: any = null;
//             let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result404 = RemoteServiceErrorResponse.fromJS(resultData404);
//             return throwException("Not Found", status, _responseText, _headers, result404);
//             }));
//         } else if (status === 501) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result501: any = null;
//             let resultData501 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result501 = RemoteServiceErrorResponse.fromJS(resultData501);
//             return throwException("Server Error", status, _responseText, _headers, result501);
//             }));
//         } else if (status === 500) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result500: any = null;
//             let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result500 = RemoteServiceErrorResponse.fromJS(resultData500);
//             return throwException("Server Error", status, _responseText, _headers, result500);
//             }));
//         } else if (status !== 200 && status !== 204) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             return throwException("An unexpected server error occurred.", status, _responseText, _headers);
//             }));
//         }
//         return _observableOf<AccountRecaptchaSettingsDto>(<any>null);
//     }
//
//     /**
//      * @param body (optional)
//      * @return Success
//      */
//     recaptchaPut(body: AccountRecaptchaSettingsDto | undefined): Observable<void> {
//         let url_ = this.baseUrl + "/api/account-admin/settings/recaptcha";
//         url_ = url_.replace(/[?&]$/, "");
//
//         const content_ = JSON.stringify(body);
//
//         let options_ : any = {
//             body: content_,
//             observe: "response",
//             responseType: "blob",
//             headers: new HttpHeaders({
//                 "Content-Type": "application/json",
//             })
//         };
//
//         return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
//             return this.processRecaptchaPut(response_);
//         })).pipe(_observableCatch((response_: any) => {
//             if (response_ instanceof HttpResponseBase) {
//                 try {
//                     return this.processRecaptchaPut(<any>response_);
//                 } catch (e) {
//                     return <Observable<void>><any>_observableThrow(e);
//                 }
//             } else
//                 return <Observable<void>><any>_observableThrow(response_);
//         }));
//     }
//
//     protected processRecaptchaPut(response: HttpResponseBase): Observable<void> {
//         const status = response.status;
//         const responseBlob =
//             response instanceof HttpResponse ? response.body :
//             (<any>response).error instanceof Blob ? (<any>response).error : undefined;
//
//         let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
//         if (status === 200) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             return _observableOf<void>(<any>null);
//             }));
//         } else if (status === 403) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result403: any = null;
//             let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result403 = RemoteServiceErrorResponse.fromJS(resultData403);
//             return throwException("Forbidden", status, _responseText, _headers, result403);
//             }));
//         } else if (status === 401) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result401: any = null;
//             let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result401 = RemoteServiceErrorResponse.fromJS(resultData401);
//             return throwException("Unauthorized", status, _responseText, _headers, result401);
//             }));
//         } else if (status === 400) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result400: any = null;
//             let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result400 = RemoteServiceErrorResponse.fromJS(resultData400);
//             return throwException("Bad Request", status, _responseText, _headers, result400);
//             }));
//         } else if (status === 404) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result404: any = null;
//             let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result404 = RemoteServiceErrorResponse.fromJS(resultData404);
//             return throwException("Not Found", status, _responseText, _headers, result404);
//             }));
//         } else if (status === 501) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result501: any = null;
//             let resultData501 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result501 = RemoteServiceErrorResponse.fromJS(resultData501);
//             return throwException("Server Error", status, _responseText, _headers, result501);
//             }));
//         } else if (status === 500) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result500: any = null;
//             let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result500 = RemoteServiceErrorResponse.fromJS(resultData500);
//             return throwException("Server Error", status, _responseText, _headers, result500);
//             }));
//         } else if (status !== 200 && status !== 204) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             return throwException("An unexpected server error occurred.", status, _responseText, _headers);
//             }));
//         }
//         return _observableOf<void>(<any>null);
//     }
//
//     /**
//      * @return Success
//      */
//     externalProviderGet(): Observable<AccountExternalProviderSettingsDto> {
//         let url_ = this.baseUrl + "/api/account-admin/settings/external-provider";
//         url_ = url_.replace(/[?&]$/, "");
//
//         let options_ : any = {
//             observe: "response",
//             responseType: "blob",
//             headers: new HttpHeaders({
//                 "Accept": "text/plain"
//             })
//         };
//
//         return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
//             return this.processExternalProviderGet(response_);
//         })).pipe(_observableCatch((response_: any) => {
//             if (response_ instanceof HttpResponseBase) {
//                 try {
//                     return this.processExternalProviderGet(<any>response_);
//                 } catch (e) {
//                     return <Observable<AccountExternalProviderSettingsDto>><any>_observableThrow(e);
//                 }
//             } else
//                 return <Observable<AccountExternalProviderSettingsDto>><any>_observableThrow(response_);
//         }));
//     }
//
//     protected processExternalProviderGet(response: HttpResponseBase): Observable<AccountExternalProviderSettingsDto> {
//         const status = response.status;
//         const responseBlob =
//             response instanceof HttpResponse ? response.body :
//             (<any>response).error instanceof Blob ? (<any>response).error : undefined;
//
//         let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
//         if (status === 200) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result200: any = null;
//             let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result200 = AccountExternalProviderSettingsDto.fromJS(resultData200);
//             return _observableOf(result200);
//             }));
//         } else if (status === 403) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result403: any = null;
//             let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result403 = RemoteServiceErrorResponse.fromJS(resultData403);
//             return throwException("Forbidden", status, _responseText, _headers, result403);
//             }));
//         } else if (status === 401) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result401: any = null;
//             let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result401 = RemoteServiceErrorResponse.fromJS(resultData401);
//             return throwException("Unauthorized", status, _responseText, _headers, result401);
//             }));
//         } else if (status === 400) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result400: any = null;
//             let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result400 = RemoteServiceErrorResponse.fromJS(resultData400);
//             return throwException("Bad Request", status, _responseText, _headers, result400);
//             }));
//         } else if (status === 404) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result404: any = null;
//             let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result404 = RemoteServiceErrorResponse.fromJS(resultData404);
//             return throwException("Not Found", status, _responseText, _headers, result404);
//             }));
//         } else if (status === 501) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result501: any = null;
//             let resultData501 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result501 = RemoteServiceErrorResponse.fromJS(resultData501);
//             return throwException("Server Error", status, _responseText, _headers, result501);
//             }));
//         } else if (status === 500) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result500: any = null;
//             let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result500 = RemoteServiceErrorResponse.fromJS(resultData500);
//             return throwException("Server Error", status, _responseText, _headers, result500);
//             }));
//         } else if (status !== 200 && status !== 204) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             return throwException("An unexpected server error occurred.", status, _responseText, _headers);
//             }));
//         }
//         return _observableOf<AccountExternalProviderSettingsDto>(<any>null);
//     }
//
//     /**
//      * @param body (optional)
//      * @return Success
//      */
//     externalProviderPut(body: UpdateExternalProviderDto[] | undefined): Observable<void> {
//         let url_ = this.baseUrl + "/api/account-admin/settings/external-provider";
//         url_ = url_.replace(/[?&]$/, "");
//
//         const content_ = JSON.stringify(body);
//
//         let options_ : any = {
//             body: content_,
//             observe: "response",
//             responseType: "blob",
//             headers: new HttpHeaders({
//                 "Content-Type": "application/json",
//             })
//         };
//
//         return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
//             return this.processExternalProviderPut(response_);
//         })).pipe(_observableCatch((response_: any) => {
//             if (response_ instanceof HttpResponseBase) {
//                 try {
//                     return this.processExternalProviderPut(<any>response_);
//                 } catch (e) {
//                     return <Observable<void>><any>_observableThrow(e);
//                 }
//             } else
//                 return <Observable<void>><any>_observableThrow(response_);
//         }));
//     }
//
//     protected processExternalProviderPut(response: HttpResponseBase): Observable<void> {
//         const status = response.status;
//         const responseBlob =
//             response instanceof HttpResponse ? response.body :
//             (<any>response).error instanceof Blob ? (<any>response).error : undefined;
//
//         let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
//         if (status === 200) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             return _observableOf<void>(<any>null);
//             }));
//         } else if (status === 403) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result403: any = null;
//             let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result403 = RemoteServiceErrorResponse.fromJS(resultData403);
//             return throwException("Forbidden", status, _responseText, _headers, result403);
//             }));
//         } else if (status === 401) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result401: any = null;
//             let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result401 = RemoteServiceErrorResponse.fromJS(resultData401);
//             return throwException("Unauthorized", status, _responseText, _headers, result401);
//             }));
//         } else if (status === 400) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result400: any = null;
//             let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result400 = RemoteServiceErrorResponse.fromJS(resultData400);
//             return throwException("Bad Request", status, _responseText, _headers, result400);
//             }));
//         } else if (status === 404) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result404: any = null;
//             let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result404 = RemoteServiceErrorResponse.fromJS(resultData404);
//             return throwException("Not Found", status, _responseText, _headers, result404);
//             }));
//         } else if (status === 501) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result501: any = null;
//             let resultData501 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result501 = RemoteServiceErrorResponse.fromJS(resultData501);
//             return throwException("Server Error", status, _responseText, _headers, result501);
//             }));
//         } else if (status === 500) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result500: any = null;
//             let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result500 = RemoteServiceErrorResponse.fromJS(resultData500);
//             return throwException("Server Error", status, _responseText, _headers, result500);
//             }));
//         } else if (status !== 200 && status !== 204) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             return throwException("An unexpected server error occurred.", status, _responseText, _headers);
//             }));
//         }
//         return _observableOf<void>(<any>null);
//     }
// }
//
// @Injectable({providedIn: 'root'})
// export class IdentityServerServiceProxy {
//     private http: HttpClient;
//     private baseUrl: string;
//     protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;
//
//     constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
//         this.http = http;
//         this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
//     }
//
//     /**
//      * @param filter (optional)
//      * @param sorting (optional)
//      * @param skipCount (optional)
//      * @param maxResultCount (optional)
//      * @return Success
//      */
//     apiResourcesGet(filter: string | undefined, sorting: string | undefined, skipCount: number | undefined, maxResultCount: number | undefined): Observable<PagedResultDto_1OfOfApiResourceWithDetailsDtoAndContractsAnd_0AndCulture_neutralAndPublicKeyToken_null> {
//         let url_ = this.baseUrl + "/api/identity-server/api-resources?";
//         if (filter === null)
//             throw new Error("The parameter 'filter' cannot be null.");
//         else if (filter !== undefined)
//             url_ += "Filter=" + encodeURIComponent("" + filter) + "&";
//         if (sorting === null)
//             throw new Error("The parameter 'sorting' cannot be null.");
//         else if (sorting !== undefined)
//             url_ += "Sorting=" + encodeURIComponent("" + sorting) + "&";
//         if (skipCount === null)
//             throw new Error("The parameter 'skipCount' cannot be null.");
//         else if (skipCount !== undefined)
//             url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&";
//         if (maxResultCount === null)
//             throw new Error("The parameter 'maxResultCount' cannot be null.");
//         else if (maxResultCount !== undefined)
//             url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&";
//         url_ = url_.replace(/[?&]$/, "");
//
//         let options_ : any = {
//             observe: "response",
//             responseType: "blob",
//             headers: new HttpHeaders({
//                 "Accept": "text/plain"
//             })
//         };
//
//         return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
//             return this.processApiResourcesGet(response_);
//         })).pipe(_observableCatch((response_: any) => {
//             if (response_ instanceof HttpResponseBase) {
//                 try {
//                     return this.processApiResourcesGet(<any>response_);
//                 } catch (e) {
//                     return <Observable<PagedResultDto_1OfOfApiResourceWithDetailsDtoAndContractsAnd_0AndCulture_neutralAndPublicKeyToken_null>><any>_observableThrow(e);
//                 }
//             } else
//                 return <Observable<PagedResultDto_1OfOfApiResourceWithDetailsDtoAndContractsAnd_0AndCulture_neutralAndPublicKeyToken_null>><any>_observableThrow(response_);
//         }));
//     }
//
//     protected processApiResourcesGet(response: HttpResponseBase): Observable<PagedResultDto_1OfOfApiResourceWithDetailsDtoAndContractsAnd_0AndCulture_neutralAndPublicKeyToken_null> {
//         const status = response.status;
//         const responseBlob =
//             response instanceof HttpResponse ? response.body :
//             (<any>response).error instanceof Blob ? (<any>response).error : undefined;
//
//         let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
//         if (status === 200) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result200: any = null;
//             let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result200 = PagedResultDto_1OfOfApiResourceWithDetailsDtoAndContractsAnd_0AndCulture_neutralAndPublicKeyToken_null.fromJS(resultData200);
//             return _observableOf(result200);
//             }));
//         } else if (status === 403) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result403: any = null;
//             let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result403 = RemoteServiceErrorResponse.fromJS(resultData403);
//             return throwException("Forbidden", status, _responseText, _headers, result403);
//             }));
//         } else if (status === 401) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result401: any = null;
//             let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result401 = RemoteServiceErrorResponse.fromJS(resultData401);
//             return throwException("Unauthorized", status, _responseText, _headers, result401);
//             }));
//         } else if (status === 400) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result400: any = null;
//             let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result400 = RemoteServiceErrorResponse.fromJS(resultData400);
//             return throwException("Bad Request", status, _responseText, _headers, result400);
//             }));
//         } else if (status === 404) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result404: any = null;
//             let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result404 = RemoteServiceErrorResponse.fromJS(resultData404);
//             return throwException("Not Found", status, _responseText, _headers, result404);
//             }));
//         } else if (status === 501) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result501: any = null;
//             let resultData501 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result501 = RemoteServiceErrorResponse.fromJS(resultData501);
//             return throwException("Server Error", status, _responseText, _headers, result501);
//             }));
//         } else if (status === 500) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result500: any = null;
//             let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result500 = RemoteServiceErrorResponse.fromJS(resultData500);
//             return throwException("Server Error", status, _responseText, _headers, result500);
//             }));
//         } else if (status !== 200 && status !== 204) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             return throwException("An unexpected server error occurred.", status, _responseText, _headers);
//             }));
//         }
//         return _observableOf<PagedResultDto_1OfOfApiResourceWithDetailsDtoAndContractsAnd_0AndCulture_neutralAndPublicKeyToken_null>(<any>null);
//     }
//
//     /**
//      * @param body (optional)
//      * @return Success
//      */
//     apiResourcesPost(body: CreateApiResourceDto | undefined): Observable<ApiResourceWithDetailsDto> {
//         let url_ = this.baseUrl + "/api/identity-server/api-resources";
//         url_ = url_.replace(/[?&]$/, "");
//
//         const content_ = JSON.stringify(body);
//
//         let options_ : any = {
//             body: content_,
//             observe: "response",
//             responseType: "blob",
//             headers: new HttpHeaders({
//                 "Content-Type": "application/json",
//                 "Accept": "text/plain"
//             })
//         };
//
//         return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
//             return this.processApiResourcesPost(response_);
//         })).pipe(_observableCatch((response_: any) => {
//             if (response_ instanceof HttpResponseBase) {
//                 try {
//                     return this.processApiResourcesPost(<any>response_);
//                 } catch (e) {
//                     return <Observable<ApiResourceWithDetailsDto>><any>_observableThrow(e);
//                 }
//             } else
//                 return <Observable<ApiResourceWithDetailsDto>><any>_observableThrow(response_);
//         }));
//     }
//
//     protected processApiResourcesPost(response: HttpResponseBase): Observable<ApiResourceWithDetailsDto> {
//         const status = response.status;
//         const responseBlob =
//             response instanceof HttpResponse ? response.body :
//             (<any>response).error instanceof Blob ? (<any>response).error : undefined;
//
//         let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
//         if (status === 200) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result200: any = null;
//             let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result200 = ApiResourceWithDetailsDto.fromJS(resultData200);
//             return _observableOf(result200);
//             }));
//         } else if (status === 403) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result403: any = null;
//             let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result403 = RemoteServiceErrorResponse.fromJS(resultData403);
//             return throwException("Forbidden", status, _responseText, _headers, result403);
//             }));
//         } else if (status === 401) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result401: any = null;
//             let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result401 = RemoteServiceErrorResponse.fromJS(resultData401);
//             return throwException("Unauthorized", status, _responseText, _headers, result401);
//             }));
//         } else if (status === 400) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result400: any = null;
//             let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result400 = RemoteServiceErrorResponse.fromJS(resultData400);
//             return throwException("Bad Request", status, _responseText, _headers, result400);
//             }));
//         } else if (status === 404) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result404: any = null;
//             let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result404 = RemoteServiceErrorResponse.fromJS(resultData404);
//             return throwException("Not Found", status, _responseText, _headers, result404);
//             }));
//         } else if (status === 501) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result501: any = null;
//             let resultData501 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result501 = RemoteServiceErrorResponse.fromJS(resultData501);
//             return throwException("Server Error", status, _responseText, _headers, result501);
//             }));
//         } else if (status === 500) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result500: any = null;
//             let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result500 = RemoteServiceErrorResponse.fromJS(resultData500);
//             return throwException("Server Error", status, _responseText, _headers, result500);
//             }));
//         } else if (status !== 200 && status !== 204) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             return throwException("An unexpected server error occurred.", status, _responseText, _headers);
//             }));
//         }
//         return _observableOf<ApiResourceWithDetailsDto>(<any>null);
//     }
//
//     /**
//      * @param id (optional)
//      * @return Success
//      */
//     apiResourcesDelete(id: string | undefined): Observable<void> {
//         let url_ = this.baseUrl + "/api/identity-server/api-resources?";
//         if (id === null)
//             throw new Error("The parameter 'id' cannot be null.");
//         else if (id !== undefined)
//             url_ += "id=" + encodeURIComponent("" + id) + "&";
//         url_ = url_.replace(/[?&]$/, "");
//
//         let options_ : any = {
//             observe: "response",
//             responseType: "blob",
//             headers: new HttpHeaders({
//             })
//         };
//
//         return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
//             return this.processApiResourcesDelete(response_);
//         })).pipe(_observableCatch((response_: any) => {
//             if (response_ instanceof HttpResponseBase) {
//                 try {
//                     return this.processApiResourcesDelete(<any>response_);
//                 } catch (e) {
//                     return <Observable<void>><any>_observableThrow(e);
//                 }
//             } else
//                 return <Observable<void>><any>_observableThrow(response_);
//         }));
//     }
//
//     protected processApiResourcesDelete(response: HttpResponseBase): Observable<void> {
//         const status = response.status;
//         const responseBlob =
//             response instanceof HttpResponse ? response.body :
//             (<any>response).error instanceof Blob ? (<any>response).error : undefined;
//
//         let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
//         if (status === 200) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             return _observableOf<void>(<any>null);
//             }));
//         } else if (status === 403) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result403: any = null;
//             let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result403 = RemoteServiceErrorResponse.fromJS(resultData403);
//             return throwException("Forbidden", status, _responseText, _headers, result403);
//             }));
//         } else if (status === 401) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result401: any = null;
//             let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result401 = RemoteServiceErrorResponse.fromJS(resultData401);
//             return throwException("Unauthorized", status, _responseText, _headers, result401);
//             }));
//         } else if (status === 400) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result400: any = null;
//             let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result400 = RemoteServiceErrorResponse.fromJS(resultData400);
//             return throwException("Bad Request", status, _responseText, _headers, result400);
//             }));
//         } else if (status === 404) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result404: any = null;
//             let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result404 = RemoteServiceErrorResponse.fromJS(resultData404);
//             return throwException("Not Found", status, _responseText, _headers, result404);
//             }));
//         } else if (status === 501) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result501: any = null;
//             let resultData501 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result501 = RemoteServiceErrorResponse.fromJS(resultData501);
//             return throwException("Server Error", status, _responseText, _headers, result501);
//             }));
//         } else if (status === 500) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result500: any = null;
//             let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result500 = RemoteServiceErrorResponse.fromJS(resultData500);
//             return throwException("Server Error", status, _responseText, _headers, result500);
//             }));
//         } else if (status !== 200 && status !== 204) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             return throwException("An unexpected server error occurred.", status, _responseText, _headers);
//             }));
//         }
//         return _observableOf<void>(<any>null);
//     }
//
//     /**
//      * @return Success
//      */
//     apiResourcesGet(id: string): Observable<ApiResourceWithDetailsDto> {
//         let url_ = this.baseUrl + "/api/identity-server/api-resources/{id}";
//         if (id === undefined || id === null)
//             throw new Error("The parameter 'id' must be defined.");
//         url_ = url_.replace("{id}", encodeURIComponent("" + id));
//         url_ = url_.replace(/[?&]$/, "");
//
//         let options_ : any = {
//             observe: "response",
//             responseType: "blob",
//             headers: new HttpHeaders({
//                 "Accept": "text/plain"
//             })
//         };
//
//         return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
//             return this.processApiResourcesGet(response_);
//         })).pipe(_observableCatch((response_: any) => {
//             if (response_ instanceof HttpResponseBase) {
//                 try {
//                     return this.processApiResourcesGet(<any>response_);
//                 } catch (e) {
//                     return <Observable<ApiResourceWithDetailsDto>><any>_observableThrow(e);
//                 }
//             } else
//                 return <Observable<ApiResourceWithDetailsDto>><any>_observableThrow(response_);
//         }));
//     }
//
//     protected processApiResourcesGet(response: HttpResponseBase): Observable<ApiResourceWithDetailsDto> {
//         const status = response.status;
//         const responseBlob =
//             response instanceof HttpResponse ? response.body :
//             (<any>response).error instanceof Blob ? (<any>response).error : undefined;
//
//         let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
//         if (status === 200) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result200: any = null;
//             let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result200 = ApiResourceWithDetailsDto.fromJS(resultData200);
//             return _observableOf(result200);
//             }));
//         } else if (status === 403) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result403: any = null;
//             let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result403 = RemoteServiceErrorResponse.fromJS(resultData403);
//             return throwException("Forbidden", status, _responseText, _headers, result403);
//             }));
//         } else if (status === 401) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result401: any = null;
//             let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result401 = RemoteServiceErrorResponse.fromJS(resultData401);
//             return throwException("Unauthorized", status, _responseText, _headers, result401);
//             }));
//         } else if (status === 400) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result400: any = null;
//             let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result400 = RemoteServiceErrorResponse.fromJS(resultData400);
//             return throwException("Bad Request", status, _responseText, _headers, result400);
//             }));
//         } else if (status === 404) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result404: any = null;
//             let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result404 = RemoteServiceErrorResponse.fromJS(resultData404);
//             return throwException("Not Found", status, _responseText, _headers, result404);
//             }));
//         } else if (status === 501) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result501: any = null;
//             let resultData501 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result501 = RemoteServiceErrorResponse.fromJS(resultData501);
//             return throwException("Server Error", status, _responseText, _headers, result501);
//             }));
//         } else if (status === 500) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result500: any = null;
//             let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result500 = RemoteServiceErrorResponse.fromJS(resultData500);
//             return throwException("Server Error", status, _responseText, _headers, result500);
//             }));
//         } else if (status !== 200 && status !== 204) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             return throwException("An unexpected server error occurred.", status, _responseText, _headers);
//             }));
//         }
//         return _observableOf<ApiResourceWithDetailsDto>(<any>null);
//     }
//
//     /**
//      * @param body (optional)
//      * @return Success
//      */
//     apiResourcesPut(id: string, body: UpdateApiResourceDto | undefined): Observable<ApiResourceWithDetailsDto> {
//         let url_ = this.baseUrl + "/api/identity-server/api-resources/{id}";
//         if (id === undefined || id === null)
//             throw new Error("The parameter 'id' must be defined.");
//         url_ = url_.replace("{id}", encodeURIComponent("" + id));
//         url_ = url_.replace(/[?&]$/, "");
//
//         const content_ = JSON.stringify(body);
//
//         let options_ : any = {
//             body: content_,
//             observe: "response",
//             responseType: "blob",
//             headers: new HttpHeaders({
//                 "Content-Type": "application/json",
//                 "Accept": "text/plain"
//             })
//         };
//
//         return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
//             return this.processApiResourcesPut(response_);
//         })).pipe(_observableCatch((response_: any) => {
//             if (response_ instanceof HttpResponseBase) {
//                 try {
//                     return this.processApiResourcesPut(<any>response_);
//                 } catch (e) {
//                     return <Observable<ApiResourceWithDetailsDto>><any>_observableThrow(e);
//                 }
//             } else
//                 return <Observable<ApiResourceWithDetailsDto>><any>_observableThrow(response_);
//         }));
//     }
//
//     protected processApiResourcesPut(response: HttpResponseBase): Observable<ApiResourceWithDetailsDto> {
//         const status = response.status;
//         const responseBlob =
//             response instanceof HttpResponse ? response.body :
//             (<any>response).error instanceof Blob ? (<any>response).error : undefined;
//
//         let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
//         if (status === 200) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result200: any = null;
//             let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result200 = ApiResourceWithDetailsDto.fromJS(resultData200);
//             return _observableOf(result200);
//             }));
//         } else if (status === 403) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result403: any = null;
//             let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result403 = RemoteServiceErrorResponse.fromJS(resultData403);
//             return throwException("Forbidden", status, _responseText, _headers, result403);
//             }));
//         } else if (status === 401) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result401: any = null;
//             let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result401 = RemoteServiceErrorResponse.fromJS(resultData401);
//             return throwException("Unauthorized", status, _responseText, _headers, result401);
//             }));
//         } else if (status === 400) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result400: any = null;
//             let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result400 = RemoteServiceErrorResponse.fromJS(resultData400);
//             return throwException("Bad Request", status, _responseText, _headers, result400);
//             }));
//         } else if (status === 404) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result404: any = null;
//             let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result404 = RemoteServiceErrorResponse.fromJS(resultData404);
//             return throwException("Not Found", status, _responseText, _headers, result404);
//             }));
//         } else if (status === 501) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result501: any = null;
//             let resultData501 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result501 = RemoteServiceErrorResponse.fromJS(resultData501);
//             return throwException("Server Error", status, _responseText, _headers, result501);
//             }));
//         } else if (status === 500) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result500: any = null;
//             let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result500 = RemoteServiceErrorResponse.fromJS(resultData500);
//             return throwException("Server Error", status, _responseText, _headers, result500);
//             }));
//         } else if (status !== 200 && status !== 204) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             return throwException("An unexpected server error occurred.", status, _responseText, _headers);
//             }));
//         }
//         return _observableOf<ApiResourceWithDetailsDto>(<any>null);
//     }
//
//     /**
//      * @param filter (optional)
//      * @param sorting (optional)
//      * @param skipCount (optional)
//      * @param maxResultCount (optional)
//      * @return Success
//      */
//     apiScopesGet(filter: string | undefined, sorting: string | undefined, skipCount: number | undefined, maxResultCount: number | undefined): Observable<PagedResultDto_1OfOfApiScopeWithDetailsDtoAndContractsAnd_0AndCulture_neutralAndPublicKeyToken_null> {
//         let url_ = this.baseUrl + "/api/identity-server/apiScopes?";
//         if (filter === null)
//             throw new Error("The parameter 'filter' cannot be null.");
//         else if (filter !== undefined)
//             url_ += "Filter=" + encodeURIComponent("" + filter) + "&";
//         if (sorting === null)
//             throw new Error("The parameter 'sorting' cannot be null.");
//         else if (sorting !== undefined)
//             url_ += "Sorting=" + encodeURIComponent("" + sorting) + "&";
//         if (skipCount === null)
//             throw new Error("The parameter 'skipCount' cannot be null.");
//         else if (skipCount !== undefined)
//             url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&";
//         if (maxResultCount === null)
//             throw new Error("The parameter 'maxResultCount' cannot be null.");
//         else if (maxResultCount !== undefined)
//             url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&";
//         url_ = url_.replace(/[?&]$/, "");
//
//         let options_ : any = {
//             observe: "response",
//             responseType: "blob",
//             headers: new HttpHeaders({
//                 "Accept": "text/plain"
//             })
//         };
//
//         return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
//             return this.processApiScopesGet(response_);
//         })).pipe(_observableCatch((response_: any) => {
//             if (response_ instanceof HttpResponseBase) {
//                 try {
//                     return this.processApiScopesGet(<any>response_);
//                 } catch (e) {
//                     return <Observable<PagedResultDto_1OfOfApiScopeWithDetailsDtoAndContractsAnd_0AndCulture_neutralAndPublicKeyToken_null>><any>_observableThrow(e);
//                 }
//             } else
//                 return <Observable<PagedResultDto_1OfOfApiScopeWithDetailsDtoAndContractsAnd_0AndCulture_neutralAndPublicKeyToken_null>><any>_observableThrow(response_);
//         }));
//     }
//
//     protected processApiScopesGet(response: HttpResponseBase): Observable<PagedResultDto_1OfOfApiScopeWithDetailsDtoAndContractsAnd_0AndCulture_neutralAndPublicKeyToken_null> {
//         const status = response.status;
//         const responseBlob =
//             response instanceof HttpResponse ? response.body :
//             (<any>response).error instanceof Blob ? (<any>response).error : undefined;
//
//         let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
//         if (status === 200) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result200: any = null;
//             let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result200 = PagedResultDto_1OfOfApiScopeWithDetailsDtoAndContractsAnd_0AndCulture_neutralAndPublicKeyToken_null.fromJS(resultData200);
//             return _observableOf(result200);
//             }));
//         } else if (status === 403) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result403: any = null;
//             let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result403 = RemoteServiceErrorResponse.fromJS(resultData403);
//             return throwException("Forbidden", status, _responseText, _headers, result403);
//             }));
//         } else if (status === 401) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result401: any = null;
//             let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result401 = RemoteServiceErrorResponse.fromJS(resultData401);
//             return throwException("Unauthorized", status, _responseText, _headers, result401);
//             }));
//         } else if (status === 400) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result400: any = null;
//             let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result400 = RemoteServiceErrorResponse.fromJS(resultData400);
//             return throwException("Bad Request", status, _responseText, _headers, result400);
//             }));
//         } else if (status === 404) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result404: any = null;
//             let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result404 = RemoteServiceErrorResponse.fromJS(resultData404);
//             return throwException("Not Found", status, _responseText, _headers, result404);
//             }));
//         } else if (status === 501) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result501: any = null;
//             let resultData501 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result501 = RemoteServiceErrorResponse.fromJS(resultData501);
//             return throwException("Server Error", status, _responseText, _headers, result501);
//             }));
//         } else if (status === 500) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result500: any = null;
//             let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result500 = RemoteServiceErrorResponse.fromJS(resultData500);
//             return throwException("Server Error", status, _responseText, _headers, result500);
//             }));
//         } else if (status !== 200 && status !== 204) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             return throwException("An unexpected server error occurred.", status, _responseText, _headers);
//             }));
//         }
//         return _observableOf<PagedResultDto_1OfOfApiScopeWithDetailsDtoAndContractsAnd_0AndCulture_neutralAndPublicKeyToken_null>(<any>null);
//     }
//
//     /**
//      * @param body (optional)
//      * @return Success
//      */
//     apiScopesPost(body: CreateApiScopeDto | undefined): Observable<ApiScopeWithDetailsDto> {
//         let url_ = this.baseUrl + "/api/identity-server/apiScopes";
//         url_ = url_.replace(/[?&]$/, "");
//
//         const content_ = JSON.stringify(body);
//
//         let options_ : any = {
//             body: content_,
//             observe: "response",
//             responseType: "blob",
//             headers: new HttpHeaders({
//                 "Content-Type": "application/json",
//                 "Accept": "text/plain"
//             })
//         };
//
//         return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
//             return this.processApiScopesPost(response_);
//         })).pipe(_observableCatch((response_: any) => {
//             if (response_ instanceof HttpResponseBase) {
//                 try {
//                     return this.processApiScopesPost(<any>response_);
//                 } catch (e) {
//                     return <Observable<ApiScopeWithDetailsDto>><any>_observableThrow(e);
//                 }
//             } else
//                 return <Observable<ApiScopeWithDetailsDto>><any>_observableThrow(response_);
//         }));
//     }
//
//     protected processApiScopesPost(response: HttpResponseBase): Observable<ApiScopeWithDetailsDto> {
//         const status = response.status;
//         const responseBlob =
//             response instanceof HttpResponse ? response.body :
//             (<any>response).error instanceof Blob ? (<any>response).error : undefined;
//
//         let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
//         if (status === 200) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result200: any = null;
//             let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result200 = ApiScopeWithDetailsDto.fromJS(resultData200);
//             return _observableOf(result200);
//             }));
//         } else if (status === 403) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result403: any = null;
//             let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result403 = RemoteServiceErrorResponse.fromJS(resultData403);
//             return throwException("Forbidden", status, _responseText, _headers, result403);
//             }));
//         } else if (status === 401) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result401: any = null;
//             let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result401 = RemoteServiceErrorResponse.fromJS(resultData401);
//             return throwException("Unauthorized", status, _responseText, _headers, result401);
//             }));
//         } else if (status === 400) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result400: any = null;
//             let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result400 = RemoteServiceErrorResponse.fromJS(resultData400);
//             return throwException("Bad Request", status, _responseText, _headers, result400);
//             }));
//         } else if (status === 404) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result404: any = null;
//             let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result404 = RemoteServiceErrorResponse.fromJS(resultData404);
//             return throwException("Not Found", status, _responseText, _headers, result404);
//             }));
//         } else if (status === 501) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result501: any = null;
//             let resultData501 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result501 = RemoteServiceErrorResponse.fromJS(resultData501);
//             return throwException("Server Error", status, _responseText, _headers, result501);
//             }));
//         } else if (status === 500) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result500: any = null;
//             let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result500 = RemoteServiceErrorResponse.fromJS(resultData500);
//             return throwException("Server Error", status, _responseText, _headers, result500);
//             }));
//         } else if (status !== 200 && status !== 204) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             return throwException("An unexpected server error occurred.", status, _responseText, _headers);
//             }));
//         }
//         return _observableOf<ApiScopeWithDetailsDto>(<any>null);
//     }
//
//     /**
//      * @param id (optional)
//      * @return Success
//      */
//     apiScopesDelete(id: string | undefined): Observable<void> {
//         let url_ = this.baseUrl + "/api/identity-server/apiScopes?";
//         if (id === null)
//             throw new Error("The parameter 'id' cannot be null.");
//         else if (id !== undefined)
//             url_ += "id=" + encodeURIComponent("" + id) + "&";
//         url_ = url_.replace(/[?&]$/, "");
//
//         let options_ : any = {
//             observe: "response",
//             responseType: "blob",
//             headers: new HttpHeaders({
//             })
//         };
//
//         return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
//             return this.processApiScopesDelete(response_);
//         })).pipe(_observableCatch((response_: any) => {
//             if (response_ instanceof HttpResponseBase) {
//                 try {
//                     return this.processApiScopesDelete(<any>response_);
//                 } catch (e) {
//                     return <Observable<void>><any>_observableThrow(e);
//                 }
//             } else
//                 return <Observable<void>><any>_observableThrow(response_);
//         }));
//     }
//
//     protected processApiScopesDelete(response: HttpResponseBase): Observable<void> {
//         const status = response.status;
//         const responseBlob =
//             response instanceof HttpResponse ? response.body :
//             (<any>response).error instanceof Blob ? (<any>response).error : undefined;
//
//         let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
//         if (status === 200) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             return _observableOf<void>(<any>null);
//             }));
//         } else if (status === 403) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result403: any = null;
//             let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result403 = RemoteServiceErrorResponse.fromJS(resultData403);
//             return throwException("Forbidden", status, _responseText, _headers, result403);
//             }));
//         } else if (status === 401) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result401: any = null;
//             let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result401 = RemoteServiceErrorResponse.fromJS(resultData401);
//             return throwException("Unauthorized", status, _responseText, _headers, result401);
//             }));
//         } else if (status === 400) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result400: any = null;
//             let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result400 = RemoteServiceErrorResponse.fromJS(resultData400);
//             return throwException("Bad Request", status, _responseText, _headers, result400);
//             }));
//         } else if (status === 404) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result404: any = null;
//             let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result404 = RemoteServiceErrorResponse.fromJS(resultData404);
//             return throwException("Not Found", status, _responseText, _headers, result404);
//             }));
//         } else if (status === 501) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result501: any = null;
//             let resultData501 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result501 = RemoteServiceErrorResponse.fromJS(resultData501);
//             return throwException("Server Error", status, _responseText, _headers, result501);
//             }));
//         } else if (status === 500) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result500: any = null;
//             let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result500 = RemoteServiceErrorResponse.fromJS(resultData500);
//             return throwException("Server Error", status, _responseText, _headers, result500);
//             }));
//         } else if (status !== 200 && status !== 204) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             return throwException("An unexpected server error occurred.", status, _responseText, _headers);
//             }));
//         }
//         return _observableOf<void>(<any>null);
//     }
//
//     /**
//      * @return Success
//      */
//     apiScopesGet(id: string): Observable<ApiScopeWithDetailsDto> {
//         let url_ = this.baseUrl + "/api/identity-server/apiScopes/{id}";
//         if (id === undefined || id === null)
//             throw new Error("The parameter 'id' must be defined.");
//         url_ = url_.replace("{id}", encodeURIComponent("" + id));
//         url_ = url_.replace(/[?&]$/, "");
//
//         let options_ : any = {
//             observe: "response",
//             responseType: "blob",
//             headers: new HttpHeaders({
//                 "Accept": "text/plain"
//             })
//         };
//
//         return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
//             return this.processApiScopesGet(response_);
//         })).pipe(_observableCatch((response_: any) => {
//             if (response_ instanceof HttpResponseBase) {
//                 try {
//                     return this.processApiScopesGet(<any>response_);
//                 } catch (e) {
//                     return <Observable<ApiScopeWithDetailsDto>><any>_observableThrow(e);
//                 }
//             } else
//                 return <Observable<ApiScopeWithDetailsDto>><any>_observableThrow(response_);
//         }));
//     }
//
//     protected processApiScopesGet(response: HttpResponseBase): Observable<ApiScopeWithDetailsDto> {
//         const status = response.status;
//         const responseBlob =
//             response instanceof HttpResponse ? response.body :
//             (<any>response).error instanceof Blob ? (<any>response).error : undefined;
//
//         let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
//         if (status === 200) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result200: any = null;
//             let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result200 = ApiScopeWithDetailsDto.fromJS(resultData200);
//             return _observableOf(result200);
//             }));
//         } else if (status === 403) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result403: any = null;
//             let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result403 = RemoteServiceErrorResponse.fromJS(resultData403);
//             return throwException("Forbidden", status, _responseText, _headers, result403);
//             }));
//         } else if (status === 401) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result401: any = null;
//             let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result401 = RemoteServiceErrorResponse.fromJS(resultData401);
//             return throwException("Unauthorized", status, _responseText, _headers, result401);
//             }));
//         } else if (status === 400) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result400: any = null;
//             let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result400 = RemoteServiceErrorResponse.fromJS(resultData400);
//             return throwException("Bad Request", status, _responseText, _headers, result400);
//             }));
//         } else if (status === 404) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result404: any = null;
//             let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result404 = RemoteServiceErrorResponse.fromJS(resultData404);
//             return throwException("Not Found", status, _responseText, _headers, result404);
//             }));
//         } else if (status === 501) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result501: any = null;
//             let resultData501 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result501 = RemoteServiceErrorResponse.fromJS(resultData501);
//             return throwException("Server Error", status, _responseText, _headers, result501);
//             }));
//         } else if (status === 500) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result500: any = null;
//             let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result500 = RemoteServiceErrorResponse.fromJS(resultData500);
//             return throwException("Server Error", status, _responseText, _headers, result500);
//             }));
//         } else if (status !== 200 && status !== 204) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             return throwException("An unexpected server error occurred.", status, _responseText, _headers);
//             }));
//         }
//         return _observableOf<ApiScopeWithDetailsDto>(<any>null);
//     }
//
//     /**
//      * @param body (optional)
//      * @return Success
//      */
//     apiScopesPut(id: string, body: UpdateApiScopeDto | undefined): Observable<ApiScopeWithDetailsDto> {
//         let url_ = this.baseUrl + "/api/identity-server/apiScopes/{id}";
//         if (id === undefined || id === null)
//             throw new Error("The parameter 'id' must be defined.");
//         url_ = url_.replace("{id}", encodeURIComponent("" + id));
//         url_ = url_.replace(/[?&]$/, "");
//
//         const content_ = JSON.stringify(body);
//
//         let options_ : any = {
//             body: content_,
//             observe: "response",
//             responseType: "blob",
//             headers: new HttpHeaders({
//                 "Content-Type": "application/json",
//                 "Accept": "text/plain"
//             })
//         };
//
//         return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
//             return this.processApiScopesPut(response_);
//         })).pipe(_observableCatch((response_: any) => {
//             if (response_ instanceof HttpResponseBase) {
//                 try {
//                     return this.processApiScopesPut(<any>response_);
//                 } catch (e) {
//                     return <Observable<ApiScopeWithDetailsDto>><any>_observableThrow(e);
//                 }
//             } else
//                 return <Observable<ApiScopeWithDetailsDto>><any>_observableThrow(response_);
//         }));
//     }
//
//     protected processApiScopesPut(response: HttpResponseBase): Observable<ApiScopeWithDetailsDto> {
//         const status = response.status;
//         const responseBlob =
//             response instanceof HttpResponse ? response.body :
//             (<any>response).error instanceof Blob ? (<any>response).error : undefined;
//
//         let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
//         if (status === 200) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result200: any = null;
//             let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result200 = ApiScopeWithDetailsDto.fromJS(resultData200);
//             return _observableOf(result200);
//             }));
//         } else if (status === 403) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result403: any = null;
//             let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result403 = RemoteServiceErrorResponse.fromJS(resultData403);
//             return throwException("Forbidden", status, _responseText, _headers, result403);
//             }));
//         } else if (status === 401) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result401: any = null;
//             let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result401 = RemoteServiceErrorResponse.fromJS(resultData401);
//             return throwException("Unauthorized", status, _responseText, _headers, result401);
//             }));
//         } else if (status === 400) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result400: any = null;
//             let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result400 = RemoteServiceErrorResponse.fromJS(resultData400);
//             return throwException("Bad Request", status, _responseText, _headers, result400);
//             }));
//         } else if (status === 404) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result404: any = null;
//             let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result404 = RemoteServiceErrorResponse.fromJS(resultData404);
//             return throwException("Not Found", status, _responseText, _headers, result404);
//             }));
//         } else if (status === 501) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result501: any = null;
//             let resultData501 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result501 = RemoteServiceErrorResponse.fromJS(resultData501);
//             return throwException("Server Error", status, _responseText, _headers, result501);
//             }));
//         } else if (status === 500) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result500: any = null;
//             let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result500 = RemoteServiceErrorResponse.fromJS(resultData500);
//             return throwException("Server Error", status, _responseText, _headers, result500);
//             }));
//         } else if (status !== 200 && status !== 204) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             return throwException("An unexpected server error occurred.", status, _responseText, _headers);
//             }));
//         }
//         return _observableOf<ApiScopeWithDetailsDto>(<any>null);
//     }
//
//     /**
//      * @return Success
//      */
//     claimTypes(): Observable<IdentityClaimTypeDto[]> {
//         let url_ = this.baseUrl + "/api/identity-server/claim-types";
//         url_ = url_.replace(/[?&]$/, "");
//
//         let options_ : any = {
//             observe: "response",
//             responseType: "blob",
//             headers: new HttpHeaders({
//                 "Accept": "text/plain"
//             })
//         };
//
//         return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
//             return this.processClaimTypes(response_);
//         })).pipe(_observableCatch((response_: any) => {
//             if (response_ instanceof HttpResponseBase) {
//                 try {
//                     return this.processClaimTypes(<any>response_);
//                 } catch (e) {
//                     return <Observable<IdentityClaimTypeDto[]>><any>_observableThrow(e);
//                 }
//             } else
//                 return <Observable<IdentityClaimTypeDto[]>><any>_observableThrow(response_);
//         }));
//     }
//
//     protected processClaimTypes(response: HttpResponseBase): Observable<IdentityClaimTypeDto[]> {
//         const status = response.status;
//         const responseBlob =
//             response instanceof HttpResponse ? response.body :
//             (<any>response).error instanceof Blob ? (<any>response).error : undefined;
//
//         let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
//         if (status === 200) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result200: any = null;
//             let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             if (Array.isArray(resultData200)) {
//                 result200 = [] as any;
//                 for (let item of resultData200)
//                     result200!.push(IdentityClaimTypeDto.fromJS(item));
//             }
//             else {
//                 result200 = <any>null;
//             }
//             return _observableOf(result200);
//             }));
//         } else if (status === 403) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result403: any = null;
//             let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result403 = RemoteServiceErrorResponse.fromJS(resultData403);
//             return throwException("Forbidden", status, _responseText, _headers, result403);
//             }));
//         } else if (status === 401) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result401: any = null;
//             let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result401 = RemoteServiceErrorResponse.fromJS(resultData401);
//             return throwException("Unauthorized", status, _responseText, _headers, result401);
//             }));
//         } else if (status === 400) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result400: any = null;
//             let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result400 = RemoteServiceErrorResponse.fromJS(resultData400);
//             return throwException("Bad Request", status, _responseText, _headers, result400);
//             }));
//         } else if (status === 404) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result404: any = null;
//             let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result404 = RemoteServiceErrorResponse.fromJS(resultData404);
//             return throwException("Not Found", status, _responseText, _headers, result404);
//             }));
//         } else if (status === 501) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result501: any = null;
//             let resultData501 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result501 = RemoteServiceErrorResponse.fromJS(resultData501);
//             return throwException("Server Error", status, _responseText, _headers, result501);
//             }));
//         } else if (status === 500) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result500: any = null;
//             let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result500 = RemoteServiceErrorResponse.fromJS(resultData500);
//             return throwException("Server Error", status, _responseText, _headers, result500);
//             }));
//         } else if (status !== 200 && status !== 204) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             return throwException("An unexpected server error occurred.", status, _responseText, _headers);
//             }));
//         }
//         return _observableOf<IdentityClaimTypeDto[]>(<any>null);
//     }
//
//     /**
//      * @param filter (optional)
//      * @param sorting (optional)
//      * @param skipCount (optional)
//      * @param maxResultCount (optional)
//      * @return Success
//      */
//     clientsGet(filter: string | undefined, sorting: string | undefined, skipCount: number | undefined, maxResultCount: number | undefined): Observable<PagedResultDto_1OfOfClientWithDetailsDtoAndContractsAnd_0AndCulture_neutralAndPublicKeyToken_null> {
//         let url_ = this.baseUrl + "/api/identity-server/clients?";
//         if (filter === null)
//             throw new Error("The parameter 'filter' cannot be null.");
//         else if (filter !== undefined)
//             url_ += "Filter=" + encodeURIComponent("" + filter) + "&";
//         if (sorting === null)
//             throw new Error("The parameter 'sorting' cannot be null.");
//         else if (sorting !== undefined)
//             url_ += "Sorting=" + encodeURIComponent("" + sorting) + "&";
//         if (skipCount === null)
//             throw new Error("The parameter 'skipCount' cannot be null.");
//         else if (skipCount !== undefined)
//             url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&";
//         if (maxResultCount === null)
//             throw new Error("The parameter 'maxResultCount' cannot be null.");
//         else if (maxResultCount !== undefined)
//             url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&";
//         url_ = url_.replace(/[?&]$/, "");
//
//         let options_ : any = {
//             observe: "response",
//             responseType: "blob",
//             headers: new HttpHeaders({
//                 "Accept": "text/plain"
//             })
//         };
//
//         return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
//             return this.processClientsGet(response_);
//         })).pipe(_observableCatch((response_: any) => {
//             if (response_ instanceof HttpResponseBase) {
//                 try {
//                     return this.processClientsGet(<any>response_);
//                 } catch (e) {
//                     return <Observable<PagedResultDto_1OfOfClientWithDetailsDtoAndContractsAnd_0AndCulture_neutralAndPublicKeyToken_null>><any>_observableThrow(e);
//                 }
//             } else
//                 return <Observable<PagedResultDto_1OfOfClientWithDetailsDtoAndContractsAnd_0AndCulture_neutralAndPublicKeyToken_null>><any>_observableThrow(response_);
//         }));
//     }
//
//     protected processClientsGet(response: HttpResponseBase): Observable<PagedResultDto_1OfOfClientWithDetailsDtoAndContractsAnd_0AndCulture_neutralAndPublicKeyToken_null> {
//         const status = response.status;
//         const responseBlob =
//             response instanceof HttpResponse ? response.body :
//             (<any>response).error instanceof Blob ? (<any>response).error : undefined;
//
//         let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
//         if (status === 200) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result200: any = null;
//             let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result200 = PagedResultDto_1OfOfClientWithDetailsDtoAndContractsAnd_0AndCulture_neutralAndPublicKeyToken_null.fromJS(resultData200);
//             return _observableOf(result200);
//             }));
//         } else if (status === 403) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result403: any = null;
//             let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result403 = RemoteServiceErrorResponse.fromJS(resultData403);
//             return throwException("Forbidden", status, _responseText, _headers, result403);
//             }));
//         } else if (status === 401) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result401: any = null;
//             let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result401 = RemoteServiceErrorResponse.fromJS(resultData401);
//             return throwException("Unauthorized", status, _responseText, _headers, result401);
//             }));
//         } else if (status === 400) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result400: any = null;
//             let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result400 = RemoteServiceErrorResponse.fromJS(resultData400);
//             return throwException("Bad Request", status, _responseText, _headers, result400);
//             }));
//         } else if (status === 404) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result404: any = null;
//             let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result404 = RemoteServiceErrorResponse.fromJS(resultData404);
//             return throwException("Not Found", status, _responseText, _headers, result404);
//             }));
//         } else if (status === 501) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result501: any = null;
//             let resultData501 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result501 = RemoteServiceErrorResponse.fromJS(resultData501);
//             return throwException("Server Error", status, _responseText, _headers, result501);
//             }));
//         } else if (status === 500) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result500: any = null;
//             let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result500 = RemoteServiceErrorResponse.fromJS(resultData500);
//             return throwException("Server Error", status, _responseText, _headers, result500);
//             }));
//         } else if (status !== 200 && status !== 204) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             return throwException("An unexpected server error occurred.", status, _responseText, _headers);
//             }));
//         }
//         return _observableOf<PagedResultDto_1OfOfClientWithDetailsDtoAndContractsAnd_0AndCulture_neutralAndPublicKeyToken_null>(<any>null);
//     }
//
//     /**
//      * @param body (optional)
//      * @return Success
//      */
//     clientsPost(body: CreateClientDto | undefined): Observable<ClientWithDetailsDto> {
//         let url_ = this.baseUrl + "/api/identity-server/clients";
//         url_ = url_.replace(/[?&]$/, "");
//
//         const content_ = JSON.stringify(body);
//
//         let options_ : any = {
//             body: content_,
//             observe: "response",
//             responseType: "blob",
//             headers: new HttpHeaders({
//                 "Content-Type": "application/json",
//                 "Accept": "text/plain"
//             })
//         };
//
//         return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
//             return this.processClientsPost(response_);
//         })).pipe(_observableCatch((response_: any) => {
//             if (response_ instanceof HttpResponseBase) {
//                 try {
//                     return this.processClientsPost(<any>response_);
//                 } catch (e) {
//                     return <Observable<ClientWithDetailsDto>><any>_observableThrow(e);
//                 }
//             } else
//                 return <Observable<ClientWithDetailsDto>><any>_observableThrow(response_);
//         }));
//     }
//
//     protected processClientsPost(response: HttpResponseBase): Observable<ClientWithDetailsDto> {
//         const status = response.status;
//         const responseBlob =
//             response instanceof HttpResponse ? response.body :
//             (<any>response).error instanceof Blob ? (<any>response).error : undefined;
//
//         let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
//         if (status === 200) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result200: any = null;
//             let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result200 = ClientWithDetailsDto.fromJS(resultData200);
//             return _observableOf(result200);
//             }));
//         } else if (status === 403) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result403: any = null;
//             let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result403 = RemoteServiceErrorResponse.fromJS(resultData403);
//             return throwException("Forbidden", status, _responseText, _headers, result403);
//             }));
//         } else if (status === 401) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result401: any = null;
//             let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result401 = RemoteServiceErrorResponse.fromJS(resultData401);
//             return throwException("Unauthorized", status, _responseText, _headers, result401);
//             }));
//         } else if (status === 400) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result400: any = null;
//             let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result400 = RemoteServiceErrorResponse.fromJS(resultData400);
//             return throwException("Bad Request", status, _responseText, _headers, result400);
//             }));
//         } else if (status === 404) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result404: any = null;
//             let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result404 = RemoteServiceErrorResponse.fromJS(resultData404);
//             return throwException("Not Found", status, _responseText, _headers, result404);
//             }));
//         } else if (status === 501) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result501: any = null;
//             let resultData501 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result501 = RemoteServiceErrorResponse.fromJS(resultData501);
//             return throwException("Server Error", status, _responseText, _headers, result501);
//             }));
//         } else if (status === 500) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result500: any = null;
//             let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result500 = RemoteServiceErrorResponse.fromJS(resultData500);
//             return throwException("Server Error", status, _responseText, _headers, result500);
//             }));
//         } else if (status !== 200 && status !== 204) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             return throwException("An unexpected server error occurred.", status, _responseText, _headers);
//             }));
//         }
//         return _observableOf<ClientWithDetailsDto>(<any>null);
//     }
//
//     /**
//      * @param id (optional)
//      * @return Success
//      */
//     clientsDelete(id: string | undefined): Observable<void> {
//         let url_ = this.baseUrl + "/api/identity-server/clients?";
//         if (id === null)
//             throw new Error("The parameter 'id' cannot be null.");
//         else if (id !== undefined)
//             url_ += "id=" + encodeURIComponent("" + id) + "&";
//         url_ = url_.replace(/[?&]$/, "");
//
//         let options_ : any = {
//             observe: "response",
//             responseType: "blob",
//             headers: new HttpHeaders({
//             })
//         };
//
//         return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
//             return this.processClientsDelete(response_);
//         })).pipe(_observableCatch((response_: any) => {
//             if (response_ instanceof HttpResponseBase) {
//                 try {
//                     return this.processClientsDelete(<any>response_);
//                 } catch (e) {
//                     return <Observable<void>><any>_observableThrow(e);
//                 }
//             } else
//                 return <Observable<void>><any>_observableThrow(response_);
//         }));
//     }
//
//     protected processClientsDelete(response: HttpResponseBase): Observable<void> {
//         const status = response.status;
//         const responseBlob =
//             response instanceof HttpResponse ? response.body :
//             (<any>response).error instanceof Blob ? (<any>response).error : undefined;
//
//         let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
//         if (status === 200) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             return _observableOf<void>(<any>null);
//             }));
//         } else if (status === 403) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result403: any = null;
//             let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result403 = RemoteServiceErrorResponse.fromJS(resultData403);
//             return throwException("Forbidden", status, _responseText, _headers, result403);
//             }));
//         } else if (status === 401) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result401: any = null;
//             let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result401 = RemoteServiceErrorResponse.fromJS(resultData401);
//             return throwException("Unauthorized", status, _responseText, _headers, result401);
//             }));
//         } else if (status === 400) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result400: any = null;
//             let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result400 = RemoteServiceErrorResponse.fromJS(resultData400);
//             return throwException("Bad Request", status, _responseText, _headers, result400);
//             }));
//         } else if (status === 404) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result404: any = null;
//             let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result404 = RemoteServiceErrorResponse.fromJS(resultData404);
//             return throwException("Not Found", status, _responseText, _headers, result404);
//             }));
//         } else if (status === 501) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result501: any = null;
//             let resultData501 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result501 = RemoteServiceErrorResponse.fromJS(resultData501);
//             return throwException("Server Error", status, _responseText, _headers, result501);
//             }));
//         } else if (status === 500) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result500: any = null;
//             let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result500 = RemoteServiceErrorResponse.fromJS(resultData500);
//             return throwException("Server Error", status, _responseText, _headers, result500);
//             }));
//         } else if (status !== 200 && status !== 204) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             return throwException("An unexpected server error occurred.", status, _responseText, _headers);
//             }));
//         }
//         return _observableOf<void>(<any>null);
//     }
//
//     /**
//      * @return Success
//      */
//     clientsGet(id: string): Observable<ClientWithDetailsDto> {
//         let url_ = this.baseUrl + "/api/identity-server/clients/{id}";
//         if (id === undefined || id === null)
//             throw new Error("The parameter 'id' must be defined.");
//         url_ = url_.replace("{id}", encodeURIComponent("" + id));
//         url_ = url_.replace(/[?&]$/, "");
//
//         let options_ : any = {
//             observe: "response",
//             responseType: "blob",
//             headers: new HttpHeaders({
//                 "Accept": "text/plain"
//             })
//         };
//
//         return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
//             return this.processClientsGet(response_);
//         })).pipe(_observableCatch((response_: any) => {
//             if (response_ instanceof HttpResponseBase) {
//                 try {
//                     return this.processClientsGet(<any>response_);
//                 } catch (e) {
//                     return <Observable<ClientWithDetailsDto>><any>_observableThrow(e);
//                 }
//             } else
//                 return <Observable<ClientWithDetailsDto>><any>_observableThrow(response_);
//         }));
//     }
//
//     protected processClientsGet(response: HttpResponseBase): Observable<ClientWithDetailsDto> {
//         const status = response.status;
//         const responseBlob =
//             response instanceof HttpResponse ? response.body :
//             (<any>response).error instanceof Blob ? (<any>response).error : undefined;
//
//         let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
//         if (status === 200) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result200: any = null;
//             let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result200 = ClientWithDetailsDto.fromJS(resultData200);
//             return _observableOf(result200);
//             }));
//         } else if (status === 403) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result403: any = null;
//             let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result403 = RemoteServiceErrorResponse.fromJS(resultData403);
//             return throwException("Forbidden", status, _responseText, _headers, result403);
//             }));
//         } else if (status === 401) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result401: any = null;
//             let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result401 = RemoteServiceErrorResponse.fromJS(resultData401);
//             return throwException("Unauthorized", status, _responseText, _headers, result401);
//             }));
//         } else if (status === 400) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result400: any = null;
//             let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result400 = RemoteServiceErrorResponse.fromJS(resultData400);
//             return throwException("Bad Request", status, _responseText, _headers, result400);
//             }));
//         } else if (status === 404) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result404: any = null;
//             let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result404 = RemoteServiceErrorResponse.fromJS(resultData404);
//             return throwException("Not Found", status, _responseText, _headers, result404);
//             }));
//         } else if (status === 501) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result501: any = null;
//             let resultData501 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result501 = RemoteServiceErrorResponse.fromJS(resultData501);
//             return throwException("Server Error", status, _responseText, _headers, result501);
//             }));
//         } else if (status === 500) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result500: any = null;
//             let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result500 = RemoteServiceErrorResponse.fromJS(resultData500);
//             return throwException("Server Error", status, _responseText, _headers, result500);
//             }));
//         } else if (status !== 200 && status !== 204) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             return throwException("An unexpected server error occurred.", status, _responseText, _headers);
//             }));
//         }
//         return _observableOf<ClientWithDetailsDto>(<any>null);
//     }
//
//     /**
//      * @param body (optional)
//      * @return Success
//      */
//     clientsPut(id: string, body: UpdateClientDto | undefined): Observable<ClientWithDetailsDto> {
//         let url_ = this.baseUrl + "/api/identity-server/clients/{id}";
//         if (id === undefined || id === null)
//             throw new Error("The parameter 'id' must be defined.");
//         url_ = url_.replace("{id}", encodeURIComponent("" + id));
//         url_ = url_.replace(/[?&]$/, "");
//
//         const content_ = JSON.stringify(body);
//
//         let options_ : any = {
//             body: content_,
//             observe: "response",
//             responseType: "blob",
//             headers: new HttpHeaders({
//                 "Content-Type": "application/json",
//                 "Accept": "text/plain"
//             })
//         };
//
//         return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
//             return this.processClientsPut(response_);
//         })).pipe(_observableCatch((response_: any) => {
//             if (response_ instanceof HttpResponseBase) {
//                 try {
//                     return this.processClientsPut(<any>response_);
//                 } catch (e) {
//                     return <Observable<ClientWithDetailsDto>><any>_observableThrow(e);
//                 }
//             } else
//                 return <Observable<ClientWithDetailsDto>><any>_observableThrow(response_);
//         }));
//     }
//
//     protected processClientsPut(response: HttpResponseBase): Observable<ClientWithDetailsDto> {
//         const status = response.status;
//         const responseBlob =
//             response instanceof HttpResponse ? response.body :
//             (<any>response).error instanceof Blob ? (<any>response).error : undefined;
//
//         let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
//         if (status === 200) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result200: any = null;
//             let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result200 = ClientWithDetailsDto.fromJS(resultData200);
//             return _observableOf(result200);
//             }));
//         } else if (status === 403) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result403: any = null;
//             let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result403 = RemoteServiceErrorResponse.fromJS(resultData403);
//             return throwException("Forbidden", status, _responseText, _headers, result403);
//             }));
//         } else if (status === 401) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result401: any = null;
//             let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result401 = RemoteServiceErrorResponse.fromJS(resultData401);
//             return throwException("Unauthorized", status, _responseText, _headers, result401);
//             }));
//         } else if (status === 400) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result400: any = null;
//             let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result400 = RemoteServiceErrorResponse.fromJS(resultData400);
//             return throwException("Bad Request", status, _responseText, _headers, result400);
//             }));
//         } else if (status === 404) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result404: any = null;
//             let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result404 = RemoteServiceErrorResponse.fromJS(resultData404);
//             return throwException("Not Found", status, _responseText, _headers, result404);
//             }));
//         } else if (status === 501) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result501: any = null;
//             let resultData501 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result501 = RemoteServiceErrorResponse.fromJS(resultData501);
//             return throwException("Server Error", status, _responseText, _headers, result501);
//             }));
//         } else if (status === 500) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result500: any = null;
//             let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result500 = RemoteServiceErrorResponse.fromJS(resultData500);
//             return throwException("Server Error", status, _responseText, _headers, result500);
//             }));
//         } else if (status !== 200 && status !== 204) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             return throwException("An unexpected server error occurred.", status, _responseText, _headers);
//             }));
//         }
//         return _observableOf<ClientWithDetailsDto>(<any>null);
//     }
//
//     /**
//      * @param filter (optional)
//      * @param sorting (optional)
//      * @param skipCount (optional)
//      * @param maxResultCount (optional)
//      * @return Success
//      */
//     identityResourcesGet(filter: string | undefined, sorting: string | undefined, skipCount: number | undefined, maxResultCount: number | undefined): Observable<PagedResultDto_1OfOfIdentityResourceWithDetailsDtoAndContractsAnd_0AndCulture_neutralAndPublicKeyToken_null> {
//         let url_ = this.baseUrl + "/api/identity-server/identity-resources?";
//         if (filter === null)
//             throw new Error("The parameter 'filter' cannot be null.");
//         else if (filter !== undefined)
//             url_ += "Filter=" + encodeURIComponent("" + filter) + "&";
//         if (sorting === null)
//             throw new Error("The parameter 'sorting' cannot be null.");
//         else if (sorting !== undefined)
//             url_ += "Sorting=" + encodeURIComponent("" + sorting) + "&";
//         if (skipCount === null)
//             throw new Error("The parameter 'skipCount' cannot be null.");
//         else if (skipCount !== undefined)
//             url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&";
//         if (maxResultCount === null)
//             throw new Error("The parameter 'maxResultCount' cannot be null.");
//         else if (maxResultCount !== undefined)
//             url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&";
//         url_ = url_.replace(/[?&]$/, "");
//
//         let options_ : any = {
//             observe: "response",
//             responseType: "blob",
//             headers: new HttpHeaders({
//                 "Accept": "text/plain"
//             })
//         };
//
//         return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
//             return this.processIdentityResourcesGet(response_);
//         })).pipe(_observableCatch((response_: any) => {
//             if (response_ instanceof HttpResponseBase) {
//                 try {
//                     return this.processIdentityResourcesGet(<any>response_);
//                 } catch (e) {
//                     return <Observable<PagedResultDto_1OfOfIdentityResourceWithDetailsDtoAndContractsAnd_0AndCulture_neutralAndPublicKeyToken_null>><any>_observableThrow(e);
//                 }
//             } else
//                 return <Observable<PagedResultDto_1OfOfIdentityResourceWithDetailsDtoAndContractsAnd_0AndCulture_neutralAndPublicKeyToken_null>><any>_observableThrow(response_);
//         }));
//     }
//
//     protected processIdentityResourcesGet(response: HttpResponseBase): Observable<PagedResultDto_1OfOfIdentityResourceWithDetailsDtoAndContractsAnd_0AndCulture_neutralAndPublicKeyToken_null> {
//         const status = response.status;
//         const responseBlob =
//             response instanceof HttpResponse ? response.body :
//             (<any>response).error instanceof Blob ? (<any>response).error : undefined;
//
//         let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
//         if (status === 200) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result200: any = null;
//             let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result200 = PagedResultDto_1OfOfIdentityResourceWithDetailsDtoAndContractsAnd_0AndCulture_neutralAndPublicKeyToken_null.fromJS(resultData200);
//             return _observableOf(result200);
//             }));
//         } else if (status === 403) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result403: any = null;
//             let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result403 = RemoteServiceErrorResponse.fromJS(resultData403);
//             return throwException("Forbidden", status, _responseText, _headers, result403);
//             }));
//         } else if (status === 401) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result401: any = null;
//             let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result401 = RemoteServiceErrorResponse.fromJS(resultData401);
//             return throwException("Unauthorized", status, _responseText, _headers, result401);
//             }));
//         } else if (status === 400) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result400: any = null;
//             let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result400 = RemoteServiceErrorResponse.fromJS(resultData400);
//             return throwException("Bad Request", status, _responseText, _headers, result400);
//             }));
//         } else if (status === 404) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result404: any = null;
//             let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result404 = RemoteServiceErrorResponse.fromJS(resultData404);
//             return throwException("Not Found", status, _responseText, _headers, result404);
//             }));
//         } else if (status === 501) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result501: any = null;
//             let resultData501 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result501 = RemoteServiceErrorResponse.fromJS(resultData501);
//             return throwException("Server Error", status, _responseText, _headers, result501);
//             }));
//         } else if (status === 500) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result500: any = null;
//             let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result500 = RemoteServiceErrorResponse.fromJS(resultData500);
//             return throwException("Server Error", status, _responseText, _headers, result500);
//             }));
//         } else if (status !== 200 && status !== 204) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             return throwException("An unexpected server error occurred.", status, _responseText, _headers);
//             }));
//         }
//         return _observableOf<PagedResultDto_1OfOfIdentityResourceWithDetailsDtoAndContractsAnd_0AndCulture_neutralAndPublicKeyToken_null>(<any>null);
//     }
//
//     /**
//      * @param body (optional)
//      * @return Success
//      */
//     identityResourcesPost(body: CreateIdentityResourceDto | undefined): Observable<IdentityResourceWithDetailsDto> {
//         let url_ = this.baseUrl + "/api/identity-server/identity-resources";
//         url_ = url_.replace(/[?&]$/, "");
//
//         const content_ = JSON.stringify(body);
//
//         let options_ : any = {
//             body: content_,
//             observe: "response",
//             responseType: "blob",
//             headers: new HttpHeaders({
//                 "Content-Type": "application/json",
//                 "Accept": "text/plain"
//             })
//         };
//
//         return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
//             return this.processIdentityResourcesPost(response_);
//         })).pipe(_observableCatch((response_: any) => {
//             if (response_ instanceof HttpResponseBase) {
//                 try {
//                     return this.processIdentityResourcesPost(<any>response_);
//                 } catch (e) {
//                     return <Observable<IdentityResourceWithDetailsDto>><any>_observableThrow(e);
//                 }
//             } else
//                 return <Observable<IdentityResourceWithDetailsDto>><any>_observableThrow(response_);
//         }));
//     }
//
//     protected processIdentityResourcesPost(response: HttpResponseBase): Observable<IdentityResourceWithDetailsDto> {
//         const status = response.status;
//         const responseBlob =
//             response instanceof HttpResponse ? response.body :
//             (<any>response).error instanceof Blob ? (<any>response).error : undefined;
//
//         let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
//         if (status === 200) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result200: any = null;
//             let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result200 = IdentityResourceWithDetailsDto.fromJS(resultData200);
//             return _observableOf(result200);
//             }));
//         } else if (status === 403) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result403: any = null;
//             let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result403 = RemoteServiceErrorResponse.fromJS(resultData403);
//             return throwException("Forbidden", status, _responseText, _headers, result403);
//             }));
//         } else if (status === 401) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result401: any = null;
//             let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result401 = RemoteServiceErrorResponse.fromJS(resultData401);
//             return throwException("Unauthorized", status, _responseText, _headers, result401);
//             }));
//         } else if (status === 400) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result400: any = null;
//             let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result400 = RemoteServiceErrorResponse.fromJS(resultData400);
//             return throwException("Bad Request", status, _responseText, _headers, result400);
//             }));
//         } else if (status === 404) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result404: any = null;
//             let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result404 = RemoteServiceErrorResponse.fromJS(resultData404);
//             return throwException("Not Found", status, _responseText, _headers, result404);
//             }));
//         } else if (status === 501) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result501: any = null;
//             let resultData501 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result501 = RemoteServiceErrorResponse.fromJS(resultData501);
//             return throwException("Server Error", status, _responseText, _headers, result501);
//             }));
//         } else if (status === 500) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result500: any = null;
//             let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result500 = RemoteServiceErrorResponse.fromJS(resultData500);
//             return throwException("Server Error", status, _responseText, _headers, result500);
//             }));
//         } else if (status !== 200 && status !== 204) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             return throwException("An unexpected server error occurred.", status, _responseText, _headers);
//             }));
//         }
//         return _observableOf<IdentityResourceWithDetailsDto>(<any>null);
//     }
//
//     /**
//      * @param id (optional)
//      * @return Success
//      */
//     identityResourcesDelete(id: string | undefined): Observable<void> {
//         let url_ = this.baseUrl + "/api/identity-server/identity-resources?";
//         if (id === null)
//             throw new Error("The parameter 'id' cannot be null.");
//         else if (id !== undefined)
//             url_ += "id=" + encodeURIComponent("" + id) + "&";
//         url_ = url_.replace(/[?&]$/, "");
//
//         let options_ : any = {
//             observe: "response",
//             responseType: "blob",
//             headers: new HttpHeaders({
//             })
//         };
//
//         return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
//             return this.processIdentityResourcesDelete(response_);
//         })).pipe(_observableCatch((response_: any) => {
//             if (response_ instanceof HttpResponseBase) {
//                 try {
//                     return this.processIdentityResourcesDelete(<any>response_);
//                 } catch (e) {
//                     return <Observable<void>><any>_observableThrow(e);
//                 }
//             } else
//                 return <Observable<void>><any>_observableThrow(response_);
//         }));
//     }
//
//     protected processIdentityResourcesDelete(response: HttpResponseBase): Observable<void> {
//         const status = response.status;
//         const responseBlob =
//             response instanceof HttpResponse ? response.body :
//             (<any>response).error instanceof Blob ? (<any>response).error : undefined;
//
//         let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
//         if (status === 200) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             return _observableOf<void>(<any>null);
//             }));
//         } else if (status === 403) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result403: any = null;
//             let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result403 = RemoteServiceErrorResponse.fromJS(resultData403);
//             return throwException("Forbidden", status, _responseText, _headers, result403);
//             }));
//         } else if (status === 401) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result401: any = null;
//             let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result401 = RemoteServiceErrorResponse.fromJS(resultData401);
//             return throwException("Unauthorized", status, _responseText, _headers, result401);
//             }));
//         } else if (status === 400) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result400: any = null;
//             let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result400 = RemoteServiceErrorResponse.fromJS(resultData400);
//             return throwException("Bad Request", status, _responseText, _headers, result400);
//             }));
//         } else if (status === 404) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result404: any = null;
//             let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result404 = RemoteServiceErrorResponse.fromJS(resultData404);
//             return throwException("Not Found", status, _responseText, _headers, result404);
//             }));
//         } else if (status === 501) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result501: any = null;
//             let resultData501 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result501 = RemoteServiceErrorResponse.fromJS(resultData501);
//             return throwException("Server Error", status, _responseText, _headers, result501);
//             }));
//         } else if (status === 500) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result500: any = null;
//             let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result500 = RemoteServiceErrorResponse.fromJS(resultData500);
//             return throwException("Server Error", status, _responseText, _headers, result500);
//             }));
//         } else if (status !== 200 && status !== 204) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             return throwException("An unexpected server error occurred.", status, _responseText, _headers);
//             }));
//         }
//         return _observableOf<void>(<any>null);
//     }
//
//     /**
//      * @return Success
//      */
//     identityResourcesGet(id: string): Observable<IdentityResourceWithDetailsDto> {
//         let url_ = this.baseUrl + "/api/identity-server/identity-resources/{id}";
//         if (id === undefined || id === null)
//             throw new Error("The parameter 'id' must be defined.");
//         url_ = url_.replace("{id}", encodeURIComponent("" + id));
//         url_ = url_.replace(/[?&]$/, "");
//
//         let options_ : any = {
//             observe: "response",
//             responseType: "blob",
//             headers: new HttpHeaders({
//                 "Accept": "text/plain"
//             })
//         };
//
//         return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
//             return this.processIdentityResourcesGet(response_);
//         })).pipe(_observableCatch((response_: any) => {
//             if (response_ instanceof HttpResponseBase) {
//                 try {
//                     return this.processIdentityResourcesGet(<any>response_);
//                 } catch (e) {
//                     return <Observable<IdentityResourceWithDetailsDto>><any>_observableThrow(e);
//                 }
//             } else
//                 return <Observable<IdentityResourceWithDetailsDto>><any>_observableThrow(response_);
//         }));
//     }
//
//     protected processIdentityResourcesGet(response: HttpResponseBase): Observable<IdentityResourceWithDetailsDto> {
//         const status = response.status;
//         const responseBlob =
//             response instanceof HttpResponse ? response.body :
//             (<any>response).error instanceof Blob ? (<any>response).error : undefined;
//
//         let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
//         if (status === 200) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result200: any = null;
//             let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result200 = IdentityResourceWithDetailsDto.fromJS(resultData200);
//             return _observableOf(result200);
//             }));
//         } else if (status === 403) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result403: any = null;
//             let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result403 = RemoteServiceErrorResponse.fromJS(resultData403);
//             return throwException("Forbidden", status, _responseText, _headers, result403);
//             }));
//         } else if (status === 401) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result401: any = null;
//             let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result401 = RemoteServiceErrorResponse.fromJS(resultData401);
//             return throwException("Unauthorized", status, _responseText, _headers, result401);
//             }));
//         } else if (status === 400) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result400: any = null;
//             let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result400 = RemoteServiceErrorResponse.fromJS(resultData400);
//             return throwException("Bad Request", status, _responseText, _headers, result400);
//             }));
//         } else if (status === 404) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result404: any = null;
//             let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result404 = RemoteServiceErrorResponse.fromJS(resultData404);
//             return throwException("Not Found", status, _responseText, _headers, result404);
//             }));
//         } else if (status === 501) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result501: any = null;
//             let resultData501 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result501 = RemoteServiceErrorResponse.fromJS(resultData501);
//             return throwException("Server Error", status, _responseText, _headers, result501);
//             }));
//         } else if (status === 500) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result500: any = null;
//             let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result500 = RemoteServiceErrorResponse.fromJS(resultData500);
//             return throwException("Server Error", status, _responseText, _headers, result500);
//             }));
//         } else if (status !== 200 && status !== 204) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             return throwException("An unexpected server error occurred.", status, _responseText, _headers);
//             }));
//         }
//         return _observableOf<IdentityResourceWithDetailsDto>(<any>null);
//     }
//
//     /**
//      * @param body (optional)
//      * @return Success
//      */
//     identityResourcesPut(id: string, body: UpdateIdentityResourceDto | undefined): Observable<IdentityResourceWithDetailsDto> {
//         let url_ = this.baseUrl + "/api/identity-server/identity-resources/{id}";
//         if (id === undefined || id === null)
//             throw new Error("The parameter 'id' must be defined.");
//         url_ = url_.replace("{id}", encodeURIComponent("" + id));
//         url_ = url_.replace(/[?&]$/, "");
//
//         const content_ = JSON.stringify(body);
//
//         let options_ : any = {
//             body: content_,
//             observe: "response",
//             responseType: "blob",
//             headers: new HttpHeaders({
//                 "Content-Type": "application/json",
//                 "Accept": "text/plain"
//             })
//         };
//
//         return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
//             return this.processIdentityResourcesPut(response_);
//         })).pipe(_observableCatch((response_: any) => {
//             if (response_ instanceof HttpResponseBase) {
//                 try {
//                     return this.processIdentityResourcesPut(<any>response_);
//                 } catch (e) {
//                     return <Observable<IdentityResourceWithDetailsDto>><any>_observableThrow(e);
//                 }
//             } else
//                 return <Observable<IdentityResourceWithDetailsDto>><any>_observableThrow(response_);
//         }));
//     }
//
//     protected processIdentityResourcesPut(response: HttpResponseBase): Observable<IdentityResourceWithDetailsDto> {
//         const status = response.status;
//         const responseBlob =
//             response instanceof HttpResponse ? response.body :
//             (<any>response).error instanceof Blob ? (<any>response).error : undefined;
//
//         let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
//         if (status === 200) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result200: any = null;
//             let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result200 = IdentityResourceWithDetailsDto.fromJS(resultData200);
//             return _observableOf(result200);
//             }));
//         } else if (status === 403) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result403: any = null;
//             let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result403 = RemoteServiceErrorResponse.fromJS(resultData403);
//             return throwException("Forbidden", status, _responseText, _headers, result403);
//             }));
//         } else if (status === 401) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result401: any = null;
//             let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result401 = RemoteServiceErrorResponse.fromJS(resultData401);
//             return throwException("Unauthorized", status, _responseText, _headers, result401);
//             }));
//         } else if (status === 400) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result400: any = null;
//             let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result400 = RemoteServiceErrorResponse.fromJS(resultData400);
//             return throwException("Bad Request", status, _responseText, _headers, result400);
//             }));
//         } else if (status === 404) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result404: any = null;
//             let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result404 = RemoteServiceErrorResponse.fromJS(resultData404);
//             return throwException("Not Found", status, _responseText, _headers, result404);
//             }));
//         } else if (status === 501) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result501: any = null;
//             let resultData501 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result501 = RemoteServiceErrorResponse.fromJS(resultData501);
//             return throwException("Server Error", status, _responseText, _headers, result501);
//             }));
//         } else if (status === 500) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result500: any = null;
//             let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result500 = RemoteServiceErrorResponse.fromJS(resultData500);
//             return throwException("Server Error", status, _responseText, _headers, result500);
//             }));
//         } else if (status !== 200 && status !== 204) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             return throwException("An unexpected server error occurred.", status, _responseText, _headers);
//             }));
//         }
//         return _observableOf<IdentityResourceWithDetailsDto>(<any>null);
//     }
// }
//
// @Injectable({providedIn: 'root'})
// export class ApiResourcesServiceProxy {
//     private http: HttpClient;
//     private baseUrl: string;
//     protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;
//
//     constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
//         this.http = http;
//         this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
//     }
//
//     /**
//      * @return Success
//      */
//     all(): Observable<ApiResourceWithDetailsDto[]> {
//         let url_ = this.baseUrl + "/api/identity-server/api-resources/all";
//         url_ = url_.replace(/[?&]$/, "");
//
//         let options_ : any = {
//             observe: "response",
//             responseType: "blob",
//             headers: new HttpHeaders({
//                 "Accept": "text/plain"
//             })
//         };
//
//         return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
//             return this.processAll(response_);
//         })).pipe(_observableCatch((response_: any) => {
//             if (response_ instanceof HttpResponseBase) {
//                 try {
//                     return this.processAll(<any>response_);
//                 } catch (e) {
//                     return <Observable<ApiResourceWithDetailsDto[]>><any>_observableThrow(e);
//                 }
//             } else
//                 return <Observable<ApiResourceWithDetailsDto[]>><any>_observableThrow(response_);
//         }));
//     }
//
//     protected processAll(response: HttpResponseBase): Observable<ApiResourceWithDetailsDto[]> {
//         const status = response.status;
//         const responseBlob =
//             response instanceof HttpResponse ? response.body :
//             (<any>response).error instanceof Blob ? (<any>response).error : undefined;
//
//         let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
//         if (status === 200) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result200: any = null;
//             let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             if (Array.isArray(resultData200)) {
//                 result200 = [] as any;
//                 for (let item of resultData200)
//                     result200!.push(ApiResourceWithDetailsDto.fromJS(item));
//             }
//             else {
//                 result200 = <any>null;
//             }
//             return _observableOf(result200);
//             }));
//         } else if (status === 403) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result403: any = null;
//             let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result403 = RemoteServiceErrorResponse.fromJS(resultData403);
//             return throwException("Forbidden", status, _responseText, _headers, result403);
//             }));
//         } else if (status === 401) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result401: any = null;
//             let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result401 = RemoteServiceErrorResponse.fromJS(resultData401);
//             return throwException("Unauthorized", status, _responseText, _headers, result401);
//             }));
//         } else if (status === 400) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result400: any = null;
//             let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result400 = RemoteServiceErrorResponse.fromJS(resultData400);
//             return throwException("Bad Request", status, _responseText, _headers, result400);
//             }));
//         } else if (status === 404) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result404: any = null;
//             let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result404 = RemoteServiceErrorResponse.fromJS(resultData404);
//             return throwException("Not Found", status, _responseText, _headers, result404);
//             }));
//         } else if (status === 501) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result501: any = null;
//             let resultData501 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result501 = RemoteServiceErrorResponse.fromJS(resultData501);
//             return throwException("Server Error", status, _responseText, _headers, result501);
//             }));
//         } else if (status === 500) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result500: any = null;
//             let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result500 = RemoteServiceErrorResponse.fromJS(resultData500);
//             return throwException("Server Error", status, _responseText, _headers, result500);
//             }));
//         } else if (status !== 200 && status !== 204) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             return throwException("An unexpected server error occurred.", status, _responseText, _headers);
//             }));
//         }
//         return _observableOf<ApiResourceWithDetailsDto[]>(<any>null);
//     }
// }
//
// @Injectable({providedIn: 'root'})
// export class ApiScopesServiceProxy {
//     private http: HttpClient;
//     private baseUrl: string;
//     protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;
//
//     constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
//         this.http = http;
//         this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
//     }
//
//     /**
//      * @return Success
//      */
//     all(): Observable<ApiScopeWithDetailsDto[]> {
//         let url_ = this.baseUrl + "/api/identity-server/apiScopes/all";
//         url_ = url_.replace(/[?&]$/, "");
//
//         let options_ : any = {
//             observe: "response",
//             responseType: "blob",
//             headers: new HttpHeaders({
//                 "Accept": "text/plain"
//             })
//         };
//
//         return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
//             return this.processAll(response_);
//         })).pipe(_observableCatch((response_: any) => {
//             if (response_ instanceof HttpResponseBase) {
//                 try {
//                     return this.processAll(<any>response_);
//                 } catch (e) {
//                     return <Observable<ApiScopeWithDetailsDto[]>><any>_observableThrow(e);
//                 }
//             } else
//                 return <Observable<ApiScopeWithDetailsDto[]>><any>_observableThrow(response_);
//         }));
//     }
//
//     protected processAll(response: HttpResponseBase): Observable<ApiScopeWithDetailsDto[]> {
//         const status = response.status;
//         const responseBlob =
//             response instanceof HttpResponse ? response.body :
//             (<any>response).error instanceof Blob ? (<any>response).error : undefined;
//
//         let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
//         if (status === 200) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result200: any = null;
//             let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             if (Array.isArray(resultData200)) {
//                 result200 = [] as any;
//                 for (let item of resultData200)
//                     result200!.push(ApiScopeWithDetailsDto.fromJS(item));
//             }
//             else {
//                 result200 = <any>null;
//             }
//             return _observableOf(result200);
//             }));
//         } else if (status === 403) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result403: any = null;
//             let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result403 = RemoteServiceErrorResponse.fromJS(resultData403);
//             return throwException("Forbidden", status, _responseText, _headers, result403);
//             }));
//         } else if (status === 401) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result401: any = null;
//             let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result401 = RemoteServiceErrorResponse.fromJS(resultData401);
//             return throwException("Unauthorized", status, _responseText, _headers, result401);
//             }));
//         } else if (status === 400) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result400: any = null;
//             let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result400 = RemoteServiceErrorResponse.fromJS(resultData400);
//             return throwException("Bad Request", status, _responseText, _headers, result400);
//             }));
//         } else if (status === 404) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result404: any = null;
//             let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result404 = RemoteServiceErrorResponse.fromJS(resultData404);
//             return throwException("Not Found", status, _responseText, _headers, result404);
//             }));
//         } else if (status === 501) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result501: any = null;
//             let resultData501 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result501 = RemoteServiceErrorResponse.fromJS(resultData501);
//             return throwException("Server Error", status, _responseText, _headers, result501);
//             }));
//         } else if (status === 500) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result500: any = null;
//             let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result500 = RemoteServiceErrorResponse.fromJS(resultData500);
//             return throwException("Server Error", status, _responseText, _headers, result500);
//             }));
//         } else if (status !== 200 && status !== 204) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             return throwException("An unexpected server error occurred.", status, _responseText, _headers);
//             }));
//         }
//         return _observableOf<ApiScopeWithDetailsDto[]>(<any>null);
//     }
// }
//
// @Injectable({providedIn: 'root'})
// export class AuditLoggingServiceProxy {
//     private http: HttpClient;
//     private baseUrl: string;
//     protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;
//
//     constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
//         this.http = http;
//         this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
//     }
//
//     /**
//      * @param startTime (optional)
//      * @param endTime (optional)
//      * @param url (optional)
//      * @param userName (optional)
//      * @param applicationName (optional)
//      * @param correlationId (optional)
//      * @param httpMethod (optional)
//      * @param httpStatusCode (optional)
//      * @param maxExecutionDuration (optional)
//      * @param minExecutionDuration (optional)
//      * @param hasException (optional)
//      * @param sorting (optional)
//      * @param skipCount (optional)
//      * @param maxResultCount (optional)
//      * @return Success
//      */
//     auditLogsGet(startTime: DateTime | undefined, endTime: DateTime | undefined, url: string | undefined, userName: string | undefined, applicationName: string | undefined, correlationId: string | undefined, httpMethod: string | undefined, httpStatusCode: HttpStatusCode | undefined, maxExecutionDuration: number | undefined, minExecutionDuration: number | undefined, hasException: boolean | undefined, sorting: string | undefined, skipCount: number | undefined, maxResultCount: number | undefined): Observable<PagedResultDto_1OfOfAuditLogDtoAndContractsAnd_0AndCulture_neutralAndPublicKeyToken_null> {
//         let url_ = this.baseUrl + "/api/audit-logging/audit-logs?";
//         if (startTime === null)
//             throw new Error("The parameter 'startTime' cannot be null.");
//         else if (startTime !== undefined)
//             url_ += "StartTime=" + encodeURIComponent(startTime ? "" + startTime.toJSON() : "") + "&";
//         if (endTime === null)
//             throw new Error("The parameter 'endTime' cannot be null.");
//         else if (endTime !== undefined)
//             url_ += "EndTime=" + encodeURIComponent(endTime ? "" + endTime.toJSON() : "") + "&";
//         if (url === null)
//             throw new Error("The parameter 'url' cannot be null.");
//         else if (url !== undefined)
//             url_ += "Url=" + encodeURIComponent("" + url) + "&";
//         if (userName === null)
//             throw new Error("The parameter 'userName' cannot be null.");
//         else if (userName !== undefined)
//             url_ += "UserName=" + encodeURIComponent("" + userName) + "&";
//         if (applicationName === null)
//             throw new Error("The parameter 'applicationName' cannot be null.");
//         else if (applicationName !== undefined)
//             url_ += "ApplicationName=" + encodeURIComponent("" + applicationName) + "&";
//         if (correlationId === null)
//             throw new Error("The parameter 'correlationId' cannot be null.");
//         else if (correlationId !== undefined)
//             url_ += "CorrelationId=" + encodeURIComponent("" + correlationId) + "&";
//         if (httpMethod === null)
//             throw new Error("The parameter 'httpMethod' cannot be null.");
//         else if (httpMethod !== undefined)
//             url_ += "HttpMethod=" + encodeURIComponent("" + httpMethod) + "&";
//         if (httpStatusCode === null)
//             throw new Error("The parameter 'httpStatusCode' cannot be null.");
//         else if (httpStatusCode !== undefined)
//             url_ += "HttpStatusCode=" + encodeURIComponent("" + httpStatusCode) + "&";
//         if (maxExecutionDuration === null)
//             throw new Error("The parameter 'maxExecutionDuration' cannot be null.");
//         else if (maxExecutionDuration !== undefined)
//             url_ += "MaxExecutionDuration=" + encodeURIComponent("" + maxExecutionDuration) + "&";
//         if (minExecutionDuration === null)
//             throw new Error("The parameter 'minExecutionDuration' cannot be null.");
//         else if (minExecutionDuration !== undefined)
//             url_ += "MinExecutionDuration=" + encodeURIComponent("" + minExecutionDuration) + "&";
//         if (hasException === null)
//             throw new Error("The parameter 'hasException' cannot be null.");
//         else if (hasException !== undefined)
//             url_ += "HasException=" + encodeURIComponent("" + hasException) + "&";
//         if (sorting === null)
//             throw new Error("The parameter 'sorting' cannot be null.");
//         else if (sorting !== undefined)
//             url_ += "Sorting=" + encodeURIComponent("" + sorting) + "&";
//         if (skipCount === null)
//             throw new Error("The parameter 'skipCount' cannot be null.");
//         else if (skipCount !== undefined)
//             url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&";
//         if (maxResultCount === null)
//             throw new Error("The parameter 'maxResultCount' cannot be null.");
//         else if (maxResultCount !== undefined)
//             url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&";
//         url_ = url_.replace(/[?&]$/, "");
//
//         let options_ : any = {
//             observe: "response",
//             responseType: "blob",
//             headers: new HttpHeaders({
//                 "Accept": "text/plain"
//             })
//         };
//
//         return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
//             return this.processAuditLogsGet(response_);
//         })).pipe(_observableCatch((response_: any) => {
//             if (response_ instanceof HttpResponseBase) {
//                 try {
//                     return this.processAuditLogsGet(<any>response_);
//                 } catch (e) {
//                     return <Observable<PagedResultDto_1OfOfAuditLogDtoAndContractsAnd_0AndCulture_neutralAndPublicKeyToken_null>><any>_observableThrow(e);
//                 }
//             } else
//                 return <Observable<PagedResultDto_1OfOfAuditLogDtoAndContractsAnd_0AndCulture_neutralAndPublicKeyToken_null>><any>_observableThrow(response_);
//         }));
//     }
//
//     protected processAuditLogsGet(response: HttpResponseBase): Observable<PagedResultDto_1OfOfAuditLogDtoAndContractsAnd_0AndCulture_neutralAndPublicKeyToken_null> {
//         const status = response.status;
//         const responseBlob =
//             response instanceof HttpResponse ? response.body :
//             (<any>response).error instanceof Blob ? (<any>response).error : undefined;
//
//         let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
//         if (status === 200) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result200: any = null;
//             let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result200 = PagedResultDto_1OfOfAuditLogDtoAndContractsAnd_0AndCulture_neutralAndPublicKeyToken_null.fromJS(resultData200);
//             return _observableOf(result200);
//             }));
//         } else if (status === 403) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result403: any = null;
//             let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result403 = RemoteServiceErrorResponse.fromJS(resultData403);
//             return throwException("Forbidden", status, _responseText, _headers, result403);
//             }));
//         } else if (status === 401) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result401: any = null;
//             let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result401 = RemoteServiceErrorResponse.fromJS(resultData401);
//             return throwException("Unauthorized", status, _responseText, _headers, result401);
//             }));
//         } else if (status === 400) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result400: any = null;
//             let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result400 = RemoteServiceErrorResponse.fromJS(resultData400);
//             return throwException("Bad Request", status, _responseText, _headers, result400);
//             }));
//         } else if (status === 404) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result404: any = null;
//             let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result404 = RemoteServiceErrorResponse.fromJS(resultData404);
//             return throwException("Not Found", status, _responseText, _headers, result404);
//             }));
//         } else if (status === 501) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result501: any = null;
//             let resultData501 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result501 = RemoteServiceErrorResponse.fromJS(resultData501);
//             return throwException("Server Error", status, _responseText, _headers, result501);
//             }));
//         } else if (status === 500) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result500: any = null;
//             let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result500 = RemoteServiceErrorResponse.fromJS(resultData500);
//             return throwException("Server Error", status, _responseText, _headers, result500);
//             }));
//         } else if (status !== 200 && status !== 204) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             return throwException("An unexpected server error occurred.", status, _responseText, _headers);
//             }));
//         }
//         return _observableOf<PagedResultDto_1OfOfAuditLogDtoAndContractsAnd_0AndCulture_neutralAndPublicKeyToken_null>(<any>null);
//     }
//
//     /**
//      * @return Success
//      */
//     auditLogsGet(id: string): Observable<AuditLogDto> {
//         let url_ = this.baseUrl + "/api/audit-logging/audit-logs/{id}";
//         if (id === undefined || id === null)
//             throw new Error("The parameter 'id' must be defined.");
//         url_ = url_.replace("{id}", encodeURIComponent("" + id));
//         url_ = url_.replace(/[?&]$/, "");
//
//         let options_ : any = {
//             observe: "response",
//             responseType: "blob",
//             headers: new HttpHeaders({
//                 "Accept": "text/plain"
//             })
//         };
//
//         return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
//             return this.processAuditLogsGet(response_);
//         })).pipe(_observableCatch((response_: any) => {
//             if (response_ instanceof HttpResponseBase) {
//                 try {
//                     return this.processAuditLogsGet(<any>response_);
//                 } catch (e) {
//                     return <Observable<AuditLogDto>><any>_observableThrow(e);
//                 }
//             } else
//                 return <Observable<AuditLogDto>><any>_observableThrow(response_);
//         }));
//     }
//
//     protected processAuditLogsGet(response: HttpResponseBase): Observable<AuditLogDto> {
//         const status = response.status;
//         const responseBlob =
//             response instanceof HttpResponse ? response.body :
//             (<any>response).error instanceof Blob ? (<any>response).error : undefined;
//
//         let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
//         if (status === 200) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result200: any = null;
//             let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result200 = AuditLogDto.fromJS(resultData200);
//             return _observableOf(result200);
//             }));
//         } else if (status === 403) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result403: any = null;
//             let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result403 = RemoteServiceErrorResponse.fromJS(resultData403);
//             return throwException("Forbidden", status, _responseText, _headers, result403);
//             }));
//         } else if (status === 401) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result401: any = null;
//             let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result401 = RemoteServiceErrorResponse.fromJS(resultData401);
//             return throwException("Unauthorized", status, _responseText, _headers, result401);
//             }));
//         } else if (status === 400) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result400: any = null;
//             let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result400 = RemoteServiceErrorResponse.fromJS(resultData400);
//             return throwException("Bad Request", status, _responseText, _headers, result400);
//             }));
//         } else if (status === 404) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result404: any = null;
//             let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result404 = RemoteServiceErrorResponse.fromJS(resultData404);
//             return throwException("Not Found", status, _responseText, _headers, result404);
//             }));
//         } else if (status === 501) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result501: any = null;
//             let resultData501 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result501 = RemoteServiceErrorResponse.fromJS(resultData501);
//             return throwException("Server Error", status, _responseText, _headers, result501);
//             }));
//         } else if (status === 500) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result500: any = null;
//             let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result500 = RemoteServiceErrorResponse.fromJS(resultData500);
//             return throwException("Server Error", status, _responseText, _headers, result500);
//             }));
//         } else if (status !== 200 && status !== 204) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             return throwException("An unexpected server error occurred.", status, _responseText, _headers);
//             }));
//         }
//         return _observableOf<AuditLogDto>(<any>null);
//     }
// }
//
// @Injectable({providedIn: 'root'})
// export class StatisticsServiceProxy {
//     private http: HttpClient;
//     private baseUrl: string;
//     protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;
//
//     constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
//         this.http = http;
//         this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
//     }
//
//     /**
//      * @param startDate (optional)
//      * @param endDate (optional)
//      * @return Success
//      */
//     errorRate(startDate: DateTime | undefined, endDate: DateTime | undefined): Observable<GetErrorRateOutput> {
//         let url_ = this.baseUrl + "/api/audit-logging/audit-logs/statistics/error-rate?";
//         if (startDate === null)
//             throw new Error("The parameter 'startDate' cannot be null.");
//         else if (startDate !== undefined)
//             url_ += "StartDate=" + encodeURIComponent(startDate ? "" + startDate.toJSON() : "") + "&";
//         if (endDate === null)
//             throw new Error("The parameter 'endDate' cannot be null.");
//         else if (endDate !== undefined)
//             url_ += "EndDate=" + encodeURIComponent(endDate ? "" + endDate.toJSON() : "") + "&";
//         url_ = url_.replace(/[?&]$/, "");
//
//         let options_ : any = {
//             observe: "response",
//             responseType: "blob",
//             headers: new HttpHeaders({
//                 "Accept": "text/plain"
//             })
//         };
//
//         return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
//             return this.processErrorRate(response_);
//         })).pipe(_observableCatch((response_: any) => {
//             if (response_ instanceof HttpResponseBase) {
//                 try {
//                     return this.processErrorRate(<any>response_);
//                 } catch (e) {
//                     return <Observable<GetErrorRateOutput>><any>_observableThrow(e);
//                 }
//             } else
//                 return <Observable<GetErrorRateOutput>><any>_observableThrow(response_);
//         }));
//     }
//
//     protected processErrorRate(response: HttpResponseBase): Observable<GetErrorRateOutput> {
//         const status = response.status;
//         const responseBlob =
//             response instanceof HttpResponse ? response.body :
//             (<any>response).error instanceof Blob ? (<any>response).error : undefined;
//
//         let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
//         if (status === 200) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result200: any = null;
//             let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result200 = GetErrorRateOutput.fromJS(resultData200);
//             return _observableOf(result200);
//             }));
//         } else if (status === 403) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result403: any = null;
//             let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result403 = RemoteServiceErrorResponse.fromJS(resultData403);
//             return throwException("Forbidden", status, _responseText, _headers, result403);
//             }));
//         } else if (status === 401) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result401: any = null;
//             let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result401 = RemoteServiceErrorResponse.fromJS(resultData401);
//             return throwException("Unauthorized", status, _responseText, _headers, result401);
//             }));
//         } else if (status === 400) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result400: any = null;
//             let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result400 = RemoteServiceErrorResponse.fromJS(resultData400);
//             return throwException("Bad Request", status, _responseText, _headers, result400);
//             }));
//         } else if (status === 404) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result404: any = null;
//             let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result404 = RemoteServiceErrorResponse.fromJS(resultData404);
//             return throwException("Not Found", status, _responseText, _headers, result404);
//             }));
//         } else if (status === 501) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result501: any = null;
//             let resultData501 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result501 = RemoteServiceErrorResponse.fromJS(resultData501);
//             return throwException("Server Error", status, _responseText, _headers, result501);
//             }));
//         } else if (status === 500) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result500: any = null;
//             let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result500 = RemoteServiceErrorResponse.fromJS(resultData500);
//             return throwException("Server Error", status, _responseText, _headers, result500);
//             }));
//         } else if (status !== 200 && status !== 204) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             return throwException("An unexpected server error occurred.", status, _responseText, _headers);
//             }));
//         }
//         return _observableOf<GetErrorRateOutput>(<any>null);
//     }
//
//     /**
//      * @param startDate (optional)
//      * @param endDate (optional)
//      * @return Success
//      */
//     averageExecutionDurationPerDay(startDate: DateTime | undefined, endDate: DateTime | undefined): Observable<GetAverageExecutionDurationPerDayOutput> {
//         let url_ = this.baseUrl + "/api/audit-logging/audit-logs/statistics/average-execution-duration-per-day?";
//         if (startDate === null)
//             throw new Error("The parameter 'startDate' cannot be null.");
//         else if (startDate !== undefined)
//             url_ += "StartDate=" + encodeURIComponent(startDate ? "" + startDate.toJSON() : "") + "&";
//         if (endDate === null)
//             throw new Error("The parameter 'endDate' cannot be null.");
//         else if (endDate !== undefined)
//             url_ += "EndDate=" + encodeURIComponent(endDate ? "" + endDate.toJSON() : "") + "&";
//         url_ = url_.replace(/[?&]$/, "");
//
//         let options_ : any = {
//             observe: "response",
//             responseType: "blob",
//             headers: new HttpHeaders({
//                 "Accept": "text/plain"
//             })
//         };
//
//         return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
//             return this.processAverageExecutionDurationPerDay(response_);
//         })).pipe(_observableCatch((response_: any) => {
//             if (response_ instanceof HttpResponseBase) {
//                 try {
//                     return this.processAverageExecutionDurationPerDay(<any>response_);
//                 } catch (e) {
//                     return <Observable<GetAverageExecutionDurationPerDayOutput>><any>_observableThrow(e);
//                 }
//             } else
//                 return <Observable<GetAverageExecutionDurationPerDayOutput>><any>_observableThrow(response_);
//         }));
//     }
//
//     protected processAverageExecutionDurationPerDay(response: HttpResponseBase): Observable<GetAverageExecutionDurationPerDayOutput> {
//         const status = response.status;
//         const responseBlob =
//             response instanceof HttpResponse ? response.body :
//             (<any>response).error instanceof Blob ? (<any>response).error : undefined;
//
//         let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
//         if (status === 200) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result200: any = null;
//             let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result200 = GetAverageExecutionDurationPerDayOutput.fromJS(resultData200);
//             return _observableOf(result200);
//             }));
//         } else if (status === 403) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result403: any = null;
//             let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result403 = RemoteServiceErrorResponse.fromJS(resultData403);
//             return throwException("Forbidden", status, _responseText, _headers, result403);
//             }));
//         } else if (status === 401) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result401: any = null;
//             let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result401 = RemoteServiceErrorResponse.fromJS(resultData401);
//             return throwException("Unauthorized", status, _responseText, _headers, result401);
//             }));
//         } else if (status === 400) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result400: any = null;
//             let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result400 = RemoteServiceErrorResponse.fromJS(resultData400);
//             return throwException("Bad Request", status, _responseText, _headers, result400);
//             }));
//         } else if (status === 404) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result404: any = null;
//             let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result404 = RemoteServiceErrorResponse.fromJS(resultData404);
//             return throwException("Not Found", status, _responseText, _headers, result404);
//             }));
//         } else if (status === 501) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result501: any = null;
//             let resultData501 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result501 = RemoteServiceErrorResponse.fromJS(resultData501);
//             return throwException("Server Error", status, _responseText, _headers, result501);
//             }));
//         } else if (status === 500) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result500: any = null;
//             let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result500 = RemoteServiceErrorResponse.fromJS(resultData500);
//             return throwException("Server Error", status, _responseText, _headers, result500);
//             }));
//         } else if (status !== 200 && status !== 204) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             return throwException("An unexpected server error occurred.", status, _responseText, _headers);
//             }));
//         }
//         return _observableOf<GetAverageExecutionDurationPerDayOutput>(<any>null);
//     }
//
//     /**
//      * @return Success
//      */
//     usageStatistic(): Observable<GetEditionUsageStatisticsResult> {
//         let url_ = this.baseUrl + "/api/saas/editions/statistics/usage-statistic";
//         url_ = url_.replace(/[?&]$/, "");
//
//         let options_ : any = {
//             observe: "response",
//             responseType: "blob",
//             headers: new HttpHeaders({
//                 "Accept": "text/plain"
//             })
//         };
//
//         return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
//             return this.processUsageStatistic(response_);
//         })).pipe(_observableCatch((response_: any) => {
//             if (response_ instanceof HttpResponseBase) {
//                 try {
//                     return this.processUsageStatistic(<any>response_);
//                 } catch (e) {
//                     return <Observable<GetEditionUsageStatisticsResult>><any>_observableThrow(e);
//                 }
//             } else
//                 return <Observable<GetEditionUsageStatisticsResult>><any>_observableThrow(response_);
//         }));
//     }
//
//     protected processUsageStatistic(response: HttpResponseBase): Observable<GetEditionUsageStatisticsResult> {
//         const status = response.status;
//         const responseBlob =
//             response instanceof HttpResponse ? response.body :
//             (<any>response).error instanceof Blob ? (<any>response).error : undefined;
//
//         let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
//         if (status === 200) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result200: any = null;
//             let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result200 = GetEditionUsageStatisticsResult.fromJS(resultData200);
//             return _observableOf(result200);
//             }));
//         } else if (status === 403) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result403: any = null;
//             let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result403 = RemoteServiceErrorResponse.fromJS(resultData403);
//             return throwException("Forbidden", status, _responseText, _headers, result403);
//             }));
//         } else if (status === 401) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result401: any = null;
//             let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result401 = RemoteServiceErrorResponse.fromJS(resultData401);
//             return throwException("Unauthorized", status, _responseText, _headers, result401);
//             }));
//         } else if (status === 400) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result400: any = null;
//             let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result400 = RemoteServiceErrorResponse.fromJS(resultData400);
//             return throwException("Bad Request", status, _responseText, _headers, result400);
//             }));
//         } else if (status === 404) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result404: any = null;
//             let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result404 = RemoteServiceErrorResponse.fromJS(resultData404);
//             return throwException("Not Found", status, _responseText, _headers, result404);
//             }));
//         } else if (status === 501) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result501: any = null;
//             let resultData501 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result501 = RemoteServiceErrorResponse.fromJS(resultData501);
//             return throwException("Server Error", status, _responseText, _headers, result501);
//             }));
//         } else if (status === 500) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result500: any = null;
//             let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result500 = RemoteServiceErrorResponse.fromJS(resultData500);
//             return throwException("Server Error", status, _responseText, _headers, result500);
//             }));
//         } else if (status !== 200 && status !== 204) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             return throwException("An unexpected server error occurred.", status, _responseText, _headers);
//             }));
//         }
//         return _observableOf<GetEditionUsageStatisticsResult>(<any>null);
//     }
// }
//
// @Injectable({providedIn: 'root'})
// export class AuditLogsServiceProxy {
//     private http: HttpClient;
//     private baseUrl: string;
//     protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;
//
//     constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
//         this.http = http;
//         this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
//     }
//
//     /**
//      * @param auditLogId (optional)
//      * @param entityChangeType (optional)
//      * @param entityId (optional)
//      * @param entityTypeFullName (optional)
//      * @param startDate (optional)
//      * @param endDate (optional)
//      * @param sorting (optional)
//      * @param skipCount (optional)
//      * @param maxResultCount (optional)
//      * @return Success
//      */
//     entityChangesGet(auditLogId: string | undefined, entityChangeType: EntityChangeType | undefined, entityId: string | undefined, entityTypeFullName: string | undefined, startDate: DateTime | undefined, endDate: DateTime | undefined, sorting: string | undefined, skipCount: number | undefined, maxResultCount: number | undefined): Observable<PagedResultDto_1OfOfEntityChangeDtoAndContractsAnd_0AndCulture_neutralAndPublicKeyToken_null> {
//         let url_ = this.baseUrl + "/api/audit-logging/audit-logs/entity-changes?";
//         if (auditLogId === null)
//             throw new Error("The parameter 'auditLogId' cannot be null.");
//         else if (auditLogId !== undefined)
//             url_ += "AuditLogId=" + encodeURIComponent("" + auditLogId) + "&";
//         if (entityChangeType === null)
//             throw new Error("The parameter 'entityChangeType' cannot be null.");
//         else if (entityChangeType !== undefined)
//             url_ += "EntityChangeType=" + encodeURIComponent("" + entityChangeType) + "&";
//         if (entityId === null)
//             throw new Error("The parameter 'entityId' cannot be null.");
//         else if (entityId !== undefined)
//             url_ += "EntityId=" + encodeURIComponent("" + entityId) + "&";
//         if (entityTypeFullName === null)
//             throw new Error("The parameter 'entityTypeFullName' cannot be null.");
//         else if (entityTypeFullName !== undefined)
//             url_ += "EntityTypeFullName=" + encodeURIComponent("" + entityTypeFullName) + "&";
//         if (startDate === null)
//             throw new Error("The parameter 'startDate' cannot be null.");
//         else if (startDate !== undefined)
//             url_ += "StartDate=" + encodeURIComponent(startDate ? "" + startDate.toJSON() : "") + "&";
//         if (endDate === null)
//             throw new Error("The parameter 'endDate' cannot be null.");
//         else if (endDate !== undefined)
//             url_ += "EndDate=" + encodeURIComponent(endDate ? "" + endDate.toJSON() : "") + "&";
//         if (sorting === null)
//             throw new Error("The parameter 'sorting' cannot be null.");
//         else if (sorting !== undefined)
//             url_ += "Sorting=" + encodeURIComponent("" + sorting) + "&";
//         if (skipCount === null)
//             throw new Error("The parameter 'skipCount' cannot be null.");
//         else if (skipCount !== undefined)
//             url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&";
//         if (maxResultCount === null)
//             throw new Error("The parameter 'maxResultCount' cannot be null.");
//         else if (maxResultCount !== undefined)
//             url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&";
//         url_ = url_.replace(/[?&]$/, "");
//
//         let options_ : any = {
//             observe: "response",
//             responseType: "blob",
//             headers: new HttpHeaders({
//                 "Accept": "text/plain"
//             })
//         };
//
//         return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
//             return this.processEntityChangesGet(response_);
//         })).pipe(_observableCatch((response_: any) => {
//             if (response_ instanceof HttpResponseBase) {
//                 try {
//                     return this.processEntityChangesGet(<any>response_);
//                 } catch (e) {
//                     return <Observable<PagedResultDto_1OfOfEntityChangeDtoAndContractsAnd_0AndCulture_neutralAndPublicKeyToken_null>><any>_observableThrow(e);
//                 }
//             } else
//                 return <Observable<PagedResultDto_1OfOfEntityChangeDtoAndContractsAnd_0AndCulture_neutralAndPublicKeyToken_null>><any>_observableThrow(response_);
//         }));
//     }
//
//     protected processEntityChangesGet(response: HttpResponseBase): Observable<PagedResultDto_1OfOfEntityChangeDtoAndContractsAnd_0AndCulture_neutralAndPublicKeyToken_null> {
//         const status = response.status;
//         const responseBlob =
//             response instanceof HttpResponse ? response.body :
//             (<any>response).error instanceof Blob ? (<any>response).error : undefined;
//
//         let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
//         if (status === 200) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result200: any = null;
//             let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result200 = PagedResultDto_1OfOfEntityChangeDtoAndContractsAnd_0AndCulture_neutralAndPublicKeyToken_null.fromJS(resultData200);
//             return _observableOf(result200);
//             }));
//         } else if (status === 403) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result403: any = null;
//             let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result403 = RemoteServiceErrorResponse.fromJS(resultData403);
//             return throwException("Forbidden", status, _responseText, _headers, result403);
//             }));
//         } else if (status === 401) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result401: any = null;
//             let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result401 = RemoteServiceErrorResponse.fromJS(resultData401);
//             return throwException("Unauthorized", status, _responseText, _headers, result401);
//             }));
//         } else if (status === 400) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result400: any = null;
//             let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result400 = RemoteServiceErrorResponse.fromJS(resultData400);
//             return throwException("Bad Request", status, _responseText, _headers, result400);
//             }));
//         } else if (status === 404) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result404: any = null;
//             let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result404 = RemoteServiceErrorResponse.fromJS(resultData404);
//             return throwException("Not Found", status, _responseText, _headers, result404);
//             }));
//         } else if (status === 501) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result501: any = null;
//             let resultData501 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result501 = RemoteServiceErrorResponse.fromJS(resultData501);
//             return throwException("Server Error", status, _responseText, _headers, result501);
//             }));
//         } else if (status === 500) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result500: any = null;
//             let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result500 = RemoteServiceErrorResponse.fromJS(resultData500);
//             return throwException("Server Error", status, _responseText, _headers, result500);
//             }));
//         } else if (status !== 200 && status !== 204) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             return throwException("An unexpected server error occurred.", status, _responseText, _headers);
//             }));
//         }
//         return _observableOf<PagedResultDto_1OfOfEntityChangeDtoAndContractsAnd_0AndCulture_neutralAndPublicKeyToken_null>(<any>null);
//     }
//
//     /**
//      * @param entityId (optional)
//      * @param entityTypeFullName (optional)
//      * @return Success
//      */
//     entityChangesWithUsername(entityId: string | undefined, entityTypeFullName: string | undefined): Observable<EntityChangeWithUsernameDto[]> {
//         let url_ = this.baseUrl + "/api/audit-logging/audit-logs/entity-changes-with-username?";
//         if (entityId === null)
//             throw new Error("The parameter 'entityId' cannot be null.");
//         else if (entityId !== undefined)
//             url_ += "EntityId=" + encodeURIComponent("" + entityId) + "&";
//         if (entityTypeFullName === null)
//             throw new Error("The parameter 'entityTypeFullName' cannot be null.");
//         else if (entityTypeFullName !== undefined)
//             url_ += "EntityTypeFullName=" + encodeURIComponent("" + entityTypeFullName) + "&";
//         url_ = url_.replace(/[?&]$/, "");
//
//         let options_ : any = {
//             observe: "response",
//             responseType: "blob",
//             headers: new HttpHeaders({
//                 "Accept": "text/plain"
//             })
//         };
//
//         return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
//             return this.processEntityChangesWithUsername(response_);
//         })).pipe(_observableCatch((response_: any) => {
//             if (response_ instanceof HttpResponseBase) {
//                 try {
//                     return this.processEntityChangesWithUsername(<any>response_);
//                 } catch (e) {
//                     return <Observable<EntityChangeWithUsernameDto[]>><any>_observableThrow(e);
//                 }
//             } else
//                 return <Observable<EntityChangeWithUsernameDto[]>><any>_observableThrow(response_);
//         }));
//     }
//
//     protected processEntityChangesWithUsername(response: HttpResponseBase): Observable<EntityChangeWithUsernameDto[]> {
//         const status = response.status;
//         const responseBlob =
//             response instanceof HttpResponse ? response.body :
//             (<any>response).error instanceof Blob ? (<any>response).error : undefined;
//
//         let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
//         if (status === 200) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result200: any = null;
//             let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             if (Array.isArray(resultData200)) {
//                 result200 = [] as any;
//                 for (let item of resultData200)
//                     result200!.push(EntityChangeWithUsernameDto.fromJS(item));
//             }
//             else {
//                 result200 = <any>null;
//             }
//             return _observableOf(result200);
//             }));
//         } else if (status === 403) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result403: any = null;
//             let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result403 = RemoteServiceErrorResponse.fromJS(resultData403);
//             return throwException("Forbidden", status, _responseText, _headers, result403);
//             }));
//         } else if (status === 401) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result401: any = null;
//             let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result401 = RemoteServiceErrorResponse.fromJS(resultData401);
//             return throwException("Unauthorized", status, _responseText, _headers, result401);
//             }));
//         } else if (status === 400) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result400: any = null;
//             let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result400 = RemoteServiceErrorResponse.fromJS(resultData400);
//             return throwException("Bad Request", status, _responseText, _headers, result400);
//             }));
//         } else if (status === 404) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result404: any = null;
//             let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result404 = RemoteServiceErrorResponse.fromJS(resultData404);
//             return throwException("Not Found", status, _responseText, _headers, result404);
//             }));
//         } else if (status === 501) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result501: any = null;
//             let resultData501 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result501 = RemoteServiceErrorResponse.fromJS(resultData501);
//             return throwException("Server Error", status, _responseText, _headers, result501);
//             }));
//         } else if (status === 500) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result500: any = null;
//             let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result500 = RemoteServiceErrorResponse.fromJS(resultData500);
//             return throwException("Server Error", status, _responseText, _headers, result500);
//             }));
//         } else if (status !== 200 && status !== 204) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             return throwException("An unexpected server error occurred.", status, _responseText, _headers);
//             }));
//         }
//         return _observableOf<EntityChangeWithUsernameDto[]>(<any>null);
//     }
//
//     /**
//      * @return Success
//      */
//     entityChangeWithUsername(entityChangeId: string): Observable<EntityChangeWithUsernameDto> {
//         let url_ = this.baseUrl + "/api/audit-logging/audit-logs/entity-change-with-username/{entityChangeId}";
//         if (entityChangeId === undefined || entityChangeId === null)
//             throw new Error("The parameter 'entityChangeId' must be defined.");
//         url_ = url_.replace("{entityChangeId}", encodeURIComponent("" + entityChangeId));
//         url_ = url_.replace(/[?&]$/, "");
//
//         let options_ : any = {
//             observe: "response",
//             responseType: "blob",
//             headers: new HttpHeaders({
//                 "Accept": "text/plain"
//             })
//         };
//
//         return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
//             return this.processEntityChangeWithUsername(response_);
//         })).pipe(_observableCatch((response_: any) => {
//             if (response_ instanceof HttpResponseBase) {
//                 try {
//                     return this.processEntityChangeWithUsername(<any>response_);
//                 } catch (e) {
//                     return <Observable<EntityChangeWithUsernameDto>><any>_observableThrow(e);
//                 }
//             } else
//                 return <Observable<EntityChangeWithUsernameDto>><any>_observableThrow(response_);
//         }));
//     }
//
//     protected processEntityChangeWithUsername(response: HttpResponseBase): Observable<EntityChangeWithUsernameDto> {
//         const status = response.status;
//         const responseBlob =
//             response instanceof HttpResponse ? response.body :
//             (<any>response).error instanceof Blob ? (<any>response).error : undefined;
//
//         let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
//         if (status === 200) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result200: any = null;
//             let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result200 = EntityChangeWithUsernameDto.fromJS(resultData200);
//             return _observableOf(result200);
//             }));
//         } else if (status === 403) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result403: any = null;
//             let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result403 = RemoteServiceErrorResponse.fromJS(resultData403);
//             return throwException("Forbidden", status, _responseText, _headers, result403);
//             }));
//         } else if (status === 401) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result401: any = null;
//             let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result401 = RemoteServiceErrorResponse.fromJS(resultData401);
//             return throwException("Unauthorized", status, _responseText, _headers, result401);
//             }));
//         } else if (status === 400) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result400: any = null;
//             let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result400 = RemoteServiceErrorResponse.fromJS(resultData400);
//             return throwException("Bad Request", status, _responseText, _headers, result400);
//             }));
//         } else if (status === 404) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result404: any = null;
//             let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result404 = RemoteServiceErrorResponse.fromJS(resultData404);
//             return throwException("Not Found", status, _responseText, _headers, result404);
//             }));
//         } else if (status === 501) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result501: any = null;
//             let resultData501 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result501 = RemoteServiceErrorResponse.fromJS(resultData501);
//             return throwException("Server Error", status, _responseText, _headers, result501);
//             }));
//         } else if (status === 500) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result500: any = null;
//             let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result500 = RemoteServiceErrorResponse.fromJS(resultData500);
//             return throwException("Server Error", status, _responseText, _headers, result500);
//             }));
//         } else if (status !== 200 && status !== 204) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             return throwException("An unexpected server error occurred.", status, _responseText, _headers);
//             }));
//         }
//         return _observableOf<EntityChangeWithUsernameDto>(<any>null);
//     }
//
//     /**
//      * @return Success
//      */
//     entityChangesGet(entityChangeId: string): Observable<EntityChangeDto> {
//         let url_ = this.baseUrl + "/api/audit-logging/audit-logs/entity-changes/{entityChangeId}";
//         if (entityChangeId === undefined || entityChangeId === null)
//             throw new Error("The parameter 'entityChangeId' must be defined.");
//         url_ = url_.replace("{entityChangeId}", encodeURIComponent("" + entityChangeId));
//         url_ = url_.replace(/[?&]$/, "");
//
//         let options_ : any = {
//             observe: "response",
//             responseType: "blob",
//             headers: new HttpHeaders({
//                 "Accept": "text/plain"
//             })
//         };
//
//         return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
//             return this.processEntityChangesGet(response_);
//         })).pipe(_observableCatch((response_: any) => {
//             if (response_ instanceof HttpResponseBase) {
//                 try {
//                     return this.processEntityChangesGet(<any>response_);
//                 } catch (e) {
//                     return <Observable<EntityChangeDto>><any>_observableThrow(e);
//                 }
//             } else
//                 return <Observable<EntityChangeDto>><any>_observableThrow(response_);
//         }));
//     }
//
//     protected processEntityChangesGet(response: HttpResponseBase): Observable<EntityChangeDto> {
//         const status = response.status;
//         const responseBlob =
//             response instanceof HttpResponse ? response.body :
//             (<any>response).error instanceof Blob ? (<any>response).error : undefined;
//
//         let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
//         if (status === 200) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result200: any = null;
//             let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result200 = EntityChangeDto.fromJS(resultData200);
//             return _observableOf(result200);
//             }));
//         } else if (status === 403) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result403: any = null;
//             let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result403 = RemoteServiceErrorResponse.fromJS(resultData403);
//             return throwException("Forbidden", status, _responseText, _headers, result403);
//             }));
//         } else if (status === 401) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result401: any = null;
//             let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result401 = RemoteServiceErrorResponse.fromJS(resultData401);
//             return throwException("Unauthorized", status, _responseText, _headers, result401);
//             }));
//         } else if (status === 400) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result400: any = null;
//             let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result400 = RemoteServiceErrorResponse.fromJS(resultData400);
//             return throwException("Bad Request", status, _responseText, _headers, result400);
//             }));
//         } else if (status === 404) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result404: any = null;
//             let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result404 = RemoteServiceErrorResponse.fromJS(resultData404);
//             return throwException("Not Found", status, _responseText, _headers, result404);
//             }));
//         } else if (status === 501) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result501: any = null;
//             let resultData501 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result501 = RemoteServiceErrorResponse.fromJS(resultData501);
//             return throwException("Server Error", status, _responseText, _headers, result501);
//             }));
//         } else if (status === 500) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result500: any = null;
//             let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result500 = RemoteServiceErrorResponse.fromJS(resultData500);
//             return throwException("Server Error", status, _responseText, _headers, result500);
//             }));
//         } else if (status !== 200 && status !== 204) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             return throwException("An unexpected server error occurred.", status, _responseText, _headers);
//             }));
//         }
//         return _observableOf<EntityChangeDto>(<any>null);
//     }
// }
//
// @Injectable({providedIn: 'root'})
// export class IdentityServiceProxy {
//     private http: HttpClient;
//     private baseUrl: string;
//     protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;
//
//     constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
//         this.http = http;
//         this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
//     }
//
//     /**
//      * @param filter (optional)
//      * @param sorting (optional)
//      * @param skipCount (optional)
//      * @param maxResultCount (optional)
//      * @return Success
//      */
//     claimTypesGet(filter: string | undefined, sorting: string | undefined, skipCount: number | undefined, maxResultCount: number | undefined): Observable<PagedResultDto_1OfOfClaimTypeDtoAndContractsAnd_0AndCulture_neutralAndPublicKeyToken_null> {
//         let url_ = this.baseUrl + "/api/identity/claim-types?";
//         if (filter === null)
//             throw new Error("The parameter 'filter' cannot be null.");
//         else if (filter !== undefined)
//             url_ += "Filter=" + encodeURIComponent("" + filter) + "&";
//         if (sorting === null)
//             throw new Error("The parameter 'sorting' cannot be null.");
//         else if (sorting !== undefined)
//             url_ += "Sorting=" + encodeURIComponent("" + sorting) + "&";
//         if (skipCount === null)
//             throw new Error("The parameter 'skipCount' cannot be null.");
//         else if (skipCount !== undefined)
//             url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&";
//         if (maxResultCount === null)
//             throw new Error("The parameter 'maxResultCount' cannot be null.");
//         else if (maxResultCount !== undefined)
//             url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&";
//         url_ = url_.replace(/[?&]$/, "");
//
//         let options_ : any = {
//             observe: "response",
//             responseType: "blob",
//             headers: new HttpHeaders({
//                 "Accept": "text/plain"
//             })
//         };
//
//         return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
//             return this.processClaimTypesGet(response_);
//         })).pipe(_observableCatch((response_: any) => {
//             if (response_ instanceof HttpResponseBase) {
//                 try {
//                     return this.processClaimTypesGet(<any>response_);
//                 } catch (e) {
//                     return <Observable<PagedResultDto_1OfOfClaimTypeDtoAndContractsAnd_0AndCulture_neutralAndPublicKeyToken_null>><any>_observableThrow(e);
//                 }
//             } else
//                 return <Observable<PagedResultDto_1OfOfClaimTypeDtoAndContractsAnd_0AndCulture_neutralAndPublicKeyToken_null>><any>_observableThrow(response_);
//         }));
//     }
//
//     protected processClaimTypesGet(response: HttpResponseBase): Observable<PagedResultDto_1OfOfClaimTypeDtoAndContractsAnd_0AndCulture_neutralAndPublicKeyToken_null> {
//         const status = response.status;
//         const responseBlob =
//             response instanceof HttpResponse ? response.body :
//             (<any>response).error instanceof Blob ? (<any>response).error : undefined;
//
//         let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
//         if (status === 200) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result200: any = null;
//             let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result200 = PagedResultDto_1OfOfClaimTypeDtoAndContractsAnd_0AndCulture_neutralAndPublicKeyToken_null.fromJS(resultData200);
//             return _observableOf(result200);
//             }));
//         } else if (status === 403) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result403: any = null;
//             let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result403 = RemoteServiceErrorResponse.fromJS(resultData403);
//             return throwException("Forbidden", status, _responseText, _headers, result403);
//             }));
//         } else if (status === 401) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result401: any = null;
//             let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result401 = RemoteServiceErrorResponse.fromJS(resultData401);
//             return throwException("Unauthorized", status, _responseText, _headers, result401);
//             }));
//         } else if (status === 400) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result400: any = null;
//             let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result400 = RemoteServiceErrorResponse.fromJS(resultData400);
//             return throwException("Bad Request", status, _responseText, _headers, result400);
//             }));
//         } else if (status === 404) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result404: any = null;
//             let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result404 = RemoteServiceErrorResponse.fromJS(resultData404);
//             return throwException("Not Found", status, _responseText, _headers, result404);
//             }));
//         } else if (status === 501) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result501: any = null;
//             let resultData501 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result501 = RemoteServiceErrorResponse.fromJS(resultData501);
//             return throwException("Server Error", status, _responseText, _headers, result501);
//             }));
//         } else if (status === 500) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result500: any = null;
//             let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result500 = RemoteServiceErrorResponse.fromJS(resultData500);
//             return throwException("Server Error", status, _responseText, _headers, result500);
//             }));
//         } else if (status !== 200 && status !== 204) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             return throwException("An unexpected server error occurred.", status, _responseText, _headers);
//             }));
//         }
//         return _observableOf<PagedResultDto_1OfOfClaimTypeDtoAndContractsAnd_0AndCulture_neutralAndPublicKeyToken_null>(<any>null);
//     }
//
//     /**
//      * @param body (optional)
//      * @return Success
//      */
//     claimTypesPost(body: CreateClaimTypeDto | undefined): Observable<ClaimTypeDto> {
//         let url_ = this.baseUrl + "/api/identity/claim-types";
//         url_ = url_.replace(/[?&]$/, "");
//
//         const content_ = JSON.stringify(body);
//
//         let options_ : any = {
//             body: content_,
//             observe: "response",
//             responseType: "blob",
//             headers: new HttpHeaders({
//                 "Content-Type": "application/json",
//                 "Accept": "text/plain"
//             })
//         };
//
//         return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
//             return this.processClaimTypesPost(response_);
//         })).pipe(_observableCatch((response_: any) => {
//             if (response_ instanceof HttpResponseBase) {
//                 try {
//                     return this.processClaimTypesPost(<any>response_);
//                 } catch (e) {
//                     return <Observable<ClaimTypeDto>><any>_observableThrow(e);
//                 }
//             } else
//                 return <Observable<ClaimTypeDto>><any>_observableThrow(response_);
//         }));
//     }
//
//     protected processClaimTypesPost(response: HttpResponseBase): Observable<ClaimTypeDto> {
//         const status = response.status;
//         const responseBlob =
//             response instanceof HttpResponse ? response.body :
//             (<any>response).error instanceof Blob ? (<any>response).error : undefined;
//
//         let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
//         if (status === 200) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result200: any = null;
//             let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result200 = ClaimTypeDto.fromJS(resultData200);
//             return _observableOf(result200);
//             }));
//         } else if (status === 403) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result403: any = null;
//             let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result403 = RemoteServiceErrorResponse.fromJS(resultData403);
//             return throwException("Forbidden", status, _responseText, _headers, result403);
//             }));
//         } else if (status === 401) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result401: any = null;
//             let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result401 = RemoteServiceErrorResponse.fromJS(resultData401);
//             return throwException("Unauthorized", status, _responseText, _headers, result401);
//             }));
//         } else if (status === 400) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result400: any = null;
//             let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result400 = RemoteServiceErrorResponse.fromJS(resultData400);
//             return throwException("Bad Request", status, _responseText, _headers, result400);
//             }));
//         } else if (status === 404) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result404: any = null;
//             let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result404 = RemoteServiceErrorResponse.fromJS(resultData404);
//             return throwException("Not Found", status, _responseText, _headers, result404);
//             }));
//         } else if (status === 501) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result501: any = null;
//             let resultData501 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result501 = RemoteServiceErrorResponse.fromJS(resultData501);
//             return throwException("Server Error", status, _responseText, _headers, result501);
//             }));
//         } else if (status === 500) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result500: any = null;
//             let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result500 = RemoteServiceErrorResponse.fromJS(resultData500);
//             return throwException("Server Error", status, _responseText, _headers, result500);
//             }));
//         } else if (status !== 200 && status !== 204) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             return throwException("An unexpected server error occurred.", status, _responseText, _headers);
//             }));
//         }
//         return _observableOf<ClaimTypeDto>(<any>null);
//     }
//
//     /**
//      * @return Success
//      */
//     claimTypesGet(id: string): Observable<ClaimTypeDto> {
//         let url_ = this.baseUrl + "/api/identity/claim-types/{id}";
//         if (id === undefined || id === null)
//             throw new Error("The parameter 'id' must be defined.");
//         url_ = url_.replace("{id}", encodeURIComponent("" + id));
//         url_ = url_.replace(/[?&]$/, "");
//
//         let options_ : any = {
//             observe: "response",
//             responseType: "blob",
//             headers: new HttpHeaders({
//                 "Accept": "text/plain"
//             })
//         };
//
//         return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
//             return this.processClaimTypesGet(response_);
//         })).pipe(_observableCatch((response_: any) => {
//             if (response_ instanceof HttpResponseBase) {
//                 try {
//                     return this.processClaimTypesGet(<any>response_);
//                 } catch (e) {
//                     return <Observable<ClaimTypeDto>><any>_observableThrow(e);
//                 }
//             } else
//                 return <Observable<ClaimTypeDto>><any>_observableThrow(response_);
//         }));
//     }
//
//     protected processClaimTypesGet(response: HttpResponseBase): Observable<ClaimTypeDto> {
//         const status = response.status;
//         const responseBlob =
//             response instanceof HttpResponse ? response.body :
//             (<any>response).error instanceof Blob ? (<any>response).error : undefined;
//
//         let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
//         if (status === 200) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result200: any = null;
//             let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result200 = ClaimTypeDto.fromJS(resultData200);
//             return _observableOf(result200);
//             }));
//         } else if (status === 403) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result403: any = null;
//             let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result403 = RemoteServiceErrorResponse.fromJS(resultData403);
//             return throwException("Forbidden", status, _responseText, _headers, result403);
//             }));
//         } else if (status === 401) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result401: any = null;
//             let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result401 = RemoteServiceErrorResponse.fromJS(resultData401);
//             return throwException("Unauthorized", status, _responseText, _headers, result401);
//             }));
//         } else if (status === 400) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result400: any = null;
//             let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result400 = RemoteServiceErrorResponse.fromJS(resultData400);
//             return throwException("Bad Request", status, _responseText, _headers, result400);
//             }));
//         } else if (status === 404) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result404: any = null;
//             let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result404 = RemoteServiceErrorResponse.fromJS(resultData404);
//             return throwException("Not Found", status, _responseText, _headers, result404);
//             }));
//         } else if (status === 501) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result501: any = null;
//             let resultData501 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result501 = RemoteServiceErrorResponse.fromJS(resultData501);
//             return throwException("Server Error", status, _responseText, _headers, result501);
//             }));
//         } else if (status === 500) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result500: any = null;
//             let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result500 = RemoteServiceErrorResponse.fromJS(resultData500);
//             return throwException("Server Error", status, _responseText, _headers, result500);
//             }));
//         } else if (status !== 200 && status !== 204) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             return throwException("An unexpected server error occurred.", status, _responseText, _headers);
//             }));
//         }
//         return _observableOf<ClaimTypeDto>(<any>null);
//     }
//
//     /**
//      * @param body (optional)
//      * @return Success
//      */
//     claimTypesPut(id: string, body: UpdateClaimTypeDto | undefined): Observable<ClaimTypeDto> {
//         let url_ = this.baseUrl + "/api/identity/claim-types/{id}";
//         if (id === undefined || id === null)
//             throw new Error("The parameter 'id' must be defined.");
//         url_ = url_.replace("{id}", encodeURIComponent("" + id));
//         url_ = url_.replace(/[?&]$/, "");
//
//         const content_ = JSON.stringify(body);
//
//         let options_ : any = {
//             body: content_,
//             observe: "response",
//             responseType: "blob",
//             headers: new HttpHeaders({
//                 "Content-Type": "application/json",
//                 "Accept": "text/plain"
//             })
//         };
//
//         return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
//             return this.processClaimTypesPut(response_);
//         })).pipe(_observableCatch((response_: any) => {
//             if (response_ instanceof HttpResponseBase) {
//                 try {
//                     return this.processClaimTypesPut(<any>response_);
//                 } catch (e) {
//                     return <Observable<ClaimTypeDto>><any>_observableThrow(e);
//                 }
//             } else
//                 return <Observable<ClaimTypeDto>><any>_observableThrow(response_);
//         }));
//     }
//
//     protected processClaimTypesPut(response: HttpResponseBase): Observable<ClaimTypeDto> {
//         const status = response.status;
//         const responseBlob =
//             response instanceof HttpResponse ? response.body :
//             (<any>response).error instanceof Blob ? (<any>response).error : undefined;
//
//         let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
//         if (status === 200) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result200: any = null;
//             let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result200 = ClaimTypeDto.fromJS(resultData200);
//             return _observableOf(result200);
//             }));
//         } else if (status === 403) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result403: any = null;
//             let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result403 = RemoteServiceErrorResponse.fromJS(resultData403);
//             return throwException("Forbidden", status, _responseText, _headers, result403);
//             }));
//         } else if (status === 401) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result401: any = null;
//             let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result401 = RemoteServiceErrorResponse.fromJS(resultData401);
//             return throwException("Unauthorized", status, _responseText, _headers, result401);
//             }));
//         } else if (status === 400) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result400: any = null;
//             let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result400 = RemoteServiceErrorResponse.fromJS(resultData400);
//             return throwException("Bad Request", status, _responseText, _headers, result400);
//             }));
//         } else if (status === 404) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result404: any = null;
//             let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result404 = RemoteServiceErrorResponse.fromJS(resultData404);
//             return throwException("Not Found", status, _responseText, _headers, result404);
//             }));
//         } else if (status === 501) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result501: any = null;
//             let resultData501 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result501 = RemoteServiceErrorResponse.fromJS(resultData501);
//             return throwException("Server Error", status, _responseText, _headers, result501);
//             }));
//         } else if (status === 500) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result500: any = null;
//             let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result500 = RemoteServiceErrorResponse.fromJS(resultData500);
//             return throwException("Server Error", status, _responseText, _headers, result500);
//             }));
//         } else if (status !== 200 && status !== 204) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             return throwException("An unexpected server error occurred.", status, _responseText, _headers);
//             }));
//         }
//         return _observableOf<ClaimTypeDto>(<any>null);
//     }
//
//     /**
//      * @return Success
//      */
//     claimTypesDelete(id: string): Observable<void> {
//         let url_ = this.baseUrl + "/api/identity/claim-types/{id}";
//         if (id === undefined || id === null)
//             throw new Error("The parameter 'id' must be defined.");
//         url_ = url_.replace("{id}", encodeURIComponent("" + id));
//         url_ = url_.replace(/[?&]$/, "");
//
//         let options_ : any = {
//             observe: "response",
//             responseType: "blob",
//             headers: new HttpHeaders({
//             })
//         };
//
//         return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
//             return this.processClaimTypesDelete(response_);
//         })).pipe(_observableCatch((response_: any) => {
//             if (response_ instanceof HttpResponseBase) {
//                 try {
//                     return this.processClaimTypesDelete(<any>response_);
//                 } catch (e) {
//                     return <Observable<void>><any>_observableThrow(e);
//                 }
//             } else
//                 return <Observable<void>><any>_observableThrow(response_);
//         }));
//     }
//
//     protected processClaimTypesDelete(response: HttpResponseBase): Observable<void> {
//         const status = response.status;
//         const responseBlob =
//             response instanceof HttpResponse ? response.body :
//             (<any>response).error instanceof Blob ? (<any>response).error : undefined;
//
//         let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
//         if (status === 200) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             return _observableOf<void>(<any>null);
//             }));
//         } else if (status === 403) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result403: any = null;
//             let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result403 = RemoteServiceErrorResponse.fromJS(resultData403);
//             return throwException("Forbidden", status, _responseText, _headers, result403);
//             }));
//         } else if (status === 401) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result401: any = null;
//             let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result401 = RemoteServiceErrorResponse.fromJS(resultData401);
//             return throwException("Unauthorized", status, _responseText, _headers, result401);
//             }));
//         } else if (status === 400) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result400: any = null;
//             let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result400 = RemoteServiceErrorResponse.fromJS(resultData400);
//             return throwException("Bad Request", status, _responseText, _headers, result400);
//             }));
//         } else if (status === 404) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result404: any = null;
//             let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result404 = RemoteServiceErrorResponse.fromJS(resultData404);
//             return throwException("Not Found", status, _responseText, _headers, result404);
//             }));
//         } else if (status === 501) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result501: any = null;
//             let resultData501 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result501 = RemoteServiceErrorResponse.fromJS(resultData501);
//             return throwException("Server Error", status, _responseText, _headers, result501);
//             }));
//         } else if (status === 500) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result500: any = null;
//             let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result500 = RemoteServiceErrorResponse.fromJS(resultData500);
//             return throwException("Server Error", status, _responseText, _headers, result500);
//             }));
//         } else if (status !== 200 && status !== 204) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             return throwException("An unexpected server error occurred.", status, _responseText, _headers);
//             }));
//         }
//         return _observableOf<void>(<any>null);
//     }
//
//     /**
//      * @param body (optional)
//      * @return Success
//      */
//     organizationUnitsPost(body: OrganizationUnitCreateDto | undefined): Observable<OrganizationUnitWithDetailsDto> {
//         let url_ = this.baseUrl + "/api/identity/organization-units";
//         url_ = url_.replace(/[?&]$/, "");
//
//         const content_ = JSON.stringify(body);
//
//         let options_ : any = {
//             body: content_,
//             observe: "response",
//             responseType: "blob",
//             headers: new HttpHeaders({
//                 "Content-Type": "application/json",
//                 "Accept": "text/plain"
//             })
//         };
//
//         return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
//             return this.processOrganizationUnitsPost(response_);
//         })).pipe(_observableCatch((response_: any) => {
//             if (response_ instanceof HttpResponseBase) {
//                 try {
//                     return this.processOrganizationUnitsPost(<any>response_);
//                 } catch (e) {
//                     return <Observable<OrganizationUnitWithDetailsDto>><any>_observableThrow(e);
//                 }
//             } else
//                 return <Observable<OrganizationUnitWithDetailsDto>><any>_observableThrow(response_);
//         }));
//     }
//
//     protected processOrganizationUnitsPost(response: HttpResponseBase): Observable<OrganizationUnitWithDetailsDto> {
//         const status = response.status;
//         const responseBlob =
//             response instanceof HttpResponse ? response.body :
//             (<any>response).error instanceof Blob ? (<any>response).error : undefined;
//
//         let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
//         if (status === 200) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result200: any = null;
//             let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result200 = OrganizationUnitWithDetailsDto.fromJS(resultData200);
//             return _observableOf(result200);
//             }));
//         } else if (status === 403) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result403: any = null;
//             let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result403 = RemoteServiceErrorResponse.fromJS(resultData403);
//             return throwException("Forbidden", status, _responseText, _headers, result403);
//             }));
//         } else if (status === 401) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result401: any = null;
//             let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result401 = RemoteServiceErrorResponse.fromJS(resultData401);
//             return throwException("Unauthorized", status, _responseText, _headers, result401);
//             }));
//         } else if (status === 400) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result400: any = null;
//             let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result400 = RemoteServiceErrorResponse.fromJS(resultData400);
//             return throwException("Bad Request", status, _responseText, _headers, result400);
//             }));
//         } else if (status === 404) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result404: any = null;
//             let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result404 = RemoteServiceErrorResponse.fromJS(resultData404);
//             return throwException("Not Found", status, _responseText, _headers, result404);
//             }));
//         } else if (status === 501) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result501: any = null;
//             let resultData501 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result501 = RemoteServiceErrorResponse.fromJS(resultData501);
//             return throwException("Server Error", status, _responseText, _headers, result501);
//             }));
//         } else if (status === 500) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result500: any = null;
//             let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result500 = RemoteServiceErrorResponse.fromJS(resultData500);
//             return throwException("Server Error", status, _responseText, _headers, result500);
//             }));
//         } else if (status !== 200 && status !== 204) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             return throwException("An unexpected server error occurred.", status, _responseText, _headers);
//             }));
//         }
//         return _observableOf<OrganizationUnitWithDetailsDto>(<any>null);
//     }
//
//     /**
//      * @param id (optional)
//      * @return Success
//      */
//     organizationUnitsDelete(id: string | undefined): Observable<void> {
//         let url_ = this.baseUrl + "/api/identity/organization-units?";
//         if (id === null)
//             throw new Error("The parameter 'id' cannot be null.");
//         else if (id !== undefined)
//             url_ += "id=" + encodeURIComponent("" + id) + "&";
//         url_ = url_.replace(/[?&]$/, "");
//
//         let options_ : any = {
//             observe: "response",
//             responseType: "blob",
//             headers: new HttpHeaders({
//             })
//         };
//
//         return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
//             return this.processOrganizationUnitsDelete(response_);
//         })).pipe(_observableCatch((response_: any) => {
//             if (response_ instanceof HttpResponseBase) {
//                 try {
//                     return this.processOrganizationUnitsDelete(<any>response_);
//                 } catch (e) {
//                     return <Observable<void>><any>_observableThrow(e);
//                 }
//             } else
//                 return <Observable<void>><any>_observableThrow(response_);
//         }));
//     }
//
//     protected processOrganizationUnitsDelete(response: HttpResponseBase): Observable<void> {
//         const status = response.status;
//         const responseBlob =
//             response instanceof HttpResponse ? response.body :
//             (<any>response).error instanceof Blob ? (<any>response).error : undefined;
//
//         let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
//         if (status === 200) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             return _observableOf<void>(<any>null);
//             }));
//         } else if (status === 403) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result403: any = null;
//             let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result403 = RemoteServiceErrorResponse.fromJS(resultData403);
//             return throwException("Forbidden", status, _responseText, _headers, result403);
//             }));
//         } else if (status === 401) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result401: any = null;
//             let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result401 = RemoteServiceErrorResponse.fromJS(resultData401);
//             return throwException("Unauthorized", status, _responseText, _headers, result401);
//             }));
//         } else if (status === 400) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result400: any = null;
//             let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result400 = RemoteServiceErrorResponse.fromJS(resultData400);
//             return throwException("Bad Request", status, _responseText, _headers, result400);
//             }));
//         } else if (status === 404) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result404: any = null;
//             let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result404 = RemoteServiceErrorResponse.fromJS(resultData404);
//             return throwException("Not Found", status, _responseText, _headers, result404);
//             }));
//         } else if (status === 501) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result501: any = null;
//             let resultData501 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result501 = RemoteServiceErrorResponse.fromJS(resultData501);
//             return throwException("Server Error", status, _responseText, _headers, result501);
//             }));
//         } else if (status === 500) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result500: any = null;
//             let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result500 = RemoteServiceErrorResponse.fromJS(resultData500);
//             return throwException("Server Error", status, _responseText, _headers, result500);
//             }));
//         } else if (status !== 200 && status !== 204) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             return throwException("An unexpected server error occurred.", status, _responseText, _headers);
//             }));
//         }
//         return _observableOf<void>(<any>null);
//     }
//
//     /**
//      * @param filter (optional)
//      * @param sorting (optional)
//      * @param skipCount (optional)
//      * @param maxResultCount (optional)
//      * @return Success
//      */
//     organizationUnitsGet(filter: string | undefined, sorting: string | undefined, skipCount: number | undefined, maxResultCount: number | undefined): Observable<PagedResultDto_1OfOfOrganizationUnitWithDetailsDtoAndContractsAnd_0AndCulture_neutralAndPublicKeyToken_null> {
//         let url_ = this.baseUrl + "/api/identity/organization-units?";
//         if (filter === null)
//             throw new Error("The parameter 'filter' cannot be null.");
//         else if (filter !== undefined)
//             url_ += "Filter=" + encodeURIComponent("" + filter) + "&";
//         if (sorting === null)
//             throw new Error("The parameter 'sorting' cannot be null.");
//         else if (sorting !== undefined)
//             url_ += "Sorting=" + encodeURIComponent("" + sorting) + "&";
//         if (skipCount === null)
//             throw new Error("The parameter 'skipCount' cannot be null.");
//         else if (skipCount !== undefined)
//             url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&";
//         if (maxResultCount === null)
//             throw new Error("The parameter 'maxResultCount' cannot be null.");
//         else if (maxResultCount !== undefined)
//             url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&";
//         url_ = url_.replace(/[?&]$/, "");
//
//         let options_ : any = {
//             observe: "response",
//             responseType: "blob",
//             headers: new HttpHeaders({
//                 "Accept": "text/plain"
//             })
//         };
//
//         return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
//             return this.processOrganizationUnitsGet(response_);
//         })).pipe(_observableCatch((response_: any) => {
//             if (response_ instanceof HttpResponseBase) {
//                 try {
//                     return this.processOrganizationUnitsGet(<any>response_);
//                 } catch (e) {
//                     return <Observable<PagedResultDto_1OfOfOrganizationUnitWithDetailsDtoAndContractsAnd_0AndCulture_neutralAndPublicKeyToken_null>><any>_observableThrow(e);
//                 }
//             } else
//                 return <Observable<PagedResultDto_1OfOfOrganizationUnitWithDetailsDtoAndContractsAnd_0AndCulture_neutralAndPublicKeyToken_null>><any>_observableThrow(response_);
//         }));
//     }
//
//     protected processOrganizationUnitsGet(response: HttpResponseBase): Observable<PagedResultDto_1OfOfOrganizationUnitWithDetailsDtoAndContractsAnd_0AndCulture_neutralAndPublicKeyToken_null> {
//         const status = response.status;
//         const responseBlob =
//             response instanceof HttpResponse ? response.body :
//             (<any>response).error instanceof Blob ? (<any>response).error : undefined;
//
//         let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
//         if (status === 200) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result200: any = null;
//             let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result200 = PagedResultDto_1OfOfOrganizationUnitWithDetailsDtoAndContractsAnd_0AndCulture_neutralAndPublicKeyToken_null.fromJS(resultData200);
//             return _observableOf(result200);
//             }));
//         } else if (status === 403) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result403: any = null;
//             let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result403 = RemoteServiceErrorResponse.fromJS(resultData403);
//             return throwException("Forbidden", status, _responseText, _headers, result403);
//             }));
//         } else if (status === 401) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result401: any = null;
//             let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result401 = RemoteServiceErrorResponse.fromJS(resultData401);
//             return throwException("Unauthorized", status, _responseText, _headers, result401);
//             }));
//         } else if (status === 400) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result400: any = null;
//             let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result400 = RemoteServiceErrorResponse.fromJS(resultData400);
//             return throwException("Bad Request", status, _responseText, _headers, result400);
//             }));
//         } else if (status === 404) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result404: any = null;
//             let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result404 = RemoteServiceErrorResponse.fromJS(resultData404);
//             return throwException("Not Found", status, _responseText, _headers, result404);
//             }));
//         } else if (status === 501) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result501: any = null;
//             let resultData501 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result501 = RemoteServiceErrorResponse.fromJS(resultData501);
//             return throwException("Server Error", status, _responseText, _headers, result501);
//             }));
//         } else if (status === 500) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result500: any = null;
//             let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result500 = RemoteServiceErrorResponse.fromJS(resultData500);
//             return throwException("Server Error", status, _responseText, _headers, result500);
//             }));
//         } else if (status !== 200 && status !== 204) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             return throwException("An unexpected server error occurred.", status, _responseText, _headers);
//             }));
//         }
//         return _observableOf<PagedResultDto_1OfOfOrganizationUnitWithDetailsDtoAndContractsAnd_0AndCulture_neutralAndPublicKeyToken_null>(<any>null);
//     }
//
//     /**
//      * @return Success
//      */
//     organizationUnitsGet(id: string): Observable<OrganizationUnitWithDetailsDto> {
//         let url_ = this.baseUrl + "/api/identity/organization-units/{id}";
//         if (id === undefined || id === null)
//             throw new Error("The parameter 'id' must be defined.");
//         url_ = url_.replace("{id}", encodeURIComponent("" + id));
//         url_ = url_.replace(/[?&]$/, "");
//
//         let options_ : any = {
//             observe: "response",
//             responseType: "blob",
//             headers: new HttpHeaders({
//                 "Accept": "text/plain"
//             })
//         };
//
//         return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
//             return this.processOrganizationUnitsGet(response_);
//         })).pipe(_observableCatch((response_: any) => {
//             if (response_ instanceof HttpResponseBase) {
//                 try {
//                     return this.processOrganizationUnitsGet(<any>response_);
//                 } catch (e) {
//                     return <Observable<OrganizationUnitWithDetailsDto>><any>_observableThrow(e);
//                 }
//             } else
//                 return <Observable<OrganizationUnitWithDetailsDto>><any>_observableThrow(response_);
//         }));
//     }
//
//     protected processOrganizationUnitsGet(response: HttpResponseBase): Observable<OrganizationUnitWithDetailsDto> {
//         const status = response.status;
//         const responseBlob =
//             response instanceof HttpResponse ? response.body :
//             (<any>response).error instanceof Blob ? (<any>response).error : undefined;
//
//         let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
//         if (status === 200) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result200: any = null;
//             let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result200 = OrganizationUnitWithDetailsDto.fromJS(resultData200);
//             return _observableOf(result200);
//             }));
//         } else if (status === 403) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result403: any = null;
//             let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result403 = RemoteServiceErrorResponse.fromJS(resultData403);
//             return throwException("Forbidden", status, _responseText, _headers, result403);
//             }));
//         } else if (status === 401) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result401: any = null;
//             let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result401 = RemoteServiceErrorResponse.fromJS(resultData401);
//             return throwException("Unauthorized", status, _responseText, _headers, result401);
//             }));
//         } else if (status === 400) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result400: any = null;
//             let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result400 = RemoteServiceErrorResponse.fromJS(resultData400);
//             return throwException("Bad Request", status, _responseText, _headers, result400);
//             }));
//         } else if (status === 404) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result404: any = null;
//             let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result404 = RemoteServiceErrorResponse.fromJS(resultData404);
//             return throwException("Not Found", status, _responseText, _headers, result404);
//             }));
//         } else if (status === 501) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result501: any = null;
//             let resultData501 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result501 = RemoteServiceErrorResponse.fromJS(resultData501);
//             return throwException("Server Error", status, _responseText, _headers, result501);
//             }));
//         } else if (status === 500) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result500: any = null;
//             let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result500 = RemoteServiceErrorResponse.fromJS(resultData500);
//             return throwException("Server Error", status, _responseText, _headers, result500);
//             }));
//         } else if (status !== 200 && status !== 204) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             return throwException("An unexpected server error occurred.", status, _responseText, _headers);
//             }));
//         }
//         return _observableOf<OrganizationUnitWithDetailsDto>(<any>null);
//     }
//
//     /**
//      * @param body (optional)
//      * @return Success
//      */
//     organizationUnitsPut(id: string, body: OrganizationUnitUpdateDto | undefined): Observable<OrganizationUnitWithDetailsDto> {
//         let url_ = this.baseUrl + "/api/identity/organization-units/{id}";
//         if (id === undefined || id === null)
//             throw new Error("The parameter 'id' must be defined.");
//         url_ = url_.replace("{id}", encodeURIComponent("" + id));
//         url_ = url_.replace(/[?&]$/, "");
//
//         const content_ = JSON.stringify(body);
//
//         let options_ : any = {
//             body: content_,
//             observe: "response",
//             responseType: "blob",
//             headers: new HttpHeaders({
//                 "Content-Type": "application/json",
//                 "Accept": "text/plain"
//             })
//         };
//
//         return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
//             return this.processOrganizationUnitsPut(response_);
//         })).pipe(_observableCatch((response_: any) => {
//             if (response_ instanceof HttpResponseBase) {
//                 try {
//                     return this.processOrganizationUnitsPut(<any>response_);
//                 } catch (e) {
//                     return <Observable<OrganizationUnitWithDetailsDto>><any>_observableThrow(e);
//                 }
//             } else
//                 return <Observable<OrganizationUnitWithDetailsDto>><any>_observableThrow(response_);
//         }));
//     }
//
//     protected processOrganizationUnitsPut(response: HttpResponseBase): Observable<OrganizationUnitWithDetailsDto> {
//         const status = response.status;
//         const responseBlob =
//             response instanceof HttpResponse ? response.body :
//             (<any>response).error instanceof Blob ? (<any>response).error : undefined;
//
//         let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
//         if (status === 200) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result200: any = null;
//             let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result200 = OrganizationUnitWithDetailsDto.fromJS(resultData200);
//             return _observableOf(result200);
//             }));
//         } else if (status === 403) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result403: any = null;
//             let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result403 = RemoteServiceErrorResponse.fromJS(resultData403);
//             return throwException("Forbidden", status, _responseText, _headers, result403);
//             }));
//         } else if (status === 401) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result401: any = null;
//             let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result401 = RemoteServiceErrorResponse.fromJS(resultData401);
//             return throwException("Unauthorized", status, _responseText, _headers, result401);
//             }));
//         } else if (status === 400) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result400: any = null;
//             let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result400 = RemoteServiceErrorResponse.fromJS(resultData400);
//             return throwException("Bad Request", status, _responseText, _headers, result400);
//             }));
//         } else if (status === 404) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result404: any = null;
//             let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result404 = RemoteServiceErrorResponse.fromJS(resultData404);
//             return throwException("Not Found", status, _responseText, _headers, result404);
//             }));
//         } else if (status === 501) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result501: any = null;
//             let resultData501 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result501 = RemoteServiceErrorResponse.fromJS(resultData501);
//             return throwException("Server Error", status, _responseText, _headers, result501);
//             }));
//         } else if (status === 500) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result500: any = null;
//             let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result500 = RemoteServiceErrorResponse.fromJS(resultData500);
//             return throwException("Server Error", status, _responseText, _headers, result500);
//             }));
//         } else if (status !== 200 && status !== 204) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             return throwException("An unexpected server error occurred.", status, _responseText, _headers);
//             }));
//         }
//         return _observableOf<OrganizationUnitWithDetailsDto>(<any>null);
//     }
//
//     /**
//      * @return Success
//      */
//     myProfileGet(): Observable<ProfileDto> {
//         let url_ = this.baseUrl + "/api/identity/my-profile";
//         url_ = url_.replace(/[?&]$/, "");
//
//         let options_ : any = {
//             observe: "response",
//             responseType: "blob",
//             headers: new HttpHeaders({
//                 "Accept": "text/plain"
//             })
//         };
//
//         return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
//             return this.processMyProfileGet(response_);
//         })).pipe(_observableCatch((response_: any) => {
//             if (response_ instanceof HttpResponseBase) {
//                 try {
//                     return this.processMyProfileGet(<any>response_);
//                 } catch (e) {
//                     return <Observable<ProfileDto>><any>_observableThrow(e);
//                 }
//             } else
//                 return <Observable<ProfileDto>><any>_observableThrow(response_);
//         }));
//     }
//
//     protected processMyProfileGet(response: HttpResponseBase): Observable<ProfileDto> {
//         const status = response.status;
//         const responseBlob =
//             response instanceof HttpResponse ? response.body :
//             (<any>response).error instanceof Blob ? (<any>response).error : undefined;
//
//         let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
//         if (status === 200) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result200: any = null;
//             let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result200 = ProfileDto.fromJS(resultData200);
//             return _observableOf(result200);
//             }));
//         } else if (status === 403) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result403: any = null;
//             let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result403 = RemoteServiceErrorResponse.fromJS(resultData403);
//             return throwException("Forbidden", status, _responseText, _headers, result403);
//             }));
//         } else if (status === 401) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result401: any = null;
//             let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result401 = RemoteServiceErrorResponse.fromJS(resultData401);
//             return throwException("Unauthorized", status, _responseText, _headers, result401);
//             }));
//         } else if (status === 400) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result400: any = null;
//             let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result400 = RemoteServiceErrorResponse.fromJS(resultData400);
//             return throwException("Bad Request", status, _responseText, _headers, result400);
//             }));
//         } else if (status === 404) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result404: any = null;
//             let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result404 = RemoteServiceErrorResponse.fromJS(resultData404);
//             return throwException("Not Found", status, _responseText, _headers, result404);
//             }));
//         } else if (status === 501) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result501: any = null;
//             let resultData501 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result501 = RemoteServiceErrorResponse.fromJS(resultData501);
//             return throwException("Server Error", status, _responseText, _headers, result501);
//             }));
//         } else if (status === 500) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result500: any = null;
//             let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result500 = RemoteServiceErrorResponse.fromJS(resultData500);
//             return throwException("Server Error", status, _responseText, _headers, result500);
//             }));
//         } else if (status !== 200 && status !== 204) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             return throwException("An unexpected server error occurred.", status, _responseText, _headers);
//             }));
//         }
//         return _observableOf<ProfileDto>(<any>null);
//     }
//
//     /**
//      * @param body (optional)
//      * @return Success
//      */
//     myProfilePut(body: UpdateProfileDto | undefined): Observable<ProfileDto> {
//         let url_ = this.baseUrl + "/api/identity/my-profile";
//         url_ = url_.replace(/[?&]$/, "");
//
//         const content_ = JSON.stringify(body);
//
//         let options_ : any = {
//             body: content_,
//             observe: "response",
//             responseType: "blob",
//             headers: new HttpHeaders({
//                 "Content-Type": "application/json",
//                 "Accept": "text/plain"
//             })
//         };
//
//         return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
//             return this.processMyProfilePut(response_);
//         })).pipe(_observableCatch((response_: any) => {
//             if (response_ instanceof HttpResponseBase) {
//                 try {
//                     return this.processMyProfilePut(<any>response_);
//                 } catch (e) {
//                     return <Observable<ProfileDto>><any>_observableThrow(e);
//                 }
//             } else
//                 return <Observable<ProfileDto>><any>_observableThrow(response_);
//         }));
//     }
//
//     protected processMyProfilePut(response: HttpResponseBase): Observable<ProfileDto> {
//         const status = response.status;
//         const responseBlob =
//             response instanceof HttpResponse ? response.body :
//             (<any>response).error instanceof Blob ? (<any>response).error : undefined;
//
//         let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
//         if (status === 200) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result200: any = null;
//             let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result200 = ProfileDto.fromJS(resultData200);
//             return _observableOf(result200);
//             }));
//         } else if (status === 403) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result403: any = null;
//             let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result403 = RemoteServiceErrorResponse.fromJS(resultData403);
//             return throwException("Forbidden", status, _responseText, _headers, result403);
//             }));
//         } else if (status === 401) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result401: any = null;
//             let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result401 = RemoteServiceErrorResponse.fromJS(resultData401);
//             return throwException("Unauthorized", status, _responseText, _headers, result401);
//             }));
//         } else if (status === 400) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result400: any = null;
//             let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result400 = RemoteServiceErrorResponse.fromJS(resultData400);
//             return throwException("Bad Request", status, _responseText, _headers, result400);
//             }));
//         } else if (status === 404) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result404: any = null;
//             let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result404 = RemoteServiceErrorResponse.fromJS(resultData404);
//             return throwException("Not Found", status, _responseText, _headers, result404);
//             }));
//         } else if (status === 501) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result501: any = null;
//             let resultData501 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result501 = RemoteServiceErrorResponse.fromJS(resultData501);
//             return throwException("Server Error", status, _responseText, _headers, result501);
//             }));
//         } else if (status === 500) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result500: any = null;
//             let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result500 = RemoteServiceErrorResponse.fromJS(resultData500);
//             return throwException("Server Error", status, _responseText, _headers, result500);
//             }));
//         } else if (status !== 200 && status !== 204) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             return throwException("An unexpected server error occurred.", status, _responseText, _headers);
//             }));
//         }
//         return _observableOf<ProfileDto>(<any>null);
//     }
//
//     /**
//      * @return Success
//      */
//     rolesGet(id: string): Observable<IdentityRoleDto> {
//         let url_ = this.baseUrl + "/api/identity/roles/{id}";
//         if (id === undefined || id === null)
//             throw new Error("The parameter 'id' must be defined.");
//         url_ = url_.replace("{id}", encodeURIComponent("" + id));
//         url_ = url_.replace(/[?&]$/, "");
//
//         let options_ : any = {
//             observe: "response",
//             responseType: "blob",
//             headers: new HttpHeaders({
//                 "Accept": "text/plain"
//             })
//         };
//
//         return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
//             return this.processRolesGet(response_);
//         })).pipe(_observableCatch((response_: any) => {
//             if (response_ instanceof HttpResponseBase) {
//                 try {
//                     return this.processRolesGet(<any>response_);
//                 } catch (e) {
//                     return <Observable<IdentityRoleDto>><any>_observableThrow(e);
//                 }
//             } else
//                 return <Observable<IdentityRoleDto>><any>_observableThrow(response_);
//         }));
//     }
//
//     protected processRolesGet(response: HttpResponseBase): Observable<IdentityRoleDto> {
//         const status = response.status;
//         const responseBlob =
//             response instanceof HttpResponse ? response.body :
//             (<any>response).error instanceof Blob ? (<any>response).error : undefined;
//
//         let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
//         if (status === 200) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result200: any = null;
//             let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result200 = IdentityRoleDto.fromJS(resultData200);
//             return _observableOf(result200);
//             }));
//         } else if (status === 403) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result403: any = null;
//             let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result403 = RemoteServiceErrorResponse.fromJS(resultData403);
//             return throwException("Forbidden", status, _responseText, _headers, result403);
//             }));
//         } else if (status === 401) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result401: any = null;
//             let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result401 = RemoteServiceErrorResponse.fromJS(resultData401);
//             return throwException("Unauthorized", status, _responseText, _headers, result401);
//             }));
//         } else if (status === 400) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result400: any = null;
//             let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result400 = RemoteServiceErrorResponse.fromJS(resultData400);
//             return throwException("Bad Request", status, _responseText, _headers, result400);
//             }));
//         } else if (status === 404) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result404: any = null;
//             let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result404 = RemoteServiceErrorResponse.fromJS(resultData404);
//             return throwException("Not Found", status, _responseText, _headers, result404);
//             }));
//         } else if (status === 501) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result501: any = null;
//             let resultData501 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result501 = RemoteServiceErrorResponse.fromJS(resultData501);
//             return throwException("Server Error", status, _responseText, _headers, result501);
//             }));
//         } else if (status === 500) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result500: any = null;
//             let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result500 = RemoteServiceErrorResponse.fromJS(resultData500);
//             return throwException("Server Error", status, _responseText, _headers, result500);
//             }));
//         } else if (status !== 200 && status !== 204) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             return throwException("An unexpected server error occurred.", status, _responseText, _headers);
//             }));
//         }
//         return _observableOf<IdentityRoleDto>(<any>null);
//     }
//
//     /**
//      * @param body (optional)
//      * @return Success
//      */
//     rolesPut(id: string, body: IdentityRoleUpdateDto | undefined): Observable<IdentityRoleDto> {
//         let url_ = this.baseUrl + "/api/identity/roles/{id}";
//         if (id === undefined || id === null)
//             throw new Error("The parameter 'id' must be defined.");
//         url_ = url_.replace("{id}", encodeURIComponent("" + id));
//         url_ = url_.replace(/[?&]$/, "");
//
//         const content_ = JSON.stringify(body);
//
//         let options_ : any = {
//             body: content_,
//             observe: "response",
//             responseType: "blob",
//             headers: new HttpHeaders({
//                 "Content-Type": "application/json",
//                 "Accept": "text/plain"
//             })
//         };
//
//         return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
//             return this.processRolesPut(response_);
//         })).pipe(_observableCatch((response_: any) => {
//             if (response_ instanceof HttpResponseBase) {
//                 try {
//                     return this.processRolesPut(<any>response_);
//                 } catch (e) {
//                     return <Observable<IdentityRoleDto>><any>_observableThrow(e);
//                 }
//             } else
//                 return <Observable<IdentityRoleDto>><any>_observableThrow(response_);
//         }));
//     }
//
//     protected processRolesPut(response: HttpResponseBase): Observable<IdentityRoleDto> {
//         const status = response.status;
//         const responseBlob =
//             response instanceof HttpResponse ? response.body :
//             (<any>response).error instanceof Blob ? (<any>response).error : undefined;
//
//         let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
//         if (status === 200) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result200: any = null;
//             let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result200 = IdentityRoleDto.fromJS(resultData200);
//             return _observableOf(result200);
//             }));
//         } else if (status === 403) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result403: any = null;
//             let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result403 = RemoteServiceErrorResponse.fromJS(resultData403);
//             return throwException("Forbidden", status, _responseText, _headers, result403);
//             }));
//         } else if (status === 401) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result401: any = null;
//             let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result401 = RemoteServiceErrorResponse.fromJS(resultData401);
//             return throwException("Unauthorized", status, _responseText, _headers, result401);
//             }));
//         } else if (status === 400) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result400: any = null;
//             let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result400 = RemoteServiceErrorResponse.fromJS(resultData400);
//             return throwException("Bad Request", status, _responseText, _headers, result400);
//             }));
//         } else if (status === 404) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result404: any = null;
//             let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result404 = RemoteServiceErrorResponse.fromJS(resultData404);
//             return throwException("Not Found", status, _responseText, _headers, result404);
//             }));
//         } else if (status === 501) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result501: any = null;
//             let resultData501 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result501 = RemoteServiceErrorResponse.fromJS(resultData501);
//             return throwException("Server Error", status, _responseText, _headers, result501);
//             }));
//         } else if (status === 500) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result500: any = null;
//             let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result500 = RemoteServiceErrorResponse.fromJS(resultData500);
//             return throwException("Server Error", status, _responseText, _headers, result500);
//             }));
//         } else if (status !== 200 && status !== 204) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             return throwException("An unexpected server error occurred.", status, _responseText, _headers);
//             }));
//         }
//         return _observableOf<IdentityRoleDto>(<any>null);
//     }
//
//     /**
//      * @return Success
//      */
//     rolesDelete(id: string): Observable<void> {
//         let url_ = this.baseUrl + "/api/identity/roles/{id}";
//         if (id === undefined || id === null)
//             throw new Error("The parameter 'id' must be defined.");
//         url_ = url_.replace("{id}", encodeURIComponent("" + id));
//         url_ = url_.replace(/[?&]$/, "");
//
//         let options_ : any = {
//             observe: "response",
//             responseType: "blob",
//             headers: new HttpHeaders({
//             })
//         };
//
//         return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
//             return this.processRolesDelete(response_);
//         })).pipe(_observableCatch((response_: any) => {
//             if (response_ instanceof HttpResponseBase) {
//                 try {
//                     return this.processRolesDelete(<any>response_);
//                 } catch (e) {
//                     return <Observable<void>><any>_observableThrow(e);
//                 }
//             } else
//                 return <Observable<void>><any>_observableThrow(response_);
//         }));
//     }
//
//     protected processRolesDelete(response: HttpResponseBase): Observable<void> {
//         const status = response.status;
//         const responseBlob =
//             response instanceof HttpResponse ? response.body :
//             (<any>response).error instanceof Blob ? (<any>response).error : undefined;
//
//         let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
//         if (status === 200) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             return _observableOf<void>(<any>null);
//             }));
//         } else if (status === 403) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result403: any = null;
//             let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result403 = RemoteServiceErrorResponse.fromJS(resultData403);
//             return throwException("Forbidden", status, _responseText, _headers, result403);
//             }));
//         } else if (status === 401) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result401: any = null;
//             let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result401 = RemoteServiceErrorResponse.fromJS(resultData401);
//             return throwException("Unauthorized", status, _responseText, _headers, result401);
//             }));
//         } else if (status === 400) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result400: any = null;
//             let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result400 = RemoteServiceErrorResponse.fromJS(resultData400);
//             return throwException("Bad Request", status, _responseText, _headers, result400);
//             }));
//         } else if (status === 404) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result404: any = null;
//             let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result404 = RemoteServiceErrorResponse.fromJS(resultData404);
//             return throwException("Not Found", status, _responseText, _headers, result404);
//             }));
//         } else if (status === 501) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result501: any = null;
//             let resultData501 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result501 = RemoteServiceErrorResponse.fromJS(resultData501);
//             return throwException("Server Error", status, _responseText, _headers, result501);
//             }));
//         } else if (status === 500) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result500: any = null;
//             let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result500 = RemoteServiceErrorResponse.fromJS(resultData500);
//             return throwException("Server Error", status, _responseText, _headers, result500);
//             }));
//         } else if (status !== 200 && status !== 204) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             return throwException("An unexpected server error occurred.", status, _responseText, _headers);
//             }));
//         }
//         return _observableOf<void>(<any>null);
//     }
//
//     /**
//      * @param body (optional)
//      * @return Success
//      */
//     rolesPost(body: IdentityRoleCreateDto | undefined): Observable<IdentityRoleDto> {
//         let url_ = this.baseUrl + "/api/identity/roles";
//         url_ = url_.replace(/[?&]$/, "");
//
//         const content_ = JSON.stringify(body);
//
//         let options_ : any = {
//             body: content_,
//             observe: "response",
//             responseType: "blob",
//             headers: new HttpHeaders({
//                 "Content-Type": "application/json",
//                 "Accept": "text/plain"
//             })
//         };
//
//         return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
//             return this.processRolesPost(response_);
//         })).pipe(_observableCatch((response_: any) => {
//             if (response_ instanceof HttpResponseBase) {
//                 try {
//                     return this.processRolesPost(<any>response_);
//                 } catch (e) {
//                     return <Observable<IdentityRoleDto>><any>_observableThrow(e);
//                 }
//             } else
//                 return <Observable<IdentityRoleDto>><any>_observableThrow(response_);
//         }));
//     }
//
//     protected processRolesPost(response: HttpResponseBase): Observable<IdentityRoleDto> {
//         const status = response.status;
//         const responseBlob =
//             response instanceof HttpResponse ? response.body :
//             (<any>response).error instanceof Blob ? (<any>response).error : undefined;
//
//         let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
//         if (status === 200) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result200: any = null;
//             let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result200 = IdentityRoleDto.fromJS(resultData200);
//             return _observableOf(result200);
//             }));
//         } else if (status === 403) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result403: any = null;
//             let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result403 = RemoteServiceErrorResponse.fromJS(resultData403);
//             return throwException("Forbidden", status, _responseText, _headers, result403);
//             }));
//         } else if (status === 401) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result401: any = null;
//             let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result401 = RemoteServiceErrorResponse.fromJS(resultData401);
//             return throwException("Unauthorized", status, _responseText, _headers, result401);
//             }));
//         } else if (status === 400) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result400: any = null;
//             let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result400 = RemoteServiceErrorResponse.fromJS(resultData400);
//             return throwException("Bad Request", status, _responseText, _headers, result400);
//             }));
//         } else if (status === 404) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result404: any = null;
//             let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result404 = RemoteServiceErrorResponse.fromJS(resultData404);
//             return throwException("Not Found", status, _responseText, _headers, result404);
//             }));
//         } else if (status === 501) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result501: any = null;
//             let resultData501 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result501 = RemoteServiceErrorResponse.fromJS(resultData501);
//             return throwException("Server Error", status, _responseText, _headers, result501);
//             }));
//         } else if (status === 500) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result500: any = null;
//             let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result500 = RemoteServiceErrorResponse.fromJS(resultData500);
//             return throwException("Server Error", status, _responseText, _headers, result500);
//             }));
//         } else if (status !== 200 && status !== 204) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             return throwException("An unexpected server error occurred.", status, _responseText, _headers);
//             }));
//         }
//         return _observableOf<IdentityRoleDto>(<any>null);
//     }
//
//     /**
//      * @param filter (optional)
//      * @param sorting (optional)
//      * @param skipCount (optional)
//      * @param maxResultCount (optional)
//      * @return Success
//      */
//     rolesGet(filter: string | undefined, sorting: string | undefined, skipCount: number | undefined, maxResultCount: number | undefined): Observable<PagedResultDto_1OfOfIdentityRoleDtoAndContractsAnd_0AndCulture_neutralAndPublicKeyToken_null> {
//         let url_ = this.baseUrl + "/api/identity/roles?";
//         if (filter === null)
//             throw new Error("The parameter 'filter' cannot be null.");
//         else if (filter !== undefined)
//             url_ += "Filter=" + encodeURIComponent("" + filter) + "&";
//         if (sorting === null)
//             throw new Error("The parameter 'sorting' cannot be null.");
//         else if (sorting !== undefined)
//             url_ += "Sorting=" + encodeURIComponent("" + sorting) + "&";
//         if (skipCount === null)
//             throw new Error("The parameter 'skipCount' cannot be null.");
//         else if (skipCount !== undefined)
//             url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&";
//         if (maxResultCount === null)
//             throw new Error("The parameter 'maxResultCount' cannot be null.");
//         else if (maxResultCount !== undefined)
//             url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&";
//         url_ = url_.replace(/[?&]$/, "");
//
//         let options_ : any = {
//             observe: "response",
//             responseType: "blob",
//             headers: new HttpHeaders({
//                 "Accept": "text/plain"
//             })
//         };
//
//         return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
//             return this.processRolesGet(response_);
//         })).pipe(_observableCatch((response_: any) => {
//             if (response_ instanceof HttpResponseBase) {
//                 try {
//                     return this.processRolesGet(<any>response_);
//                 } catch (e) {
//                     return <Observable<PagedResultDto_1OfOfIdentityRoleDtoAndContractsAnd_0AndCulture_neutralAndPublicKeyToken_null>><any>_observableThrow(e);
//                 }
//             } else
//                 return <Observable<PagedResultDto_1OfOfIdentityRoleDtoAndContractsAnd_0AndCulture_neutralAndPublicKeyToken_null>><any>_observableThrow(response_);
//         }));
//     }
//
//     protected processRolesGet(response: HttpResponseBase): Observable<PagedResultDto_1OfOfIdentityRoleDtoAndContractsAnd_0AndCulture_neutralAndPublicKeyToken_null> {
//         const status = response.status;
//         const responseBlob =
//             response instanceof HttpResponse ? response.body :
//             (<any>response).error instanceof Blob ? (<any>response).error : undefined;
//
//         let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
//         if (status === 200) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result200: any = null;
//             let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result200 = PagedResultDto_1OfOfIdentityRoleDtoAndContractsAnd_0AndCulture_neutralAndPublicKeyToken_null.fromJS(resultData200);
//             return _observableOf(result200);
//             }));
//         } else if (status === 403) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result403: any = null;
//             let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result403 = RemoteServiceErrorResponse.fromJS(resultData403);
//             return throwException("Forbidden", status, _responseText, _headers, result403);
//             }));
//         } else if (status === 401) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result401: any = null;
//             let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result401 = RemoteServiceErrorResponse.fromJS(resultData401);
//             return throwException("Unauthorized", status, _responseText, _headers, result401);
//             }));
//         } else if (status === 400) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result400: any = null;
//             let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result400 = RemoteServiceErrorResponse.fromJS(resultData400);
//             return throwException("Bad Request", status, _responseText, _headers, result400);
//             }));
//         } else if (status === 404) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result404: any = null;
//             let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result404 = RemoteServiceErrorResponse.fromJS(resultData404);
//             return throwException("Not Found", status, _responseText, _headers, result404);
//             }));
//         } else if (status === 501) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result501: any = null;
//             let resultData501 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result501 = RemoteServiceErrorResponse.fromJS(resultData501);
//             return throwException("Server Error", status, _responseText, _headers, result501);
//             }));
//         } else if (status === 500) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result500: any = null;
//             let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result500 = RemoteServiceErrorResponse.fromJS(resultData500);
//             return throwException("Server Error", status, _responseText, _headers, result500);
//             }));
//         } else if (status !== 200 && status !== 204) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             return throwException("An unexpected server error occurred.", status, _responseText, _headers);
//             }));
//         }
//         return _observableOf<PagedResultDto_1OfOfIdentityRoleDtoAndContractsAnd_0AndCulture_neutralAndPublicKeyToken_null>(<any>null);
//     }
//
//     /**
//      * @param startTime (optional)
//      * @param endTime (optional)
//      * @param applicationName (optional)
//      * @param identity (optional)
//      * @param action (optional)
//      * @param userName (optional)
//      * @param clientId (optional)
//      * @param correlationId (optional)
//      * @param sorting (optional)
//      * @param skipCount (optional)
//      * @param maxResultCount (optional)
//      * @return Success
//      */
//     securityLogsGet(startTime: DateTime | undefined, endTime: DateTime | undefined, applicationName: string | undefined, identity: string | undefined, action: string | undefined, userName: string | undefined, clientId: string | undefined, correlationId: string | undefined, sorting: string | undefined, skipCount: number | undefined, maxResultCount: number | undefined): Observable<PagedResultDto_1OfOfIdentitySecurityLogDtoAndContractsAnd_0AndCulture_neutralAndPublicKeyToken_null> {
//         let url_ = this.baseUrl + "/api/identity/security-logs?";
//         if (startTime === null)
//             throw new Error("The parameter 'startTime' cannot be null.");
//         else if (startTime !== undefined)
//             url_ += "StartTime=" + encodeURIComponent(startTime ? "" + startTime.toJSON() : "") + "&";
//         if (endTime === null)
//             throw new Error("The parameter 'endTime' cannot be null.");
//         else if (endTime !== undefined)
//             url_ += "EndTime=" + encodeURIComponent(endTime ? "" + endTime.toJSON() : "") + "&";
//         if (applicationName === null)
//             throw new Error("The parameter 'applicationName' cannot be null.");
//         else if (applicationName !== undefined)
//             url_ += "ApplicationName=" + encodeURIComponent("" + applicationName) + "&";
//         if (identity === null)
//             throw new Error("The parameter 'identity' cannot be null.");
//         else if (identity !== undefined)
//             url_ += "Identity=" + encodeURIComponent("" + identity) + "&";
//         if (action === null)
//             throw new Error("The parameter 'action' cannot be null.");
//         else if (action !== undefined)
//             url_ += "Action=" + encodeURIComponent("" + action) + "&";
//         if (userName === null)
//             throw new Error("The parameter 'userName' cannot be null.");
//         else if (userName !== undefined)
//             url_ += "UserName=" + encodeURIComponent("" + userName) + "&";
//         if (clientId === null)
//             throw new Error("The parameter 'clientId' cannot be null.");
//         else if (clientId !== undefined)
//             url_ += "ClientId=" + encodeURIComponent("" + clientId) + "&";
//         if (correlationId === null)
//             throw new Error("The parameter 'correlationId' cannot be null.");
//         else if (correlationId !== undefined)
//             url_ += "CorrelationId=" + encodeURIComponent("" + correlationId) + "&";
//         if (sorting === null)
//             throw new Error("The parameter 'sorting' cannot be null.");
//         else if (sorting !== undefined)
//             url_ += "Sorting=" + encodeURIComponent("" + sorting) + "&";
//         if (skipCount === null)
//             throw new Error("The parameter 'skipCount' cannot be null.");
//         else if (skipCount !== undefined)
//             url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&";
//         if (maxResultCount === null)
//             throw new Error("The parameter 'maxResultCount' cannot be null.");
//         else if (maxResultCount !== undefined)
//             url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&";
//         url_ = url_.replace(/[?&]$/, "");
//
//         let options_ : any = {
//             observe: "response",
//             responseType: "blob",
//             headers: new HttpHeaders({
//                 "Accept": "text/plain"
//             })
//         };
//
//         return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
//             return this.processSecurityLogsGet(response_);
//         })).pipe(_observableCatch((response_: any) => {
//             if (response_ instanceof HttpResponseBase) {
//                 try {
//                     return this.processSecurityLogsGet(<any>response_);
//                 } catch (e) {
//                     return <Observable<PagedResultDto_1OfOfIdentitySecurityLogDtoAndContractsAnd_0AndCulture_neutralAndPublicKeyToken_null>><any>_observableThrow(e);
//                 }
//             } else
//                 return <Observable<PagedResultDto_1OfOfIdentitySecurityLogDtoAndContractsAnd_0AndCulture_neutralAndPublicKeyToken_null>><any>_observableThrow(response_);
//         }));
//     }
//
//     protected processSecurityLogsGet(response: HttpResponseBase): Observable<PagedResultDto_1OfOfIdentitySecurityLogDtoAndContractsAnd_0AndCulture_neutralAndPublicKeyToken_null> {
//         const status = response.status;
//         const responseBlob =
//             response instanceof HttpResponse ? response.body :
//             (<any>response).error instanceof Blob ? (<any>response).error : undefined;
//
//         let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
//         if (status === 200) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result200: any = null;
//             let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result200 = PagedResultDto_1OfOfIdentitySecurityLogDtoAndContractsAnd_0AndCulture_neutralAndPublicKeyToken_null.fromJS(resultData200);
//             return _observableOf(result200);
//             }));
//         } else if (status === 403) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result403: any = null;
//             let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result403 = RemoteServiceErrorResponse.fromJS(resultData403);
//             return throwException("Forbidden", status, _responseText, _headers, result403);
//             }));
//         } else if (status === 401) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result401: any = null;
//             let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result401 = RemoteServiceErrorResponse.fromJS(resultData401);
//             return throwException("Unauthorized", status, _responseText, _headers, result401);
//             }));
//         } else if (status === 400) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result400: any = null;
//             let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result400 = RemoteServiceErrorResponse.fromJS(resultData400);
//             return throwException("Bad Request", status, _responseText, _headers, result400);
//             }));
//         } else if (status === 404) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result404: any = null;
//             let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result404 = RemoteServiceErrorResponse.fromJS(resultData404);
//             return throwException("Not Found", status, _responseText, _headers, result404);
//             }));
//         } else if (status === 501) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result501: any = null;
//             let resultData501 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result501 = RemoteServiceErrorResponse.fromJS(resultData501);
//             return throwException("Server Error", status, _responseText, _headers, result501);
//             }));
//         } else if (status === 500) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result500: any = null;
//             let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result500 = RemoteServiceErrorResponse.fromJS(resultData500);
//             return throwException("Server Error", status, _responseText, _headers, result500);
//             }));
//         } else if (status !== 200 && status !== 204) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             return throwException("An unexpected server error occurred.", status, _responseText, _headers);
//             }));
//         }
//         return _observableOf<PagedResultDto_1OfOfIdentitySecurityLogDtoAndContractsAnd_0AndCulture_neutralAndPublicKeyToken_null>(<any>null);
//     }
//
//     /**
//      * @return Success
//      */
//     securityLogsGet(id: string): Observable<IdentitySecurityLogDto> {
//         let url_ = this.baseUrl + "/api/identity/security-logs/{id}";
//         if (id === undefined || id === null)
//             throw new Error("The parameter 'id' must be defined.");
//         url_ = url_.replace("{id}", encodeURIComponent("" + id));
//         url_ = url_.replace(/[?&]$/, "");
//
//         let options_ : any = {
//             observe: "response",
//             responseType: "blob",
//             headers: new HttpHeaders({
//                 "Accept": "text/plain"
//             })
//         };
//
//         return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
//             return this.processSecurityLogsGet(response_);
//         })).pipe(_observableCatch((response_: any) => {
//             if (response_ instanceof HttpResponseBase) {
//                 try {
//                     return this.processSecurityLogsGet(<any>response_);
//                 } catch (e) {
//                     return <Observable<IdentitySecurityLogDto>><any>_observableThrow(e);
//                 }
//             } else
//                 return <Observable<IdentitySecurityLogDto>><any>_observableThrow(response_);
//         }));
//     }
//
//     protected processSecurityLogsGet(response: HttpResponseBase): Observable<IdentitySecurityLogDto> {
//         const status = response.status;
//         const responseBlob =
//             response instanceof HttpResponse ? response.body :
//             (<any>response).error instanceof Blob ? (<any>response).error : undefined;
//
//         let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
//         if (status === 200) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result200: any = null;
//             let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result200 = IdentitySecurityLogDto.fromJS(resultData200);
//             return _observableOf(result200);
//             }));
//         } else if (status === 403) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result403: any = null;
//             let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result403 = RemoteServiceErrorResponse.fromJS(resultData403);
//             return throwException("Forbidden", status, _responseText, _headers, result403);
//             }));
//         } else if (status === 401) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result401: any = null;
//             let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result401 = RemoteServiceErrorResponse.fromJS(resultData401);
//             return throwException("Unauthorized", status, _responseText, _headers, result401);
//             }));
//         } else if (status === 400) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result400: any = null;
//             let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result400 = RemoteServiceErrorResponse.fromJS(resultData400);
//             return throwException("Bad Request", status, _responseText, _headers, result400);
//             }));
//         } else if (status === 404) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result404: any = null;
//             let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result404 = RemoteServiceErrorResponse.fromJS(resultData404);
//             return throwException("Not Found", status, _responseText, _headers, result404);
//             }));
//         } else if (status === 501) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result501: any = null;
//             let resultData501 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result501 = RemoteServiceErrorResponse.fromJS(resultData501);
//             return throwException("Server Error", status, _responseText, _headers, result501);
//             }));
//         } else if (status === 500) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result500: any = null;
//             let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result500 = RemoteServiceErrorResponse.fromJS(resultData500);
//             return throwException("Server Error", status, _responseText, _headers, result500);
//             }));
//         } else if (status !== 200 && status !== 204) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             return throwException("An unexpected server error occurred.", status, _responseText, _headers);
//             }));
//         }
//         return _observableOf<IdentitySecurityLogDto>(<any>null);
//     }
//
//     /**
//      * @return Success
//      */
//     settingsGet(): Observable<IdentitySettingsDto> {
//         let url_ = this.baseUrl + "/api/identity/settings";
//         url_ = url_.replace(/[?&]$/, "");
//
//         let options_ : any = {
//             observe: "response",
//             responseType: "blob",
//             headers: new HttpHeaders({
//                 "Accept": "text/plain"
//             })
//         };
//
//         return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
//             return this.processSettingsGet(response_);
//         })).pipe(_observableCatch((response_: any) => {
//             if (response_ instanceof HttpResponseBase) {
//                 try {
//                     return this.processSettingsGet(<any>response_);
//                 } catch (e) {
//                     return <Observable<IdentitySettingsDto>><any>_observableThrow(e);
//                 }
//             } else
//                 return <Observable<IdentitySettingsDto>><any>_observableThrow(response_);
//         }));
//     }
//
//     protected processSettingsGet(response: HttpResponseBase): Observable<IdentitySettingsDto> {
//         const status = response.status;
//         const responseBlob =
//             response instanceof HttpResponse ? response.body :
//             (<any>response).error instanceof Blob ? (<any>response).error : undefined;
//
//         let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
//         if (status === 200) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result200: any = null;
//             let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result200 = IdentitySettingsDto.fromJS(resultData200);
//             return _observableOf(result200);
//             }));
//         } else if (status === 403) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result403: any = null;
//             let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result403 = RemoteServiceErrorResponse.fromJS(resultData403);
//             return throwException("Forbidden", status, _responseText, _headers, result403);
//             }));
//         } else if (status === 401) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result401: any = null;
//             let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result401 = RemoteServiceErrorResponse.fromJS(resultData401);
//             return throwException("Unauthorized", status, _responseText, _headers, result401);
//             }));
//         } else if (status === 400) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result400: any = null;
//             let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result400 = RemoteServiceErrorResponse.fromJS(resultData400);
//             return throwException("Bad Request", status, _responseText, _headers, result400);
//             }));
//         } else if (status === 404) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result404: any = null;
//             let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result404 = RemoteServiceErrorResponse.fromJS(resultData404);
//             return throwException("Not Found", status, _responseText, _headers, result404);
//             }));
//         } else if (status === 501) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result501: any = null;
//             let resultData501 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result501 = RemoteServiceErrorResponse.fromJS(resultData501);
//             return throwException("Server Error", status, _responseText, _headers, result501);
//             }));
//         } else if (status === 500) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result500: any = null;
//             let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result500 = RemoteServiceErrorResponse.fromJS(resultData500);
//             return throwException("Server Error", status, _responseText, _headers, result500);
//             }));
//         } else if (status !== 200 && status !== 204) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             return throwException("An unexpected server error occurred.", status, _responseText, _headers);
//             }));
//         }
//         return _observableOf<IdentitySettingsDto>(<any>null);
//     }
//
//     /**
//      * @param body (optional)
//      * @return Success
//      */
//     settingsPut(body: IdentitySettingsDto | undefined): Observable<void> {
//         let url_ = this.baseUrl + "/api/identity/settings";
//         url_ = url_.replace(/[?&]$/, "");
//
//         const content_ = JSON.stringify(body);
//
//         let options_ : any = {
//             body: content_,
//             observe: "response",
//             responseType: "blob",
//             headers: new HttpHeaders({
//                 "Content-Type": "application/json",
//             })
//         };
//
//         return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
//             return this.processSettingsPut(response_);
//         })).pipe(_observableCatch((response_: any) => {
//             if (response_ instanceof HttpResponseBase) {
//                 try {
//                     return this.processSettingsPut(<any>response_);
//                 } catch (e) {
//                     return <Observable<void>><any>_observableThrow(e);
//                 }
//             } else
//                 return <Observable<void>><any>_observableThrow(response_);
//         }));
//     }
//
//     protected processSettingsPut(response: HttpResponseBase): Observable<void> {
//         const status = response.status;
//         const responseBlob =
//             response instanceof HttpResponse ? response.body :
//             (<any>response).error instanceof Blob ? (<any>response).error : undefined;
//
//         let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
//         if (status === 200) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             return _observableOf<void>(<any>null);
//             }));
//         } else if (status === 403) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result403: any = null;
//             let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result403 = RemoteServiceErrorResponse.fromJS(resultData403);
//             return throwException("Forbidden", status, _responseText, _headers, result403);
//             }));
//         } else if (status === 401) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result401: any = null;
//             let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result401 = RemoteServiceErrorResponse.fromJS(resultData401);
//             return throwException("Unauthorized", status, _responseText, _headers, result401);
//             }));
//         } else if (status === 400) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result400: any = null;
//             let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result400 = RemoteServiceErrorResponse.fromJS(resultData400);
//             return throwException("Bad Request", status, _responseText, _headers, result400);
//             }));
//         } else if (status === 404) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result404: any = null;
//             let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result404 = RemoteServiceErrorResponse.fromJS(resultData404);
//             return throwException("Not Found", status, _responseText, _headers, result404);
//             }));
//         } else if (status === 501) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result501: any = null;
//             let resultData501 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result501 = RemoteServiceErrorResponse.fromJS(resultData501);
//             return throwException("Server Error", status, _responseText, _headers, result501);
//             }));
//         } else if (status === 500) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result500: any = null;
//             let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result500 = RemoteServiceErrorResponse.fromJS(resultData500);
//             return throwException("Server Error", status, _responseText, _headers, result500);
//             }));
//         } else if (status !== 200 && status !== 204) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             return throwException("An unexpected server error occurred.", status, _responseText, _headers);
//             }));
//         }
//         return _observableOf<void>(<any>null);
//     }
//
//     /**
//      * @return Success
//      */
//     linkUser(): Observable<ListResultDto_1OfOfLinkUserDtoAndContractsAnd_0AndCulture_neutralAndPublicKeyToken_null> {
//         let url_ = this.baseUrl + "/api/identity/link-user";
//         url_ = url_.replace(/[?&]$/, "");
//
//         let options_ : any = {
//             observe: "response",
//             responseType: "blob",
//             headers: new HttpHeaders({
//                 "Accept": "text/plain"
//             })
//         };
//
//         return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
//             return this.processLinkUser(response_);
//         })).pipe(_observableCatch((response_: any) => {
//             if (response_ instanceof HttpResponseBase) {
//                 try {
//                     return this.processLinkUser(<any>response_);
//                 } catch (e) {
//                     return <Observable<ListResultDto_1OfOfLinkUserDtoAndContractsAnd_0AndCulture_neutralAndPublicKeyToken_null>><any>_observableThrow(e);
//                 }
//             } else
//                 return <Observable<ListResultDto_1OfOfLinkUserDtoAndContractsAnd_0AndCulture_neutralAndPublicKeyToken_null>><any>_observableThrow(response_);
//         }));
//     }
//
//     protected processLinkUser(response: HttpResponseBase): Observable<ListResultDto_1OfOfLinkUserDtoAndContractsAnd_0AndCulture_neutralAndPublicKeyToken_null> {
//         const status = response.status;
//         const responseBlob =
//             response instanceof HttpResponse ? response.body :
//             (<any>response).error instanceof Blob ? (<any>response).error : undefined;
//
//         let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
//         if (status === 200) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result200: any = null;
//             let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result200 = ListResultDto_1OfOfLinkUserDtoAndContractsAnd_0AndCulture_neutralAndPublicKeyToken_null.fromJS(resultData200);
//             return _observableOf(result200);
//             }));
//         } else if (status === 403) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result403: any = null;
//             let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result403 = RemoteServiceErrorResponse.fromJS(resultData403);
//             return throwException("Forbidden", status, _responseText, _headers, result403);
//             }));
//         } else if (status === 401) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result401: any = null;
//             let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result401 = RemoteServiceErrorResponse.fromJS(resultData401);
//             return throwException("Unauthorized", status, _responseText, _headers, result401);
//             }));
//         } else if (status === 400) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result400: any = null;
//             let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result400 = RemoteServiceErrorResponse.fromJS(resultData400);
//             return throwException("Bad Request", status, _responseText, _headers, result400);
//             }));
//         } else if (status === 404) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result404: any = null;
//             let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result404 = RemoteServiceErrorResponse.fromJS(resultData404);
//             return throwException("Not Found", status, _responseText, _headers, result404);
//             }));
//         } else if (status === 501) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result501: any = null;
//             let resultData501 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result501 = RemoteServiceErrorResponse.fromJS(resultData501);
//             return throwException("Server Error", status, _responseText, _headers, result501);
//             }));
//         } else if (status === 500) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result500: any = null;
//             let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result500 = RemoteServiceErrorResponse.fromJS(resultData500);
//             return throwException("Server Error", status, _responseText, _headers, result500);
//             }));
//         } else if (status !== 200 && status !== 204) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             return throwException("An unexpected server error occurred.", status, _responseText, _headers);
//             }));
//         }
//         return _observableOf<ListResultDto_1OfOfLinkUserDtoAndContractsAnd_0AndCulture_neutralAndPublicKeyToken_null>(<any>null);
//     }
//
//     /**
//      * @return Success
//      */
//     usersGet(id: string): Observable<IdentityUserDto> {
//         let url_ = this.baseUrl + "/api/identity/users/{id}";
//         if (id === undefined || id === null)
//             throw new Error("The parameter 'id' must be defined.");
//         url_ = url_.replace("{id}", encodeURIComponent("" + id));
//         url_ = url_.replace(/[?&]$/, "");
//
//         let options_ : any = {
//             observe: "response",
//             responseType: "blob",
//             headers: new HttpHeaders({
//                 "Accept": "text/plain"
//             })
//         };
//
//         return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
//             return this.processUsersGet(response_);
//         })).pipe(_observableCatch((response_: any) => {
//             if (response_ instanceof HttpResponseBase) {
//                 try {
//                     return this.processUsersGet(<any>response_);
//                 } catch (e) {
//                     return <Observable<IdentityUserDto>><any>_observableThrow(e);
//                 }
//             } else
//                 return <Observable<IdentityUserDto>><any>_observableThrow(response_);
//         }));
//     }
//
//     protected processUsersGet(response: HttpResponseBase): Observable<IdentityUserDto> {
//         const status = response.status;
//         const responseBlob =
//             response instanceof HttpResponse ? response.body :
//             (<any>response).error instanceof Blob ? (<any>response).error : undefined;
//
//         let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
//         if (status === 200) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result200: any = null;
//             let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result200 = IdentityUserDto.fromJS(resultData200);
//             return _observableOf(result200);
//             }));
//         } else if (status === 403) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result403: any = null;
//             let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result403 = RemoteServiceErrorResponse.fromJS(resultData403);
//             return throwException("Forbidden", status, _responseText, _headers, result403);
//             }));
//         } else if (status === 401) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result401: any = null;
//             let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result401 = RemoteServiceErrorResponse.fromJS(resultData401);
//             return throwException("Unauthorized", status, _responseText, _headers, result401);
//             }));
//         } else if (status === 400) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result400: any = null;
//             let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result400 = RemoteServiceErrorResponse.fromJS(resultData400);
//             return throwException("Bad Request", status, _responseText, _headers, result400);
//             }));
//         } else if (status === 404) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result404: any = null;
//             let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result404 = RemoteServiceErrorResponse.fromJS(resultData404);
//             return throwException("Not Found", status, _responseText, _headers, result404);
//             }));
//         } else if (status === 501) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result501: any = null;
//             let resultData501 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result501 = RemoteServiceErrorResponse.fromJS(resultData501);
//             return throwException("Server Error", status, _responseText, _headers, result501);
//             }));
//         } else if (status === 500) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result500: any = null;
//             let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result500 = RemoteServiceErrorResponse.fromJS(resultData500);
//             return throwException("Server Error", status, _responseText, _headers, result500);
//             }));
//         } else if (status !== 200 && status !== 204) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             return throwException("An unexpected server error occurred.", status, _responseText, _headers);
//             }));
//         }
//         return _observableOf<IdentityUserDto>(<any>null);
//     }
//
//     /**
//      * @param body (optional)
//      * @return Success
//      */
//     usersPut(id: string, body: IdentityUserUpdateDto | undefined): Observable<IdentityUserDto> {
//         let url_ = this.baseUrl + "/api/identity/users/{id}";
//         if (id === undefined || id === null)
//             throw new Error("The parameter 'id' must be defined.");
//         url_ = url_.replace("{id}", encodeURIComponent("" + id));
//         url_ = url_.replace(/[?&]$/, "");
//
//         const content_ = JSON.stringify(body);
//
//         let options_ : any = {
//             body: content_,
//             observe: "response",
//             responseType: "blob",
//             headers: new HttpHeaders({
//                 "Content-Type": "application/json",
//                 "Accept": "text/plain"
//             })
//         };
//
//         return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
//             return this.processUsersPut(response_);
//         })).pipe(_observableCatch((response_: any) => {
//             if (response_ instanceof HttpResponseBase) {
//                 try {
//                     return this.processUsersPut(<any>response_);
//                 } catch (e) {
//                     return <Observable<IdentityUserDto>><any>_observableThrow(e);
//                 }
//             } else
//                 return <Observable<IdentityUserDto>><any>_observableThrow(response_);
//         }));
//     }
//
//     protected processUsersPut(response: HttpResponseBase): Observable<IdentityUserDto> {
//         const status = response.status;
//         const responseBlob =
//             response instanceof HttpResponse ? response.body :
//             (<any>response).error instanceof Blob ? (<any>response).error : undefined;
//
//         let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
//         if (status === 200) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result200: any = null;
//             let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result200 = IdentityUserDto.fromJS(resultData200);
//             return _observableOf(result200);
//             }));
//         } else if (status === 403) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result403: any = null;
//             let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result403 = RemoteServiceErrorResponse.fromJS(resultData403);
//             return throwException("Forbidden", status, _responseText, _headers, result403);
//             }));
//         } else if (status === 401) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result401: any = null;
//             let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result401 = RemoteServiceErrorResponse.fromJS(resultData401);
//             return throwException("Unauthorized", status, _responseText, _headers, result401);
//             }));
//         } else if (status === 400) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result400: any = null;
//             let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result400 = RemoteServiceErrorResponse.fromJS(resultData400);
//             return throwException("Bad Request", status, _responseText, _headers, result400);
//             }));
//         } else if (status === 404) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result404: any = null;
//             let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result404 = RemoteServiceErrorResponse.fromJS(resultData404);
//             return throwException("Not Found", status, _responseText, _headers, result404);
//             }));
//         } else if (status === 501) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result501: any = null;
//             let resultData501 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result501 = RemoteServiceErrorResponse.fromJS(resultData501);
//             return throwException("Server Error", status, _responseText, _headers, result501);
//             }));
//         } else if (status === 500) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result500: any = null;
//             let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result500 = RemoteServiceErrorResponse.fromJS(resultData500);
//             return throwException("Server Error", status, _responseText, _headers, result500);
//             }));
//         } else if (status !== 200 && status !== 204) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             return throwException("An unexpected server error occurred.", status, _responseText, _headers);
//             }));
//         }
//         return _observableOf<IdentityUserDto>(<any>null);
//     }
//
//     /**
//      * @return Success
//      */
//     usersDelete(id: string): Observable<void> {
//         let url_ = this.baseUrl + "/api/identity/users/{id}";
//         if (id === undefined || id === null)
//             throw new Error("The parameter 'id' must be defined.");
//         url_ = url_.replace("{id}", encodeURIComponent("" + id));
//         url_ = url_.replace(/[?&]$/, "");
//
//         let options_ : any = {
//             observe: "response",
//             responseType: "blob",
//             headers: new HttpHeaders({
//             })
//         };
//
//         return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
//             return this.processUsersDelete(response_);
//         })).pipe(_observableCatch((response_: any) => {
//             if (response_ instanceof HttpResponseBase) {
//                 try {
//                     return this.processUsersDelete(<any>response_);
//                 } catch (e) {
//                     return <Observable<void>><any>_observableThrow(e);
//                 }
//             } else
//                 return <Observable<void>><any>_observableThrow(response_);
//         }));
//     }
//
//     protected processUsersDelete(response: HttpResponseBase): Observable<void> {
//         const status = response.status;
//         const responseBlob =
//             response instanceof HttpResponse ? response.body :
//             (<any>response).error instanceof Blob ? (<any>response).error : undefined;
//
//         let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
//         if (status === 200) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             return _observableOf<void>(<any>null);
//             }));
//         } else if (status === 403) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result403: any = null;
//             let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result403 = RemoteServiceErrorResponse.fromJS(resultData403);
//             return throwException("Forbidden", status, _responseText, _headers, result403);
//             }));
//         } else if (status === 401) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result401: any = null;
//             let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result401 = RemoteServiceErrorResponse.fromJS(resultData401);
//             return throwException("Unauthorized", status, _responseText, _headers, result401);
//             }));
//         } else if (status === 400) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result400: any = null;
//             let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result400 = RemoteServiceErrorResponse.fromJS(resultData400);
//             return throwException("Bad Request", status, _responseText, _headers, result400);
//             }));
//         } else if (status === 404) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result404: any = null;
//             let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result404 = RemoteServiceErrorResponse.fromJS(resultData404);
//             return throwException("Not Found", status, _responseText, _headers, result404);
//             }));
//         } else if (status === 501) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result501: any = null;
//             let resultData501 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result501 = RemoteServiceErrorResponse.fromJS(resultData501);
//             return throwException("Server Error", status, _responseText, _headers, result501);
//             }));
//         } else if (status === 500) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result500: any = null;
//             let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result500 = RemoteServiceErrorResponse.fromJS(resultData500);
//             return throwException("Server Error", status, _responseText, _headers, result500);
//             }));
//         } else if (status !== 200 && status !== 204) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             return throwException("An unexpected server error occurred.", status, _responseText, _headers);
//             }));
//         }
//         return _observableOf<void>(<any>null);
//     }
//
//     /**
//      * @param filter (optional)
//      * @param sorting (optional)
//      * @param skipCount (optional)
//      * @param maxResultCount (optional)
//      * @return Success
//      */
//     usersGet(filter: string | undefined, sorting: string | undefined, skipCount: number | undefined, maxResultCount: number | undefined): Observable<PagedResultDto_1OfOfIdentityUserDtoAndContractsAnd_0AndCulture_neutralAndPublicKeyToken_null> {
//         let url_ = this.baseUrl + "/api/identity/users?";
//         if (filter === null)
//             throw new Error("The parameter 'filter' cannot be null.");
//         else if (filter !== undefined)
//             url_ += "Filter=" + encodeURIComponent("" + filter) + "&";
//         if (sorting === null)
//             throw new Error("The parameter 'sorting' cannot be null.");
//         else if (sorting !== undefined)
//             url_ += "Sorting=" + encodeURIComponent("" + sorting) + "&";
//         if (skipCount === null)
//             throw new Error("The parameter 'skipCount' cannot be null.");
//         else if (skipCount !== undefined)
//             url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&";
//         if (maxResultCount === null)
//             throw new Error("The parameter 'maxResultCount' cannot be null.");
//         else if (maxResultCount !== undefined)
//             url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&";
//         url_ = url_.replace(/[?&]$/, "");
//
//         let options_ : any = {
//             observe: "response",
//             responseType: "blob",
//             headers: new HttpHeaders({
//                 "Accept": "text/plain"
//             })
//         };
//
//         return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
//             return this.processUsersGet(response_);
//         })).pipe(_observableCatch((response_: any) => {
//             if (response_ instanceof HttpResponseBase) {
//                 try {
//                     return this.processUsersGet(<any>response_);
//                 } catch (e) {
//                     return <Observable<PagedResultDto_1OfOfIdentityUserDtoAndContractsAnd_0AndCulture_neutralAndPublicKeyToken_null>><any>_observableThrow(e);
//                 }
//             } else
//                 return <Observable<PagedResultDto_1OfOfIdentityUserDtoAndContractsAnd_0AndCulture_neutralAndPublicKeyToken_null>><any>_observableThrow(response_);
//         }));
//     }
//
//     protected processUsersGet(response: HttpResponseBase): Observable<PagedResultDto_1OfOfIdentityUserDtoAndContractsAnd_0AndCulture_neutralAndPublicKeyToken_null> {
//         const status = response.status;
//         const responseBlob =
//             response instanceof HttpResponse ? response.body :
//             (<any>response).error instanceof Blob ? (<any>response).error : undefined;
//
//         let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
//         if (status === 200) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result200: any = null;
//             let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result200 = PagedResultDto_1OfOfIdentityUserDtoAndContractsAnd_0AndCulture_neutralAndPublicKeyToken_null.fromJS(resultData200);
//             return _observableOf(result200);
//             }));
//         } else if (status === 403) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result403: any = null;
//             let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result403 = RemoteServiceErrorResponse.fromJS(resultData403);
//             return throwException("Forbidden", status, _responseText, _headers, result403);
//             }));
//         } else if (status === 401) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result401: any = null;
//             let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result401 = RemoteServiceErrorResponse.fromJS(resultData401);
//             return throwException("Unauthorized", status, _responseText, _headers, result401);
//             }));
//         } else if (status === 400) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result400: any = null;
//             let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result400 = RemoteServiceErrorResponse.fromJS(resultData400);
//             return throwException("Bad Request", status, _responseText, _headers, result400);
//             }));
//         } else if (status === 404) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result404: any = null;
//             let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result404 = RemoteServiceErrorResponse.fromJS(resultData404);
//             return throwException("Not Found", status, _responseText, _headers, result404);
//             }));
//         } else if (status === 501) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result501: any = null;
//             let resultData501 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result501 = RemoteServiceErrorResponse.fromJS(resultData501);
//             return throwException("Server Error", status, _responseText, _headers, result501);
//             }));
//         } else if (status === 500) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result500: any = null;
//             let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result500 = RemoteServiceErrorResponse.fromJS(resultData500);
//             return throwException("Server Error", status, _responseText, _headers, result500);
//             }));
//         } else if (status !== 200 && status !== 204) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             return throwException("An unexpected server error occurred.", status, _responseText, _headers);
//             }));
//         }
//         return _observableOf<PagedResultDto_1OfOfIdentityUserDtoAndContractsAnd_0AndCulture_neutralAndPublicKeyToken_null>(<any>null);
//     }
//
//     /**
//      * @param body (optional)
//      * @return Success
//      */
//     usersPost(body: IdentityUserCreateDto | undefined): Observable<IdentityUserDto> {
//         let url_ = this.baseUrl + "/api/identity/users";
//         url_ = url_.replace(/[?&]$/, "");
//
//         const content_ = JSON.stringify(body);
//
//         let options_ : any = {
//             body: content_,
//             observe: "response",
//             responseType: "blob",
//             headers: new HttpHeaders({
//                 "Content-Type": "application/json",
//                 "Accept": "text/plain"
//             })
//         };
//
//         return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
//             return this.processUsersPost(response_);
//         })).pipe(_observableCatch((response_: any) => {
//             if (response_ instanceof HttpResponseBase) {
//                 try {
//                     return this.processUsersPost(<any>response_);
//                 } catch (e) {
//                     return <Observable<IdentityUserDto>><any>_observableThrow(e);
//                 }
//             } else
//                 return <Observable<IdentityUserDto>><any>_observableThrow(response_);
//         }));
//     }
//
//     protected processUsersPost(response: HttpResponseBase): Observable<IdentityUserDto> {
//         const status = response.status;
//         const responseBlob =
//             response instanceof HttpResponse ? response.body :
//             (<any>response).error instanceof Blob ? (<any>response).error : undefined;
//
//         let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
//         if (status === 200) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result200: any = null;
//             let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result200 = IdentityUserDto.fromJS(resultData200);
//             return _observableOf(result200);
//             }));
//         } else if (status === 403) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result403: any = null;
//             let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result403 = RemoteServiceErrorResponse.fromJS(resultData403);
//             return throwException("Forbidden", status, _responseText, _headers, result403);
//             }));
//         } else if (status === 401) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result401: any = null;
//             let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result401 = RemoteServiceErrorResponse.fromJS(resultData401);
//             return throwException("Unauthorized", status, _responseText, _headers, result401);
//             }));
//         } else if (status === 400) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result400: any = null;
//             let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result400 = RemoteServiceErrorResponse.fromJS(resultData400);
//             return throwException("Bad Request", status, _responseText, _headers, result400);
//             }));
//         } else if (status === 404) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result404: any = null;
//             let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result404 = RemoteServiceErrorResponse.fromJS(resultData404);
//             return throwException("Not Found", status, _responseText, _headers, result404);
//             }));
//         } else if (status === 501) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result501: any = null;
//             let resultData501 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result501 = RemoteServiceErrorResponse.fromJS(resultData501);
//             return throwException("Server Error", status, _responseText, _headers, result501);
//             }));
//         } else if (status === 500) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result500: any = null;
//             let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result500 = RemoteServiceErrorResponse.fromJS(resultData500);
//             return throwException("Server Error", status, _responseText, _headers, result500);
//             }));
//         } else if (status !== 200 && status !== 204) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             return throwException("An unexpected server error occurred.", status, _responseText, _headers);
//             }));
//         }
//         return _observableOf<IdentityUserDto>(<any>null);
//     }
// }
//
// @Injectable({providedIn: 'root'})
// export class FileManagementServiceProxy {
//     private http: HttpClient;
//     private baseUrl: string;
//     protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;
//
//     constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
//         this.http = http;
//         this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
//     }
//
//     /**
//      * @return Success
//      */
//     directoryDescriptorGet(id: string): Observable<DirectoryDescriptorDto> {
//         let url_ = this.baseUrl + "/api/file-management/directory-descriptor/{id}";
//         if (id === undefined || id === null)
//             throw new Error("The parameter 'id' must be defined.");
//         url_ = url_.replace("{id}", encodeURIComponent("" + id));
//         url_ = url_.replace(/[?&]$/, "");
//
//         let options_ : any = {
//             observe: "response",
//             responseType: "blob",
//             headers: new HttpHeaders({
//                 "Accept": "text/plain"
//             })
//         };
//
//         return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
//             return this.processDirectoryDescriptorGet(response_);
//         })).pipe(_observableCatch((response_: any) => {
//             if (response_ instanceof HttpResponseBase) {
//                 try {
//                     return this.processDirectoryDescriptorGet(<any>response_);
//                 } catch (e) {
//                     return <Observable<DirectoryDescriptorDto>><any>_observableThrow(e);
//                 }
//             } else
//                 return <Observable<DirectoryDescriptorDto>><any>_observableThrow(response_);
//         }));
//     }
//
//     protected processDirectoryDescriptorGet(response: HttpResponseBase): Observable<DirectoryDescriptorDto> {
//         const status = response.status;
//         const responseBlob =
//             response instanceof HttpResponse ? response.body :
//             (<any>response).error instanceof Blob ? (<any>response).error : undefined;
//
//         let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
//         if (status === 200) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result200: any = null;
//             let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result200 = DirectoryDescriptorDto.fromJS(resultData200);
//             return _observableOf(result200);
//             }));
//         } else if (status === 403) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result403: any = null;
//             let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result403 = RemoteServiceErrorResponse.fromJS(resultData403);
//             return throwException("Forbidden", status, _responseText, _headers, result403);
//             }));
//         } else if (status === 401) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result401: any = null;
//             let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result401 = RemoteServiceErrorResponse.fromJS(resultData401);
//             return throwException("Unauthorized", status, _responseText, _headers, result401);
//             }));
//         } else if (status === 400) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result400: any = null;
//             let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result400 = RemoteServiceErrorResponse.fromJS(resultData400);
//             return throwException("Bad Request", status, _responseText, _headers, result400);
//             }));
//         } else if (status === 404) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result404: any = null;
//             let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result404 = RemoteServiceErrorResponse.fromJS(resultData404);
//             return throwException("Not Found", status, _responseText, _headers, result404);
//             }));
//         } else if (status === 501) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result501: any = null;
//             let resultData501 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result501 = RemoteServiceErrorResponse.fromJS(resultData501);
//             return throwException("Server Error", status, _responseText, _headers, result501);
//             }));
//         } else if (status === 500) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result500: any = null;
//             let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result500 = RemoteServiceErrorResponse.fromJS(resultData500);
//             return throwException("Server Error", status, _responseText, _headers, result500);
//             }));
//         } else if (status !== 200 && status !== 204) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             return throwException("An unexpected server error occurred.", status, _responseText, _headers);
//             }));
//         }
//         return _observableOf<DirectoryDescriptorDto>(<any>null);
//     }
//
//     /**
//      * @param body (optional)
//      * @return Success
//      */
//     directoryDescriptorPost(id: string, body: RenameDirectoryInput | undefined): Observable<DirectoryDescriptorDto> {
//         let url_ = this.baseUrl + "/api/file-management/directory-descriptor/{id}";
//         if (id === undefined || id === null)
//             throw new Error("The parameter 'id' must be defined.");
//         url_ = url_.replace("{id}", encodeURIComponent("" + id));
//         url_ = url_.replace(/[?&]$/, "");
//
//         const content_ = JSON.stringify(body);
//
//         let options_ : any = {
//             body: content_,
//             observe: "response",
//             responseType: "blob",
//             headers: new HttpHeaders({
//                 "Content-Type": "application/json",
//                 "Accept": "text/plain"
//             })
//         };
//
//         return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
//             return this.processDirectoryDescriptorPost(response_);
//         })).pipe(_observableCatch((response_: any) => {
//             if (response_ instanceof HttpResponseBase) {
//                 try {
//                     return this.processDirectoryDescriptorPost(<any>response_);
//                 } catch (e) {
//                     return <Observable<DirectoryDescriptorDto>><any>_observableThrow(e);
//                 }
//             } else
//                 return <Observable<DirectoryDescriptorDto>><any>_observableThrow(response_);
//         }));
//     }
//
//     protected processDirectoryDescriptorPost(response: HttpResponseBase): Observable<DirectoryDescriptorDto> {
//         const status = response.status;
//         const responseBlob =
//             response instanceof HttpResponse ? response.body :
//             (<any>response).error instanceof Blob ? (<any>response).error : undefined;
//
//         let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
//         if (status === 200) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result200: any = null;
//             let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result200 = DirectoryDescriptorDto.fromJS(resultData200);
//             return _observableOf(result200);
//             }));
//         } else if (status === 403) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result403: any = null;
//             let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result403 = RemoteServiceErrorResponse.fromJS(resultData403);
//             return throwException("Forbidden", status, _responseText, _headers, result403);
//             }));
//         } else if (status === 401) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result401: any = null;
//             let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result401 = RemoteServiceErrorResponse.fromJS(resultData401);
//             return throwException("Unauthorized", status, _responseText, _headers, result401);
//             }));
//         } else if (status === 400) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result400: any = null;
//             let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result400 = RemoteServiceErrorResponse.fromJS(resultData400);
//             return throwException("Bad Request", status, _responseText, _headers, result400);
//             }));
//         } else if (status === 404) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result404: any = null;
//             let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result404 = RemoteServiceErrorResponse.fromJS(resultData404);
//             return throwException("Not Found", status, _responseText, _headers, result404);
//             }));
//         } else if (status === 501) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result501: any = null;
//             let resultData501 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result501 = RemoteServiceErrorResponse.fromJS(resultData501);
//             return throwException("Server Error", status, _responseText, _headers, result501);
//             }));
//         } else if (status === 500) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result500: any = null;
//             let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result500 = RemoteServiceErrorResponse.fromJS(resultData500);
//             return throwException("Server Error", status, _responseText, _headers, result500);
//             }));
//         } else if (status !== 200 && status !== 204) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             return throwException("An unexpected server error occurred.", status, _responseText, _headers);
//             }));
//         }
//         return _observableOf<DirectoryDescriptorDto>(<any>null);
//     }
//
//     /**
//      * @return Success
//      */
//     directoryDescriptorDelete(id: string): Observable<void> {
//         let url_ = this.baseUrl + "/api/file-management/directory-descriptor/{id}";
//         if (id === undefined || id === null)
//             throw new Error("The parameter 'id' must be defined.");
//         url_ = url_.replace("{id}", encodeURIComponent("" + id));
//         url_ = url_.replace(/[?&]$/, "");
//
//         let options_ : any = {
//             observe: "response",
//             responseType: "blob",
//             headers: new HttpHeaders({
//             })
//         };
//
//         return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
//             return this.processDirectoryDescriptorDelete(response_);
//         })).pipe(_observableCatch((response_: any) => {
//             if (response_ instanceof HttpResponseBase) {
//                 try {
//                     return this.processDirectoryDescriptorDelete(<any>response_);
//                 } catch (e) {
//                     return <Observable<void>><any>_observableThrow(e);
//                 }
//             } else
//                 return <Observable<void>><any>_observableThrow(response_);
//         }));
//     }
//
//     protected processDirectoryDescriptorDelete(response: HttpResponseBase): Observable<void> {
//         const status = response.status;
//         const responseBlob =
//             response instanceof HttpResponse ? response.body :
//             (<any>response).error instanceof Blob ? (<any>response).error : undefined;
//
//         let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
//         if (status === 200) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             return _observableOf<void>(<any>null);
//             }));
//         } else if (status === 403) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result403: any = null;
//             let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result403 = RemoteServiceErrorResponse.fromJS(resultData403);
//             return throwException("Forbidden", status, _responseText, _headers, result403);
//             }));
//         } else if (status === 401) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result401: any = null;
//             let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result401 = RemoteServiceErrorResponse.fromJS(resultData401);
//             return throwException("Unauthorized", status, _responseText, _headers, result401);
//             }));
//         } else if (status === 400) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result400: any = null;
//             let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result400 = RemoteServiceErrorResponse.fromJS(resultData400);
//             return throwException("Bad Request", status, _responseText, _headers, result400);
//             }));
//         } else if (status === 404) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result404: any = null;
//             let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result404 = RemoteServiceErrorResponse.fromJS(resultData404);
//             return throwException("Not Found", status, _responseText, _headers, result404);
//             }));
//         } else if (status === 501) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result501: any = null;
//             let resultData501 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result501 = RemoteServiceErrorResponse.fromJS(resultData501);
//             return throwException("Server Error", status, _responseText, _headers, result501);
//             }));
//         } else if (status === 500) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result500: any = null;
//             let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result500 = RemoteServiceErrorResponse.fromJS(resultData500);
//             return throwException("Server Error", status, _responseText, _headers, result500);
//             }));
//         } else if (status !== 200 && status !== 204) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             return throwException("An unexpected server error occurred.", status, _responseText, _headers);
//             }));
//         }
//         return _observableOf<void>(<any>null);
//     }
//
//     /**
//      * @param body (optional)
//      * @return Success
//      */
//     directoryDescriptorPost(body: CreateDirectoryInput | undefined): Observable<DirectoryDescriptorDto> {
//         let url_ = this.baseUrl + "/api/file-management/directory-descriptor";
//         url_ = url_.replace(/[?&]$/, "");
//
//         const content_ = JSON.stringify(body);
//
//         let options_ : any = {
//             body: content_,
//             observe: "response",
//             responseType: "blob",
//             headers: new HttpHeaders({
//                 "Content-Type": "application/json",
//                 "Accept": "text/plain"
//             })
//         };
//
//         return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
//             return this.processDirectoryDescriptorPost(response_);
//         })).pipe(_observableCatch((response_: any) => {
//             if (response_ instanceof HttpResponseBase) {
//                 try {
//                     return this.processDirectoryDescriptorPost(<any>response_);
//                 } catch (e) {
//                     return <Observable<DirectoryDescriptorDto>><any>_observableThrow(e);
//                 }
//             } else
//                 return <Observable<DirectoryDescriptorDto>><any>_observableThrow(response_);
//         }));
//     }
//
//     protected processDirectoryDescriptorPost(response: HttpResponseBase): Observable<DirectoryDescriptorDto> {
//         const status = response.status;
//         const responseBlob =
//             response instanceof HttpResponse ? response.body :
//             (<any>response).error instanceof Blob ? (<any>response).error : undefined;
//
//         let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
//         if (status === 200) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result200: any = null;
//             let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result200 = DirectoryDescriptorDto.fromJS(resultData200);
//             return _observableOf(result200);
//             }));
//         } else if (status === 403) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result403: any = null;
//             let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result403 = RemoteServiceErrorResponse.fromJS(resultData403);
//             return throwException("Forbidden", status, _responseText, _headers, result403);
//             }));
//         } else if (status === 401) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result401: any = null;
//             let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result401 = RemoteServiceErrorResponse.fromJS(resultData401);
//             return throwException("Unauthorized", status, _responseText, _headers, result401);
//             }));
//         } else if (status === 400) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result400: any = null;
//             let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result400 = RemoteServiceErrorResponse.fromJS(resultData400);
//             return throwException("Bad Request", status, _responseText, _headers, result400);
//             }));
//         } else if (status === 404) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result404: any = null;
//             let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result404 = RemoteServiceErrorResponse.fromJS(resultData404);
//             return throwException("Not Found", status, _responseText, _headers, result404);
//             }));
//         } else if (status === 501) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result501: any = null;
//             let resultData501 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result501 = RemoteServiceErrorResponse.fromJS(resultData501);
//             return throwException("Server Error", status, _responseText, _headers, result501);
//             }));
//         } else if (status === 500) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result500: any = null;
//             let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result500 = RemoteServiceErrorResponse.fromJS(resultData500);
//             return throwException("Server Error", status, _responseText, _headers, result500);
//             }));
//         } else if (status !== 200 && status !== 204) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             return throwException("An unexpected server error occurred.", status, _responseText, _headers);
//             }));
//         }
//         return _observableOf<DirectoryDescriptorDto>(<any>null);
//     }
//
//     /**
//      * @param filter (optional)
//      * @param sorting (optional)
//      * @param id (optional)
//      * @return Success
//      */
//     directoryDescriptorGet(filter: string | undefined, sorting: string | undefined, id: string | undefined): Observable<PagedResultDto_1OfOfDirectoryContentDtoAndContractsAnd_0AndCulture_neutralAndPublicKeyToken_null> {
//         let url_ = this.baseUrl + "/api/file-management/directory-descriptor?";
//         if (filter === null)
//             throw new Error("The parameter 'filter' cannot be null.");
//         else if (filter !== undefined)
//             url_ += "Filter=" + encodeURIComponent("" + filter) + "&";
//         if (sorting === null)
//             throw new Error("The parameter 'sorting' cannot be null.");
//         else if (sorting !== undefined)
//             url_ += "Sorting=" + encodeURIComponent("" + sorting) + "&";
//         if (id === null)
//             throw new Error("The parameter 'id' cannot be null.");
//         else if (id !== undefined)
//             url_ += "Id=" + encodeURIComponent("" + id) + "&";
//         url_ = url_.replace(/[?&]$/, "");
//
//         let options_ : any = {
//             observe: "response",
//             responseType: "blob",
//             headers: new HttpHeaders({
//                 "Accept": "text/plain"
//             })
//         };
//
//         return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
//             return this.processDirectoryDescriptorGet(response_);
//         })).pipe(_observableCatch((response_: any) => {
//             if (response_ instanceof HttpResponseBase) {
//                 try {
//                     return this.processDirectoryDescriptorGet(<any>response_);
//                 } catch (e) {
//                     return <Observable<PagedResultDto_1OfOfDirectoryContentDtoAndContractsAnd_0AndCulture_neutralAndPublicKeyToken_null>><any>_observableThrow(e);
//                 }
//             } else
//                 return <Observable<PagedResultDto_1OfOfDirectoryContentDtoAndContractsAnd_0AndCulture_neutralAndPublicKeyToken_null>><any>_observableThrow(response_);
//         }));
//     }
//
//     protected processDirectoryDescriptorGet(response: HttpResponseBase): Observable<PagedResultDto_1OfOfDirectoryContentDtoAndContractsAnd_0AndCulture_neutralAndPublicKeyToken_null> {
//         const status = response.status;
//         const responseBlob =
//             response instanceof HttpResponse ? response.body :
//             (<any>response).error instanceof Blob ? (<any>response).error : undefined;
//
//         let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
//         if (status === 200) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result200: any = null;
//             let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result200 = PagedResultDto_1OfOfDirectoryContentDtoAndContractsAnd_0AndCulture_neutralAndPublicKeyToken_null.fromJS(resultData200);
//             return _observableOf(result200);
//             }));
//         } else if (status === 403) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result403: any = null;
//             let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result403 = RemoteServiceErrorResponse.fromJS(resultData403);
//             return throwException("Forbidden", status, _responseText, _headers, result403);
//             }));
//         } else if (status === 401) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result401: any = null;
//             let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result401 = RemoteServiceErrorResponse.fromJS(resultData401);
//             return throwException("Unauthorized", status, _responseText, _headers, result401);
//             }));
//         } else if (status === 400) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result400: any = null;
//             let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result400 = RemoteServiceErrorResponse.fromJS(resultData400);
//             return throwException("Bad Request", status, _responseText, _headers, result400);
//             }));
//         } else if (status === 404) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result404: any = null;
//             let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result404 = RemoteServiceErrorResponse.fromJS(resultData404);
//             return throwException("Not Found", status, _responseText, _headers, result404);
//             }));
//         } else if (status === 501) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result501: any = null;
//             let resultData501 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result501 = RemoteServiceErrorResponse.fromJS(resultData501);
//             return throwException("Server Error", status, _responseText, _headers, result501);
//             }));
//         } else if (status === 500) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result500: any = null;
//             let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result500 = RemoteServiceErrorResponse.fromJS(resultData500);
//             return throwException("Server Error", status, _responseText, _headers, result500);
//             }));
//         } else if (status !== 200 && status !== 204) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             return throwException("An unexpected server error occurred.", status, _responseText, _headers);
//             }));
//         }
//         return _observableOf<PagedResultDto_1OfOfDirectoryContentDtoAndContractsAnd_0AndCulture_neutralAndPublicKeyToken_null>(<any>null);
//     }
//
//     /**
//      * @return Success
//      */
//     fileDescriptorGet(id: string): Observable<FileDescriptorDto> {
//         let url_ = this.baseUrl + "/api/file-management/file-descriptor/{id}";
//         if (id === undefined || id === null)
//             throw new Error("The parameter 'id' must be defined.");
//         url_ = url_.replace("{id}", encodeURIComponent("" + id));
//         url_ = url_.replace(/[?&]$/, "");
//
//         let options_ : any = {
//             observe: "response",
//             responseType: "blob",
//             headers: new HttpHeaders({
//                 "Accept": "text/plain"
//             })
//         };
//
//         return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
//             return this.processFileDescriptorGet(response_);
//         })).pipe(_observableCatch((response_: any) => {
//             if (response_ instanceof HttpResponseBase) {
//                 try {
//                     return this.processFileDescriptorGet(<any>response_);
//                 } catch (e) {
//                     return <Observable<FileDescriptorDto>><any>_observableThrow(e);
//                 }
//             } else
//                 return <Observable<FileDescriptorDto>><any>_observableThrow(response_);
//         }));
//     }
//
//     protected processFileDescriptorGet(response: HttpResponseBase): Observable<FileDescriptorDto> {
//         const status = response.status;
//         const responseBlob =
//             response instanceof HttpResponse ? response.body :
//             (<any>response).error instanceof Blob ? (<any>response).error : undefined;
//
//         let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
//         if (status === 200) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result200: any = null;
//             let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result200 = FileDescriptorDto.fromJS(resultData200);
//             return _observableOf(result200);
//             }));
//         } else if (status === 403) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result403: any = null;
//             let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result403 = RemoteServiceErrorResponse.fromJS(resultData403);
//             return throwException("Forbidden", status, _responseText, _headers, result403);
//             }));
//         } else if (status === 401) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result401: any = null;
//             let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result401 = RemoteServiceErrorResponse.fromJS(resultData401);
//             return throwException("Unauthorized", status, _responseText, _headers, result401);
//             }));
//         } else if (status === 400) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result400: any = null;
//             let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result400 = RemoteServiceErrorResponse.fromJS(resultData400);
//             return throwException("Bad Request", status, _responseText, _headers, result400);
//             }));
//         } else if (status === 404) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result404: any = null;
//             let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result404 = RemoteServiceErrorResponse.fromJS(resultData404);
//             return throwException("Not Found", status, _responseText, _headers, result404);
//             }));
//         } else if (status === 501) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result501: any = null;
//             let resultData501 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result501 = RemoteServiceErrorResponse.fromJS(resultData501);
//             return throwException("Server Error", status, _responseText, _headers, result501);
//             }));
//         } else if (status === 500) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result500: any = null;
//             let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result500 = RemoteServiceErrorResponse.fromJS(resultData500);
//             return throwException("Server Error", status, _responseText, _headers, result500);
//             }));
//         } else if (status !== 200 && status !== 204) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             return throwException("An unexpected server error occurred.", status, _responseText, _headers);
//             }));
//         }
//         return _observableOf<FileDescriptorDto>(<any>null);
//     }
//
//     /**
//      * @param body (optional)
//      * @return Success
//      */
//     fileDescriptorPost(id: string, body: RenameFileInput | undefined): Observable<FileDescriptorDto> {
//         let url_ = this.baseUrl + "/api/file-management/file-descriptor/{id}";
//         if (id === undefined || id === null)
//             throw new Error("The parameter 'id' must be defined.");
//         url_ = url_.replace("{id}", encodeURIComponent("" + id));
//         url_ = url_.replace(/[?&]$/, "");
//
//         const content_ = JSON.stringify(body);
//
//         let options_ : any = {
//             body: content_,
//             observe: "response",
//             responseType: "blob",
//             headers: new HttpHeaders({
//                 "Content-Type": "application/json",
//                 "Accept": "text/plain"
//             })
//         };
//
//         return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
//             return this.processFileDescriptorPost(response_);
//         })).pipe(_observableCatch((response_: any) => {
//             if (response_ instanceof HttpResponseBase) {
//                 try {
//                     return this.processFileDescriptorPost(<any>response_);
//                 } catch (e) {
//                     return <Observable<FileDescriptorDto>><any>_observableThrow(e);
//                 }
//             } else
//                 return <Observable<FileDescriptorDto>><any>_observableThrow(response_);
//         }));
//     }
//
//     protected processFileDescriptorPost(response: HttpResponseBase): Observable<FileDescriptorDto> {
//         const status = response.status;
//         const responseBlob =
//             response instanceof HttpResponse ? response.body :
//             (<any>response).error instanceof Blob ? (<any>response).error : undefined;
//
//         let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
//         if (status === 200) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result200: any = null;
//             let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result200 = FileDescriptorDto.fromJS(resultData200);
//             return _observableOf(result200);
//             }));
//         } else if (status === 403) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result403: any = null;
//             let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result403 = RemoteServiceErrorResponse.fromJS(resultData403);
//             return throwException("Forbidden", status, _responseText, _headers, result403);
//             }));
//         } else if (status === 401) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result401: any = null;
//             let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result401 = RemoteServiceErrorResponse.fromJS(resultData401);
//             return throwException("Unauthorized", status, _responseText, _headers, result401);
//             }));
//         } else if (status === 400) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result400: any = null;
//             let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result400 = RemoteServiceErrorResponse.fromJS(resultData400);
//             return throwException("Bad Request", status, _responseText, _headers, result400);
//             }));
//         } else if (status === 404) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result404: any = null;
//             let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result404 = RemoteServiceErrorResponse.fromJS(resultData404);
//             return throwException("Not Found", status, _responseText, _headers, result404);
//             }));
//         } else if (status === 501) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result501: any = null;
//             let resultData501 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result501 = RemoteServiceErrorResponse.fromJS(resultData501);
//             return throwException("Server Error", status, _responseText, _headers, result501);
//             }));
//         } else if (status === 500) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result500: any = null;
//             let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result500 = RemoteServiceErrorResponse.fromJS(resultData500);
//             return throwException("Server Error", status, _responseText, _headers, result500);
//             }));
//         } else if (status !== 200 && status !== 204) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             return throwException("An unexpected server error occurred.", status, _responseText, _headers);
//             }));
//         }
//         return _observableOf<FileDescriptorDto>(<any>null);
//     }
//
//     /**
//      * @return Success
//      */
//     fileDescriptorDelete(id: string): Observable<void> {
//         let url_ = this.baseUrl + "/api/file-management/file-descriptor/{id}";
//         if (id === undefined || id === null)
//             throw new Error("The parameter 'id' must be defined.");
//         url_ = url_.replace("{id}", encodeURIComponent("" + id));
//         url_ = url_.replace(/[?&]$/, "");
//
//         let options_ : any = {
//             observe: "response",
//             responseType: "blob",
//             headers: new HttpHeaders({
//             })
//         };
//
//         return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
//             return this.processFileDescriptorDelete(response_);
//         })).pipe(_observableCatch((response_: any) => {
//             if (response_ instanceof HttpResponseBase) {
//                 try {
//                     return this.processFileDescriptorDelete(<any>response_);
//                 } catch (e) {
//                     return <Observable<void>><any>_observableThrow(e);
//                 }
//             } else
//                 return <Observable<void>><any>_observableThrow(response_);
//         }));
//     }
//
//     protected processFileDescriptorDelete(response: HttpResponseBase): Observable<void> {
//         const status = response.status;
//         const responseBlob =
//             response instanceof HttpResponse ? response.body :
//             (<any>response).error instanceof Blob ? (<any>response).error : undefined;
//
//         let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
//         if (status === 200) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             return _observableOf<void>(<any>null);
//             }));
//         } else if (status === 403) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result403: any = null;
//             let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result403 = RemoteServiceErrorResponse.fromJS(resultData403);
//             return throwException("Forbidden", status, _responseText, _headers, result403);
//             }));
//         } else if (status === 401) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result401: any = null;
//             let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result401 = RemoteServiceErrorResponse.fromJS(resultData401);
//             return throwException("Unauthorized", status, _responseText, _headers, result401);
//             }));
//         } else if (status === 400) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result400: any = null;
//             let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result400 = RemoteServiceErrorResponse.fromJS(resultData400);
//             return throwException("Bad Request", status, _responseText, _headers, result400);
//             }));
//         } else if (status === 404) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result404: any = null;
//             let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result404 = RemoteServiceErrorResponse.fromJS(resultData404);
//             return throwException("Not Found", status, _responseText, _headers, result404);
//             }));
//         } else if (status === 501) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result501: any = null;
//             let resultData501 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result501 = RemoteServiceErrorResponse.fromJS(resultData501);
//             return throwException("Server Error", status, _responseText, _headers, result501);
//             }));
//         } else if (status === 500) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result500: any = null;
//             let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result500 = RemoteServiceErrorResponse.fromJS(resultData500);
//             return throwException("Server Error", status, _responseText, _headers, result500);
//             }));
//         } else if (status !== 200 && status !== 204) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             return throwException("An unexpected server error occurred.", status, _responseText, _headers);
//             }));
//         }
//         return _observableOf<void>(<any>null);
//     }
//
//     /**
//      * @param directoryId (optional)
//      * @return Success
//      */
//     fileDescriptorGet(directoryId: string | undefined): Observable<ListResultDto_1OfOfFileDescriptorDtoAndContractsAnd_0AndCulture_neutralAndPublicKeyToken_null> {
//         let url_ = this.baseUrl + "/api/file-management/file-descriptor?";
//         if (directoryId === null)
//             throw new Error("The parameter 'directoryId' cannot be null.");
//         else if (directoryId !== undefined)
//             url_ += "directoryId=" + encodeURIComponent("" + directoryId) + "&";
//         url_ = url_.replace(/[?&]$/, "");
//
//         let options_ : any = {
//             observe: "response",
//             responseType: "blob",
//             headers: new HttpHeaders({
//                 "Accept": "text/plain"
//             })
//         };
//
//         return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
//             return this.processFileDescriptorGet(response_);
//         })).pipe(_observableCatch((response_: any) => {
//             if (response_ instanceof HttpResponseBase) {
//                 try {
//                     return this.processFileDescriptorGet(<any>response_);
//                 } catch (e) {
//                     return <Observable<ListResultDto_1OfOfFileDescriptorDtoAndContractsAnd_0AndCulture_neutralAndPublicKeyToken_null>><any>_observableThrow(e);
//                 }
//             } else
//                 return <Observable<ListResultDto_1OfOfFileDescriptorDtoAndContractsAnd_0AndCulture_neutralAndPublicKeyToken_null>><any>_observableThrow(response_);
//         }));
//     }
//
//     protected processFileDescriptorGet(response: HttpResponseBase): Observable<ListResultDto_1OfOfFileDescriptorDtoAndContractsAnd_0AndCulture_neutralAndPublicKeyToken_null> {
//         const status = response.status;
//         const responseBlob =
//             response instanceof HttpResponse ? response.body :
//             (<any>response).error instanceof Blob ? (<any>response).error : undefined;
//
//         let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
//         if (status === 200) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result200: any = null;
//             let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result200 = ListResultDto_1OfOfFileDescriptorDtoAndContractsAnd_0AndCulture_neutralAndPublicKeyToken_null.fromJS(resultData200);
//             return _observableOf(result200);
//             }));
//         } else if (status === 403) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result403: any = null;
//             let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result403 = RemoteServiceErrorResponse.fromJS(resultData403);
//             return throwException("Forbidden", status, _responseText, _headers, result403);
//             }));
//         } else if (status === 401) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result401: any = null;
//             let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result401 = RemoteServiceErrorResponse.fromJS(resultData401);
//             return throwException("Unauthorized", status, _responseText, _headers, result401);
//             }));
//         } else if (status === 400) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result400: any = null;
//             let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result400 = RemoteServiceErrorResponse.fromJS(resultData400);
//             return throwException("Bad Request", status, _responseText, _headers, result400);
//             }));
//         } else if (status === 404) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result404: any = null;
//             let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result404 = RemoteServiceErrorResponse.fromJS(resultData404);
//             return throwException("Not Found", status, _responseText, _headers, result404);
//             }));
//         } else if (status === 501) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result501: any = null;
//             let resultData501 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result501 = RemoteServiceErrorResponse.fromJS(resultData501);
//             return throwException("Server Error", status, _responseText, _headers, result501);
//             }));
//         } else if (status === 500) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result500: any = null;
//             let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result500 = RemoteServiceErrorResponse.fromJS(resultData500);
//             return throwException("Server Error", status, _responseText, _headers, result500);
//             }));
//         } else if (status !== 200 && status !== 204) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             return throwException("An unexpected server error occurred.", status, _responseText, _headers);
//             }));
//         }
//         return _observableOf<ListResultDto_1OfOfFileDescriptorDtoAndContractsAnd_0AndCulture_neutralAndPublicKeyToken_null>(<any>null);
//     }
// }
//
// @Injectable({providedIn: 'root'})
// export class DirectoryDescriptorServiceProxy {
//     private http: HttpClient;
//     private baseUrl: string;
//     protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;
//
//     constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
//         this.http = http;
//         this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
//     }
//
//     /**
//      * @param parentId (optional)
//      * @return Success
//      */
//     subDirectories(parentId: string | undefined): Observable<ListResultDto_1OfOfDirectoryDescriptorInfoDtoAndContractsAnd_0AndCulture_neutralAndPublicKeyToken_null> {
//         let url_ = this.baseUrl + "/api/file-management/directory-descriptor/sub-directories?";
//         if (parentId === null)
//             throw new Error("The parameter 'parentId' cannot be null.");
//         else if (parentId !== undefined)
//             url_ += "parentId=" + encodeURIComponent("" + parentId) + "&";
//         url_ = url_.replace(/[?&]$/, "");
//
//         let options_ : any = {
//             observe: "response",
//             responseType: "blob",
//             headers: new HttpHeaders({
//                 "Accept": "text/plain"
//             })
//         };
//
//         return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
//             return this.processSubDirectories(response_);
//         })).pipe(_observableCatch((response_: any) => {
//             if (response_ instanceof HttpResponseBase) {
//                 try {
//                     return this.processSubDirectories(<any>response_);
//                 } catch (e) {
//                     return <Observable<ListResultDto_1OfOfDirectoryDescriptorInfoDtoAndContractsAnd_0AndCulture_neutralAndPublicKeyToken_null>><any>_observableThrow(e);
//                 }
//             } else
//                 return <Observable<ListResultDto_1OfOfDirectoryDescriptorInfoDtoAndContractsAnd_0AndCulture_neutralAndPublicKeyToken_null>><any>_observableThrow(response_);
//         }));
//     }
//
//     protected processSubDirectories(response: HttpResponseBase): Observable<ListResultDto_1OfOfDirectoryDescriptorInfoDtoAndContractsAnd_0AndCulture_neutralAndPublicKeyToken_null> {
//         const status = response.status;
//         const responseBlob =
//             response instanceof HttpResponse ? response.body :
//             (<any>response).error instanceof Blob ? (<any>response).error : undefined;
//
//         let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
//         if (status === 200) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result200: any = null;
//             let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result200 = ListResultDto_1OfOfDirectoryDescriptorInfoDtoAndContractsAnd_0AndCulture_neutralAndPublicKeyToken_null.fromJS(resultData200);
//             return _observableOf(result200);
//             }));
//         } else if (status === 403) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result403: any = null;
//             let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result403 = RemoteServiceErrorResponse.fromJS(resultData403);
//             return throwException("Forbidden", status, _responseText, _headers, result403);
//             }));
//         } else if (status === 401) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result401: any = null;
//             let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result401 = RemoteServiceErrorResponse.fromJS(resultData401);
//             return throwException("Unauthorized", status, _responseText, _headers, result401);
//             }));
//         } else if (status === 400) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result400: any = null;
//             let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result400 = RemoteServiceErrorResponse.fromJS(resultData400);
//             return throwException("Bad Request", status, _responseText, _headers, result400);
//             }));
//         } else if (status === 404) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result404: any = null;
//             let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result404 = RemoteServiceErrorResponse.fromJS(resultData404);
//             return throwException("Not Found", status, _responseText, _headers, result404);
//             }));
//         } else if (status === 501) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result501: any = null;
//             let resultData501 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result501 = RemoteServiceErrorResponse.fromJS(resultData501);
//             return throwException("Server Error", status, _responseText, _headers, result501);
//             }));
//         } else if (status === 500) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result500: any = null;
//             let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result500 = RemoteServiceErrorResponse.fromJS(resultData500);
//             return throwException("Server Error", status, _responseText, _headers, result500);
//             }));
//         } else if (status !== 200 && status !== 204) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             return throwException("An unexpected server error occurred.", status, _responseText, _headers);
//             }));
//         }
//         return _observableOf<ListResultDto_1OfOfDirectoryDescriptorInfoDtoAndContractsAnd_0AndCulture_neutralAndPublicKeyToken_null>(<any>null);
//     }
//
//     /**
//      * @param body (optional)
//      * @return Success
//      */
//     move(body: MoveDirectoryInput | undefined): Observable<DirectoryDescriptorDto> {
//         let url_ = this.baseUrl + "/api/file-management/directory-descriptor/move";
//         url_ = url_.replace(/[?&]$/, "");
//
//         const content_ = JSON.stringify(body);
//
//         let options_ : any = {
//             body: content_,
//             observe: "response",
//             responseType: "blob",
//             headers: new HttpHeaders({
//                 "Content-Type": "application/json",
//                 "Accept": "text/plain"
//             })
//         };
//
//         return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
//             return this.processMove(response_);
//         })).pipe(_observableCatch((response_: any) => {
//             if (response_ instanceof HttpResponseBase) {
//                 try {
//                     return this.processMove(<any>response_);
//                 } catch (e) {
//                     return <Observable<DirectoryDescriptorDto>><any>_observableThrow(e);
//                 }
//             } else
//                 return <Observable<DirectoryDescriptorDto>><any>_observableThrow(response_);
//         }));
//     }
//
//     protected processMove(response: HttpResponseBase): Observable<DirectoryDescriptorDto> {
//         const status = response.status;
//         const responseBlob =
//             response instanceof HttpResponse ? response.body :
//             (<any>response).error instanceof Blob ? (<any>response).error : undefined;
//
//         let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
//         if (status === 200) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result200: any = null;
//             let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result200 = DirectoryDescriptorDto.fromJS(resultData200);
//             return _observableOf(result200);
//             }));
//         } else if (status === 403) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result403: any = null;
//             let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result403 = RemoteServiceErrorResponse.fromJS(resultData403);
//             return throwException("Forbidden", status, _responseText, _headers, result403);
//             }));
//         } else if (status === 401) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result401: any = null;
//             let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result401 = RemoteServiceErrorResponse.fromJS(resultData401);
//             return throwException("Unauthorized", status, _responseText, _headers, result401);
//             }));
//         } else if (status === 400) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result400: any = null;
//             let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result400 = RemoteServiceErrorResponse.fromJS(resultData400);
//             return throwException("Bad Request", status, _responseText, _headers, result400);
//             }));
//         } else if (status === 404) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result404: any = null;
//             let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result404 = RemoteServiceErrorResponse.fromJS(resultData404);
//             return throwException("Not Found", status, _responseText, _headers, result404);
//             }));
//         } else if (status === 501) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result501: any = null;
//             let resultData501 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result501 = RemoteServiceErrorResponse.fromJS(resultData501);
//             return throwException("Server Error", status, _responseText, _headers, result501);
//             }));
//         } else if (status === 500) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result500: any = null;
//             let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result500 = RemoteServiceErrorResponse.fromJS(resultData500);
//             return throwException("Server Error", status, _responseText, _headers, result500);
//             }));
//         } else if (status !== 200 && status !== 204) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             return throwException("An unexpected server error occurred.", status, _responseText, _headers);
//             }));
//         }
//         return _observableOf<DirectoryDescriptorDto>(<any>null);
//     }
// }
//
// @Injectable({providedIn: 'root'})
// export class SaasServiceProxy {
//     private http: HttpClient;
//     private baseUrl: string;
//     protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;
//
//     constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
//         this.http = http;
//         this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
//     }
//
//     /**
//      * @return Success
//      */
//     editionsGet(id: string): Observable<EditionDto> {
//         let url_ = this.baseUrl + "/api/saas/editions/{id}";
//         if (id === undefined || id === null)
//             throw new Error("The parameter 'id' must be defined.");
//         url_ = url_.replace("{id}", encodeURIComponent("" + id));
//         url_ = url_.replace(/[?&]$/, "");
//
//         let options_ : any = {
//             observe: "response",
//             responseType: "blob",
//             headers: new HttpHeaders({
//                 "Accept": "text/plain"
//             })
//         };
//
//         return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
//             return this.processEditionsGet(response_);
//         })).pipe(_observableCatch((response_: any) => {
//             if (response_ instanceof HttpResponseBase) {
//                 try {
//                     return this.processEditionsGet(<any>response_);
//                 } catch (e) {
//                     return <Observable<EditionDto>><any>_observableThrow(e);
//                 }
//             } else
//                 return <Observable<EditionDto>><any>_observableThrow(response_);
//         }));
//     }
//
//     protected processEditionsGet(response: HttpResponseBase): Observable<EditionDto> {
//         const status = response.status;
//         const responseBlob =
//             response instanceof HttpResponse ? response.body :
//             (<any>response).error instanceof Blob ? (<any>response).error : undefined;
//
//         let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
//         if (status === 200) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result200: any = null;
//             let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result200 = EditionDto.fromJS(resultData200);
//             return _observableOf(result200);
//             }));
//         } else if (status === 403) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result403: any = null;
//             let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result403 = RemoteServiceErrorResponse.fromJS(resultData403);
//             return throwException("Forbidden", status, _responseText, _headers, result403);
//             }));
//         } else if (status === 401) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result401: any = null;
//             let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result401 = RemoteServiceErrorResponse.fromJS(resultData401);
//             return throwException("Unauthorized", status, _responseText, _headers, result401);
//             }));
//         } else if (status === 400) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result400: any = null;
//             let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result400 = RemoteServiceErrorResponse.fromJS(resultData400);
//             return throwException("Bad Request", status, _responseText, _headers, result400);
//             }));
//         } else if (status === 404) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result404: any = null;
//             let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result404 = RemoteServiceErrorResponse.fromJS(resultData404);
//             return throwException("Not Found", status, _responseText, _headers, result404);
//             }));
//         } else if (status === 501) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result501: any = null;
//             let resultData501 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result501 = RemoteServiceErrorResponse.fromJS(resultData501);
//             return throwException("Server Error", status, _responseText, _headers, result501);
//             }));
//         } else if (status === 500) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result500: any = null;
//             let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result500 = RemoteServiceErrorResponse.fromJS(resultData500);
//             return throwException("Server Error", status, _responseText, _headers, result500);
//             }));
//         } else if (status !== 200 && status !== 204) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             return throwException("An unexpected server error occurred.", status, _responseText, _headers);
//             }));
//         }
//         return _observableOf<EditionDto>(<any>null);
//     }
//
//     /**
//      * @param body (optional)
//      * @return Success
//      */
//     editionsPut(id: string, body: EditionUpdateDto | undefined): Observable<EditionDto> {
//         let url_ = this.baseUrl + "/api/saas/editions/{id}";
//         if (id === undefined || id === null)
//             throw new Error("The parameter 'id' must be defined.");
//         url_ = url_.replace("{id}", encodeURIComponent("" + id));
//         url_ = url_.replace(/[?&]$/, "");
//
//         const content_ = JSON.stringify(body);
//
//         let options_ : any = {
//             body: content_,
//             observe: "response",
//             responseType: "blob",
//             headers: new HttpHeaders({
//                 "Content-Type": "application/json",
//                 "Accept": "text/plain"
//             })
//         };
//
//         return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
//             return this.processEditionsPut(response_);
//         })).pipe(_observableCatch((response_: any) => {
//             if (response_ instanceof HttpResponseBase) {
//                 try {
//                     return this.processEditionsPut(<any>response_);
//                 } catch (e) {
//                     return <Observable<EditionDto>><any>_observableThrow(e);
//                 }
//             } else
//                 return <Observable<EditionDto>><any>_observableThrow(response_);
//         }));
//     }
//
//     protected processEditionsPut(response: HttpResponseBase): Observable<EditionDto> {
//         const status = response.status;
//         const responseBlob =
//             response instanceof HttpResponse ? response.body :
//             (<any>response).error instanceof Blob ? (<any>response).error : undefined;
//
//         let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
//         if (status === 200) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result200: any = null;
//             let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result200 = EditionDto.fromJS(resultData200);
//             return _observableOf(result200);
//             }));
//         } else if (status === 403) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result403: any = null;
//             let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result403 = RemoteServiceErrorResponse.fromJS(resultData403);
//             return throwException("Forbidden", status, _responseText, _headers, result403);
//             }));
//         } else if (status === 401) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result401: any = null;
//             let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result401 = RemoteServiceErrorResponse.fromJS(resultData401);
//             return throwException("Unauthorized", status, _responseText, _headers, result401);
//             }));
//         } else if (status === 400) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result400: any = null;
//             let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result400 = RemoteServiceErrorResponse.fromJS(resultData400);
//             return throwException("Bad Request", status, _responseText, _headers, result400);
//             }));
//         } else if (status === 404) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result404: any = null;
//             let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result404 = RemoteServiceErrorResponse.fromJS(resultData404);
//             return throwException("Not Found", status, _responseText, _headers, result404);
//             }));
//         } else if (status === 501) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result501: any = null;
//             let resultData501 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result501 = RemoteServiceErrorResponse.fromJS(resultData501);
//             return throwException("Server Error", status, _responseText, _headers, result501);
//             }));
//         } else if (status === 500) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result500: any = null;
//             let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result500 = RemoteServiceErrorResponse.fromJS(resultData500);
//             return throwException("Server Error", status, _responseText, _headers, result500);
//             }));
//         } else if (status !== 200 && status !== 204) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             return throwException("An unexpected server error occurred.", status, _responseText, _headers);
//             }));
//         }
//         return _observableOf<EditionDto>(<any>null);
//     }
//
//     /**
//      * @return Success
//      */
//     editionsDelete(id: string): Observable<void> {
//         let url_ = this.baseUrl + "/api/saas/editions/{id}";
//         if (id === undefined || id === null)
//             throw new Error("The parameter 'id' must be defined.");
//         url_ = url_.replace("{id}", encodeURIComponent("" + id));
//         url_ = url_.replace(/[?&]$/, "");
//
//         let options_ : any = {
//             observe: "response",
//             responseType: "blob",
//             headers: new HttpHeaders({
//             })
//         };
//
//         return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
//             return this.processEditionsDelete(response_);
//         })).pipe(_observableCatch((response_: any) => {
//             if (response_ instanceof HttpResponseBase) {
//                 try {
//                     return this.processEditionsDelete(<any>response_);
//                 } catch (e) {
//                     return <Observable<void>><any>_observableThrow(e);
//                 }
//             } else
//                 return <Observable<void>><any>_observableThrow(response_);
//         }));
//     }
//
//     protected processEditionsDelete(response: HttpResponseBase): Observable<void> {
//         const status = response.status;
//         const responseBlob =
//             response instanceof HttpResponse ? response.body :
//             (<any>response).error instanceof Blob ? (<any>response).error : undefined;
//
//         let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
//         if (status === 200) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             return _observableOf<void>(<any>null);
//             }));
//         } else if (status === 403) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result403: any = null;
//             let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result403 = RemoteServiceErrorResponse.fromJS(resultData403);
//             return throwException("Forbidden", status, _responseText, _headers, result403);
//             }));
//         } else if (status === 401) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result401: any = null;
//             let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result401 = RemoteServiceErrorResponse.fromJS(resultData401);
//             return throwException("Unauthorized", status, _responseText, _headers, result401);
//             }));
//         } else if (status === 400) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result400: any = null;
//             let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result400 = RemoteServiceErrorResponse.fromJS(resultData400);
//             return throwException("Bad Request", status, _responseText, _headers, result400);
//             }));
//         } else if (status === 404) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result404: any = null;
//             let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result404 = RemoteServiceErrorResponse.fromJS(resultData404);
//             return throwException("Not Found", status, _responseText, _headers, result404);
//             }));
//         } else if (status === 501) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result501: any = null;
//             let resultData501 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result501 = RemoteServiceErrorResponse.fromJS(resultData501);
//             return throwException("Server Error", status, _responseText, _headers, result501);
//             }));
//         } else if (status === 500) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result500: any = null;
//             let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result500 = RemoteServiceErrorResponse.fromJS(resultData500);
//             return throwException("Server Error", status, _responseText, _headers, result500);
//             }));
//         } else if (status !== 200 && status !== 204) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             return throwException("An unexpected server error occurred.", status, _responseText, _headers);
//             }));
//         }
//         return _observableOf<void>(<any>null);
//     }
//
//     /**
//      * @param filter (optional)
//      * @param sorting (optional)
//      * @param skipCount (optional)
//      * @param maxResultCount (optional)
//      * @return Success
//      */
//     editionsGet(filter: string | undefined, sorting: string | undefined, skipCount: number | undefined, maxResultCount: number | undefined): Observable<PagedResultDto_1OfOfEditionDtoAndContractsAnd_0AndCulture_neutralAndPublicKeyToken_null> {
//         let url_ = this.baseUrl + "/api/saas/editions?";
//         if (filter === null)
//             throw new Error("The parameter 'filter' cannot be null.");
//         else if (filter !== undefined)
//             url_ += "Filter=" + encodeURIComponent("" + filter) + "&";
//         if (sorting === null)
//             throw new Error("The parameter 'sorting' cannot be null.");
//         else if (sorting !== undefined)
//             url_ += "Sorting=" + encodeURIComponent("" + sorting) + "&";
//         if (skipCount === null)
//             throw new Error("The parameter 'skipCount' cannot be null.");
//         else if (skipCount !== undefined)
//             url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&";
//         if (maxResultCount === null)
//             throw new Error("The parameter 'maxResultCount' cannot be null.");
//         else if (maxResultCount !== undefined)
//             url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&";
//         url_ = url_.replace(/[?&]$/, "");
//
//         let options_ : any = {
//             observe: "response",
//             responseType: "blob",
//             headers: new HttpHeaders({
//                 "Accept": "text/plain"
//             })
//         };
//
//         return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
//             return this.processEditionsGet(response_);
//         })).pipe(_observableCatch((response_: any) => {
//             if (response_ instanceof HttpResponseBase) {
//                 try {
//                     return this.processEditionsGet(<any>response_);
//                 } catch (e) {
//                     return <Observable<PagedResultDto_1OfOfEditionDtoAndContractsAnd_0AndCulture_neutralAndPublicKeyToken_null>><any>_observableThrow(e);
//                 }
//             } else
//                 return <Observable<PagedResultDto_1OfOfEditionDtoAndContractsAnd_0AndCulture_neutralAndPublicKeyToken_null>><any>_observableThrow(response_);
//         }));
//     }
//
//     protected processEditionsGet(response: HttpResponseBase): Observable<PagedResultDto_1OfOfEditionDtoAndContractsAnd_0AndCulture_neutralAndPublicKeyToken_null> {
//         const status = response.status;
//         const responseBlob =
//             response instanceof HttpResponse ? response.body :
//             (<any>response).error instanceof Blob ? (<any>response).error : undefined;
//
//         let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
//         if (status === 200) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result200: any = null;
//             let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result200 = PagedResultDto_1OfOfEditionDtoAndContractsAnd_0AndCulture_neutralAndPublicKeyToken_null.fromJS(resultData200);
//             return _observableOf(result200);
//             }));
//         } else if (status === 403) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result403: any = null;
//             let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result403 = RemoteServiceErrorResponse.fromJS(resultData403);
//             return throwException("Forbidden", status, _responseText, _headers, result403);
//             }));
//         } else if (status === 401) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result401: any = null;
//             let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result401 = RemoteServiceErrorResponse.fromJS(resultData401);
//             return throwException("Unauthorized", status, _responseText, _headers, result401);
//             }));
//         } else if (status === 400) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result400: any = null;
//             let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result400 = RemoteServiceErrorResponse.fromJS(resultData400);
//             return throwException("Bad Request", status, _responseText, _headers, result400);
//             }));
//         } else if (status === 404) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result404: any = null;
//             let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result404 = RemoteServiceErrorResponse.fromJS(resultData404);
//             return throwException("Not Found", status, _responseText, _headers, result404);
//             }));
//         } else if (status === 501) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result501: any = null;
//             let resultData501 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result501 = RemoteServiceErrorResponse.fromJS(resultData501);
//             return throwException("Server Error", status, _responseText, _headers, result501);
//             }));
//         } else if (status === 500) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result500: any = null;
//             let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result500 = RemoteServiceErrorResponse.fromJS(resultData500);
//             return throwException("Server Error", status, _responseText, _headers, result500);
//             }));
//         } else if (status !== 200 && status !== 204) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             return throwException("An unexpected server error occurred.", status, _responseText, _headers);
//             }));
//         }
//         return _observableOf<PagedResultDto_1OfOfEditionDtoAndContractsAnd_0AndCulture_neutralAndPublicKeyToken_null>(<any>null);
//     }
//
//     /**
//      * @param body (optional)
//      * @return Success
//      */
//     editionsPost(body: EditionCreateDto | undefined): Observable<EditionDto> {
//         let url_ = this.baseUrl + "/api/saas/editions";
//         url_ = url_.replace(/[?&]$/, "");
//
//         const content_ = JSON.stringify(body);
//
//         let options_ : any = {
//             body: content_,
//             observe: "response",
//             responseType: "blob",
//             headers: new HttpHeaders({
//                 "Content-Type": "application/json",
//                 "Accept": "text/plain"
//             })
//         };
//
//         return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
//             return this.processEditionsPost(response_);
//         })).pipe(_observableCatch((response_: any) => {
//             if (response_ instanceof HttpResponseBase) {
//                 try {
//                     return this.processEditionsPost(<any>response_);
//                 } catch (e) {
//                     return <Observable<EditionDto>><any>_observableThrow(e);
//                 }
//             } else
//                 return <Observable<EditionDto>><any>_observableThrow(response_);
//         }));
//     }
//
//     protected processEditionsPost(response: HttpResponseBase): Observable<EditionDto> {
//         const status = response.status;
//         const responseBlob =
//             response instanceof HttpResponse ? response.body :
//             (<any>response).error instanceof Blob ? (<any>response).error : undefined;
//
//         let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
//         if (status === 200) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result200: any = null;
//             let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result200 = EditionDto.fromJS(resultData200);
//             return _observableOf(result200);
//             }));
//         } else if (status === 403) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result403: any = null;
//             let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result403 = RemoteServiceErrorResponse.fromJS(resultData403);
//             return throwException("Forbidden", status, _responseText, _headers, result403);
//             }));
//         } else if (status === 401) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result401: any = null;
//             let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result401 = RemoteServiceErrorResponse.fromJS(resultData401);
//             return throwException("Unauthorized", status, _responseText, _headers, result401);
//             }));
//         } else if (status === 400) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result400: any = null;
//             let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result400 = RemoteServiceErrorResponse.fromJS(resultData400);
//             return throwException("Bad Request", status, _responseText, _headers, result400);
//             }));
//         } else if (status === 404) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result404: any = null;
//             let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result404 = RemoteServiceErrorResponse.fromJS(resultData404);
//             return throwException("Not Found", status, _responseText, _headers, result404);
//             }));
//         } else if (status === 501) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result501: any = null;
//             let resultData501 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result501 = RemoteServiceErrorResponse.fromJS(resultData501);
//             return throwException("Server Error", status, _responseText, _headers, result501);
//             }));
//         } else if (status === 500) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result500: any = null;
//             let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result500 = RemoteServiceErrorResponse.fromJS(resultData500);
//             return throwException("Server Error", status, _responseText, _headers, result500);
//             }));
//         } else if (status !== 200 && status !== 204) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             return throwException("An unexpected server error occurred.", status, _responseText, _headers);
//             }));
//         }
//         return _observableOf<EditionDto>(<any>null);
//     }
//
//     /**
//      * @return Success
//      */
//     tenantsGet(id: string): Observable<SaasTenantDto> {
//         let url_ = this.baseUrl + "/api/saas/tenants/{id}";
//         if (id === undefined || id === null)
//             throw new Error("The parameter 'id' must be defined.");
//         url_ = url_.replace("{id}", encodeURIComponent("" + id));
//         url_ = url_.replace(/[?&]$/, "");
//
//         let options_ : any = {
//             observe: "response",
//             responseType: "blob",
//             headers: new HttpHeaders({
//                 "Accept": "text/plain"
//             })
//         };
//
//         return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
//             return this.processTenantsGet(response_);
//         })).pipe(_observableCatch((response_: any) => {
//             if (response_ instanceof HttpResponseBase) {
//                 try {
//                     return this.processTenantsGet(<any>response_);
//                 } catch (e) {
//                     return <Observable<SaasTenantDto>><any>_observableThrow(e);
//                 }
//             } else
//                 return <Observable<SaasTenantDto>><any>_observableThrow(response_);
//         }));
//     }
//
//     protected processTenantsGet(response: HttpResponseBase): Observable<SaasTenantDto> {
//         const status = response.status;
//         const responseBlob =
//             response instanceof HttpResponse ? response.body :
//             (<any>response).error instanceof Blob ? (<any>response).error : undefined;
//
//         let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
//         if (status === 200) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result200: any = null;
//             let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result200 = SaasTenantDto.fromJS(resultData200);
//             return _observableOf(result200);
//             }));
//         } else if (status === 403) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result403: any = null;
//             let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result403 = RemoteServiceErrorResponse.fromJS(resultData403);
//             return throwException("Forbidden", status, _responseText, _headers, result403);
//             }));
//         } else if (status === 401) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result401: any = null;
//             let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result401 = RemoteServiceErrorResponse.fromJS(resultData401);
//             return throwException("Unauthorized", status, _responseText, _headers, result401);
//             }));
//         } else if (status === 400) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result400: any = null;
//             let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result400 = RemoteServiceErrorResponse.fromJS(resultData400);
//             return throwException("Bad Request", status, _responseText, _headers, result400);
//             }));
//         } else if (status === 404) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result404: any = null;
//             let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result404 = RemoteServiceErrorResponse.fromJS(resultData404);
//             return throwException("Not Found", status, _responseText, _headers, result404);
//             }));
//         } else if (status === 501) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result501: any = null;
//             let resultData501 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result501 = RemoteServiceErrorResponse.fromJS(resultData501);
//             return throwException("Server Error", status, _responseText, _headers, result501);
//             }));
//         } else if (status === 500) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result500: any = null;
//             let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result500 = RemoteServiceErrorResponse.fromJS(resultData500);
//             return throwException("Server Error", status, _responseText, _headers, result500);
//             }));
//         } else if (status !== 200 && status !== 204) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             return throwException("An unexpected server error occurred.", status, _responseText, _headers);
//             }));
//         }
//         return _observableOf<SaasTenantDto>(<any>null);
//     }
//
//     /**
//      * @param body (optional)
//      * @return Success
//      */
//     tenantsPut(id: string, body: SaasTenantUpdateDto | undefined): Observable<SaasTenantDto> {
//         let url_ = this.baseUrl + "/api/saas/tenants/{id}";
//         if (id === undefined || id === null)
//             throw new Error("The parameter 'id' must be defined.");
//         url_ = url_.replace("{id}", encodeURIComponent("" + id));
//         url_ = url_.replace(/[?&]$/, "");
//
//         const content_ = JSON.stringify(body);
//
//         let options_ : any = {
//             body: content_,
//             observe: "response",
//             responseType: "blob",
//             headers: new HttpHeaders({
//                 "Content-Type": "application/json",
//                 "Accept": "text/plain"
//             })
//         };
//
//         return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
//             return this.processTenantsPut(response_);
//         })).pipe(_observableCatch((response_: any) => {
//             if (response_ instanceof HttpResponseBase) {
//                 try {
//                     return this.processTenantsPut(<any>response_);
//                 } catch (e) {
//                     return <Observable<SaasTenantDto>><any>_observableThrow(e);
//                 }
//             } else
//                 return <Observable<SaasTenantDto>><any>_observableThrow(response_);
//         }));
//     }
//
//     protected processTenantsPut(response: HttpResponseBase): Observable<SaasTenantDto> {
//         const status = response.status;
//         const responseBlob =
//             response instanceof HttpResponse ? response.body :
//             (<any>response).error instanceof Blob ? (<any>response).error : undefined;
//
//         let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
//         if (status === 200) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result200: any = null;
//             let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result200 = SaasTenantDto.fromJS(resultData200);
//             return _observableOf(result200);
//             }));
//         } else if (status === 403) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result403: any = null;
//             let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result403 = RemoteServiceErrorResponse.fromJS(resultData403);
//             return throwException("Forbidden", status, _responseText, _headers, result403);
//             }));
//         } else if (status === 401) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result401: any = null;
//             let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result401 = RemoteServiceErrorResponse.fromJS(resultData401);
//             return throwException("Unauthorized", status, _responseText, _headers, result401);
//             }));
//         } else if (status === 400) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result400: any = null;
//             let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result400 = RemoteServiceErrorResponse.fromJS(resultData400);
//             return throwException("Bad Request", status, _responseText, _headers, result400);
//             }));
//         } else if (status === 404) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result404: any = null;
//             let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result404 = RemoteServiceErrorResponse.fromJS(resultData404);
//             return throwException("Not Found", status, _responseText, _headers, result404);
//             }));
//         } else if (status === 501) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result501: any = null;
//             let resultData501 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result501 = RemoteServiceErrorResponse.fromJS(resultData501);
//             return throwException("Server Error", status, _responseText, _headers, result501);
//             }));
//         } else if (status === 500) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result500: any = null;
//             let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result500 = RemoteServiceErrorResponse.fromJS(resultData500);
//             return throwException("Server Error", status, _responseText, _headers, result500);
//             }));
//         } else if (status !== 200 && status !== 204) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             return throwException("An unexpected server error occurred.", status, _responseText, _headers);
//             }));
//         }
//         return _observableOf<SaasTenantDto>(<any>null);
//     }
//
//     /**
//      * @return Success
//      */
//     tenantsDelete(id: string): Observable<void> {
//         let url_ = this.baseUrl + "/api/saas/tenants/{id}";
//         if (id === undefined || id === null)
//             throw new Error("The parameter 'id' must be defined.");
//         url_ = url_.replace("{id}", encodeURIComponent("" + id));
//         url_ = url_.replace(/[?&]$/, "");
//
//         let options_ : any = {
//             observe: "response",
//             responseType: "blob",
//             headers: new HttpHeaders({
//             })
//         };
//
//         return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
//             return this.processTenantsDelete(response_);
//         })).pipe(_observableCatch((response_: any) => {
//             if (response_ instanceof HttpResponseBase) {
//                 try {
//                     return this.processTenantsDelete(<any>response_);
//                 } catch (e) {
//                     return <Observable<void>><any>_observableThrow(e);
//                 }
//             } else
//                 return <Observable<void>><any>_observableThrow(response_);
//         }));
//     }
//
//     protected processTenantsDelete(response: HttpResponseBase): Observable<void> {
//         const status = response.status;
//         const responseBlob =
//             response instanceof HttpResponse ? response.body :
//             (<any>response).error instanceof Blob ? (<any>response).error : undefined;
//
//         let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
//         if (status === 200) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             return _observableOf<void>(<any>null);
//             }));
//         } else if (status === 403) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result403: any = null;
//             let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result403 = RemoteServiceErrorResponse.fromJS(resultData403);
//             return throwException("Forbidden", status, _responseText, _headers, result403);
//             }));
//         } else if (status === 401) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result401: any = null;
//             let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result401 = RemoteServiceErrorResponse.fromJS(resultData401);
//             return throwException("Unauthorized", status, _responseText, _headers, result401);
//             }));
//         } else if (status === 400) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result400: any = null;
//             let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result400 = RemoteServiceErrorResponse.fromJS(resultData400);
//             return throwException("Bad Request", status, _responseText, _headers, result400);
//             }));
//         } else if (status === 404) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result404: any = null;
//             let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result404 = RemoteServiceErrorResponse.fromJS(resultData404);
//             return throwException("Not Found", status, _responseText, _headers, result404);
//             }));
//         } else if (status === 501) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result501: any = null;
//             let resultData501 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result501 = RemoteServiceErrorResponse.fromJS(resultData501);
//             return throwException("Server Error", status, _responseText, _headers, result501);
//             }));
//         } else if (status === 500) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result500: any = null;
//             let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result500 = RemoteServiceErrorResponse.fromJS(resultData500);
//             return throwException("Server Error", status, _responseText, _headers, result500);
//             }));
//         } else if (status !== 200 && status !== 204) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             return throwException("An unexpected server error occurred.", status, _responseText, _headers);
//             }));
//         }
//         return _observableOf<void>(<any>null);
//     }
//
//     /**
//      * @param filter (optional)
//      * @param getEditionNames (optional)
//      * @param sorting (optional)
//      * @param skipCount (optional)
//      * @param maxResultCount (optional)
//      * @return Success
//      */
//     tenantsGet(filter: string | undefined, getEditionNames: boolean | undefined, sorting: string | undefined, skipCount: number | undefined, maxResultCount: number | undefined): Observable<PagedResultDto_1OfOfSaasTenantDtoAndContractsAnd_0AndCulture_neutralAndPublicKeyToken_null> {
//         let url_ = this.baseUrl + "/api/saas/tenants?";
//         if (filter === null)
//             throw new Error("The parameter 'filter' cannot be null.");
//         else if (filter !== undefined)
//             url_ += "Filter=" + encodeURIComponent("" + filter) + "&";
//         if (getEditionNames === null)
//             throw new Error("The parameter 'getEditionNames' cannot be null.");
//         else if (getEditionNames !== undefined)
//             url_ += "GetEditionNames=" + encodeURIComponent("" + getEditionNames) + "&";
//         if (sorting === null)
//             throw new Error("The parameter 'sorting' cannot be null.");
//         else if (sorting !== undefined)
//             url_ += "Sorting=" + encodeURIComponent("" + sorting) + "&";
//         if (skipCount === null)
//             throw new Error("The parameter 'skipCount' cannot be null.");
//         else if (skipCount !== undefined)
//             url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&";
//         if (maxResultCount === null)
//             throw new Error("The parameter 'maxResultCount' cannot be null.");
//         else if (maxResultCount !== undefined)
//             url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&";
//         url_ = url_.replace(/[?&]$/, "");
//
//         let options_ : any = {
//             observe: "response",
//             responseType: "blob",
//             headers: new HttpHeaders({
//                 "Accept": "text/plain"
//             })
//         };
//
//         return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
//             return this.processTenantsGet(response_);
//         })).pipe(_observableCatch((response_: any) => {
//             if (response_ instanceof HttpResponseBase) {
//                 try {
//                     return this.processTenantsGet(<any>response_);
//                 } catch (e) {
//                     return <Observable<PagedResultDto_1OfOfSaasTenantDtoAndContractsAnd_0AndCulture_neutralAndPublicKeyToken_null>><any>_observableThrow(e);
//                 }
//             } else
//                 return <Observable<PagedResultDto_1OfOfSaasTenantDtoAndContractsAnd_0AndCulture_neutralAndPublicKeyToken_null>><any>_observableThrow(response_);
//         }));
//     }
//
//     protected processTenantsGet(response: HttpResponseBase): Observable<PagedResultDto_1OfOfSaasTenantDtoAndContractsAnd_0AndCulture_neutralAndPublicKeyToken_null> {
//         const status = response.status;
//         const responseBlob =
//             response instanceof HttpResponse ? response.body :
//             (<any>response).error instanceof Blob ? (<any>response).error : undefined;
//
//         let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
//         if (status === 200) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result200: any = null;
//             let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result200 = PagedResultDto_1OfOfSaasTenantDtoAndContractsAnd_0AndCulture_neutralAndPublicKeyToken_null.fromJS(resultData200);
//             return _observableOf(result200);
//             }));
//         } else if (status === 403) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result403: any = null;
//             let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result403 = RemoteServiceErrorResponse.fromJS(resultData403);
//             return throwException("Forbidden", status, _responseText, _headers, result403);
//             }));
//         } else if (status === 401) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result401: any = null;
//             let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result401 = RemoteServiceErrorResponse.fromJS(resultData401);
//             return throwException("Unauthorized", status, _responseText, _headers, result401);
//             }));
//         } else if (status === 400) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result400: any = null;
//             let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result400 = RemoteServiceErrorResponse.fromJS(resultData400);
//             return throwException("Bad Request", status, _responseText, _headers, result400);
//             }));
//         } else if (status === 404) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result404: any = null;
//             let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result404 = RemoteServiceErrorResponse.fromJS(resultData404);
//             return throwException("Not Found", status, _responseText, _headers, result404);
//             }));
//         } else if (status === 501) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result501: any = null;
//             let resultData501 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result501 = RemoteServiceErrorResponse.fromJS(resultData501);
//             return throwException("Server Error", status, _responseText, _headers, result501);
//             }));
//         } else if (status === 500) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result500: any = null;
//             let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result500 = RemoteServiceErrorResponse.fromJS(resultData500);
//             return throwException("Server Error", status, _responseText, _headers, result500);
//             }));
//         } else if (status !== 200 && status !== 204) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             return throwException("An unexpected server error occurred.", status, _responseText, _headers);
//             }));
//         }
//         return _observableOf<PagedResultDto_1OfOfSaasTenantDtoAndContractsAnd_0AndCulture_neutralAndPublicKeyToken_null>(<any>null);
//     }
//
//     /**
//      * @param body (optional)
//      * @return Success
//      */
//     tenantsPost(body: SaasTenantCreateDto | undefined): Observable<SaasTenantDto> {
//         let url_ = this.baseUrl + "/api/saas/tenants";
//         url_ = url_.replace(/[?&]$/, "");
//
//         const content_ = JSON.stringify(body);
//
//         let options_ : any = {
//             body: content_,
//             observe: "response",
//             responseType: "blob",
//             headers: new HttpHeaders({
//                 "Content-Type": "application/json",
//                 "Accept": "text/plain"
//             })
//         };
//
//         return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
//             return this.processTenantsPost(response_);
//         })).pipe(_observableCatch((response_: any) => {
//             if (response_ instanceof HttpResponseBase) {
//                 try {
//                     return this.processTenantsPost(<any>response_);
//                 } catch (e) {
//                     return <Observable<SaasTenantDto>><any>_observableThrow(e);
//                 }
//             } else
//                 return <Observable<SaasTenantDto>><any>_observableThrow(response_);
//         }));
//     }
//
//     protected processTenantsPost(response: HttpResponseBase): Observable<SaasTenantDto> {
//         const status = response.status;
//         const responseBlob =
//             response instanceof HttpResponse ? response.body :
//             (<any>response).error instanceof Blob ? (<any>response).error : undefined;
//
//         let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
//         if (status === 200) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result200: any = null;
//             let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result200 = SaasTenantDto.fromJS(resultData200);
//             return _observableOf(result200);
//             }));
//         } else if (status === 403) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result403: any = null;
//             let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result403 = RemoteServiceErrorResponse.fromJS(resultData403);
//             return throwException("Forbidden", status, _responseText, _headers, result403);
//             }));
//         } else if (status === 401) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result401: any = null;
//             let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result401 = RemoteServiceErrorResponse.fromJS(resultData401);
//             return throwException("Unauthorized", status, _responseText, _headers, result401);
//             }));
//         } else if (status === 400) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result400: any = null;
//             let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result400 = RemoteServiceErrorResponse.fromJS(resultData400);
//             return throwException("Bad Request", status, _responseText, _headers, result400);
//             }));
//         } else if (status === 404) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result404: any = null;
//             let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result404 = RemoteServiceErrorResponse.fromJS(resultData404);
//             return throwException("Not Found", status, _responseText, _headers, result404);
//             }));
//         } else if (status === 501) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result501: any = null;
//             let resultData501 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result501 = RemoteServiceErrorResponse.fromJS(resultData501);
//             return throwException("Server Error", status, _responseText, _headers, result501);
//             }));
//         } else if (status === 500) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result500: any = null;
//             let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result500 = RemoteServiceErrorResponse.fromJS(resultData500);
//             return throwException("Server Error", status, _responseText, _headers, result500);
//             }));
//         } else if (status !== 200 && status !== 204) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             return throwException("An unexpected server error occurred.", status, _responseText, _headers);
//             }));
//         }
//         return _observableOf<SaasTenantDto>(<any>null);
//     }
// }
//
// @Injectable({providedIn: 'root'})
// export class SettingManagementServiceProxy {
//     private http: HttpClient;
//     private baseUrl: string;
//     protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;
//
//     constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
//         this.http = http;
//         this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
//     }
//
//     /**
//      * @return Success
//      */
//     emailingGet(): Observable<EmailSettingsDto> {
//         let url_ = this.baseUrl + "/api/setting-management/emailing";
//         url_ = url_.replace(/[?&]$/, "");
//
//         let options_ : any = {
//             observe: "response",
//             responseType: "blob",
//             headers: new HttpHeaders({
//                 "Accept": "text/plain"
//             })
//         };
//
//         return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
//             return this.processEmailingGet(response_);
//         })).pipe(_observableCatch((response_: any) => {
//             if (response_ instanceof HttpResponseBase) {
//                 try {
//                     return this.processEmailingGet(<any>response_);
//                 } catch (e) {
//                     return <Observable<EmailSettingsDto>><any>_observableThrow(e);
//                 }
//             } else
//                 return <Observable<EmailSettingsDto>><any>_observableThrow(response_);
//         }));
//     }
//
//     protected processEmailingGet(response: HttpResponseBase): Observable<EmailSettingsDto> {
//         const status = response.status;
//         const responseBlob =
//             response instanceof HttpResponse ? response.body :
//             (<any>response).error instanceof Blob ? (<any>response).error : undefined;
//
//         let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
//         if (status === 200) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result200: any = null;
//             let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result200 = EmailSettingsDto.fromJS(resultData200);
//             return _observableOf(result200);
//             }));
//         } else if (status === 403) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result403: any = null;
//             let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result403 = RemoteServiceErrorResponse.fromJS(resultData403);
//             return throwException("Forbidden", status, _responseText, _headers, result403);
//             }));
//         } else if (status === 401) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result401: any = null;
//             let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result401 = RemoteServiceErrorResponse.fromJS(resultData401);
//             return throwException("Unauthorized", status, _responseText, _headers, result401);
//             }));
//         } else if (status === 400) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result400: any = null;
//             let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result400 = RemoteServiceErrorResponse.fromJS(resultData400);
//             return throwException("Bad Request", status, _responseText, _headers, result400);
//             }));
//         } else if (status === 404) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result404: any = null;
//             let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result404 = RemoteServiceErrorResponse.fromJS(resultData404);
//             return throwException("Not Found", status, _responseText, _headers, result404);
//             }));
//         } else if (status === 501) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result501: any = null;
//             let resultData501 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result501 = RemoteServiceErrorResponse.fromJS(resultData501);
//             return throwException("Server Error", status, _responseText, _headers, result501);
//             }));
//         } else if (status === 500) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result500: any = null;
//             let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result500 = RemoteServiceErrorResponse.fromJS(resultData500);
//             return throwException("Server Error", status, _responseText, _headers, result500);
//             }));
//         } else if (status !== 200 && status !== 204) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             return throwException("An unexpected server error occurred.", status, _responseText, _headers);
//             }));
//         }
//         return _observableOf<EmailSettingsDto>(<any>null);
//     }
//
//     /**
//      * @param body (optional)
//      * @return Success
//      */
//     emailingPost(body: UpdateEmailSettingsDto | undefined): Observable<void> {
//         let url_ = this.baseUrl + "/api/setting-management/emailing";
//         url_ = url_.replace(/[?&]$/, "");
//
//         const content_ = JSON.stringify(body);
//
//         let options_ : any = {
//             body: content_,
//             observe: "response",
//             responseType: "blob",
//             headers: new HttpHeaders({
//                 "Content-Type": "application/json",
//             })
//         };
//
//         return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
//             return this.processEmailingPost(response_);
//         })).pipe(_observableCatch((response_: any) => {
//             if (response_ instanceof HttpResponseBase) {
//                 try {
//                     return this.processEmailingPost(<any>response_);
//                 } catch (e) {
//                     return <Observable<void>><any>_observableThrow(e);
//                 }
//             } else
//                 return <Observable<void>><any>_observableThrow(response_);
//         }));
//     }
//
//     protected processEmailingPost(response: HttpResponseBase): Observable<void> {
//         const status = response.status;
//         const responseBlob =
//             response instanceof HttpResponse ? response.body :
//             (<any>response).error instanceof Blob ? (<any>response).error : undefined;
//
//         let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
//         if (status === 200) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             return _observableOf<void>(<any>null);
//             }));
//         } else if (status === 403) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result403: any = null;
//             let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result403 = RemoteServiceErrorResponse.fromJS(resultData403);
//             return throwException("Forbidden", status, _responseText, _headers, result403);
//             }));
//         } else if (status === 401) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result401: any = null;
//             let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result401 = RemoteServiceErrorResponse.fromJS(resultData401);
//             return throwException("Unauthorized", status, _responseText, _headers, result401);
//             }));
//         } else if (status === 400) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result400: any = null;
//             let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result400 = RemoteServiceErrorResponse.fromJS(resultData400);
//             return throwException("Bad Request", status, _responseText, _headers, result400);
//             }));
//         } else if (status === 404) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result404: any = null;
//             let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result404 = RemoteServiceErrorResponse.fromJS(resultData404);
//             return throwException("Not Found", status, _responseText, _headers, result404);
//             }));
//         } else if (status === 501) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result501: any = null;
//             let resultData501 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result501 = RemoteServiceErrorResponse.fromJS(resultData501);
//             return throwException("Server Error", status, _responseText, _headers, result501);
//             }));
//         } else if (status === 500) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result500: any = null;
//             let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result500 = RemoteServiceErrorResponse.fromJS(resultData500);
//             return throwException("Server Error", status, _responseText, _headers, result500);
//             }));
//         } else if (status !== 200 && status !== 204) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             return throwException("An unexpected server error occurred.", status, _responseText, _headers);
//             }));
//         }
//         return _observableOf<void>(<any>null);
//     }
// }
//
// @Injectable({providedIn: 'root'})
// export class FeatureManagementServiceProxy {
//     private http: HttpClient;
//     private baseUrl: string;
//     protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;
//
//     constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
//         this.http = http;
//         this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
//     }
//
//     /**
//      * @param providerName (optional)
//      * @param providerKey (optional)
//      * @return Success
//      */
//     featuresGet(providerName: string | undefined, providerKey: string | undefined): Observable<GetFeatureListResultDto> {
//         let url_ = this.baseUrl + "/api/feature-management/features?";
//         if (providerName === null)
//             throw new Error("The parameter 'providerName' cannot be null.");
//         else if (providerName !== undefined)
//             url_ += "providerName=" + encodeURIComponent("" + providerName) + "&";
//         if (providerKey === null)
//             throw new Error("The parameter 'providerKey' cannot be null.");
//         else if (providerKey !== undefined)
//             url_ += "providerKey=" + encodeURIComponent("" + providerKey) + "&";
//         url_ = url_.replace(/[?&]$/, "");
//
//         let options_ : any = {
//             observe: "response",
//             responseType: "blob",
//             headers: new HttpHeaders({
//                 "Accept": "text/plain"
//             })
//         };
//
//         return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
//             return this.processFeaturesGet(response_);
//         })).pipe(_observableCatch((response_: any) => {
//             if (response_ instanceof HttpResponseBase) {
//                 try {
//                     return this.processFeaturesGet(<any>response_);
//                 } catch (e) {
//                     return <Observable<GetFeatureListResultDto>><any>_observableThrow(e);
//                 }
//             } else
//                 return <Observable<GetFeatureListResultDto>><any>_observableThrow(response_);
//         }));
//     }
//
//     protected processFeaturesGet(response: HttpResponseBase): Observable<GetFeatureListResultDto> {
//         const status = response.status;
//         const responseBlob =
//             response instanceof HttpResponse ? response.body :
//             (<any>response).error instanceof Blob ? (<any>response).error : undefined;
//
//         let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
//         if (status === 200) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result200: any = null;
//             let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result200 = GetFeatureListResultDto.fromJS(resultData200);
//             return _observableOf(result200);
//             }));
//         } else if (status === 403) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result403: any = null;
//             let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result403 = RemoteServiceErrorResponse.fromJS(resultData403);
//             return throwException("Forbidden", status, _responseText, _headers, result403);
//             }));
//         } else if (status === 401) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result401: any = null;
//             let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result401 = RemoteServiceErrorResponse.fromJS(resultData401);
//             return throwException("Unauthorized", status, _responseText, _headers, result401);
//             }));
//         } else if (status === 400) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result400: any = null;
//             let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result400 = RemoteServiceErrorResponse.fromJS(resultData400);
//             return throwException("Bad Request", status, _responseText, _headers, result400);
//             }));
//         } else if (status === 404) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result404: any = null;
//             let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result404 = RemoteServiceErrorResponse.fromJS(resultData404);
//             return throwException("Not Found", status, _responseText, _headers, result404);
//             }));
//         } else if (status === 501) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result501: any = null;
//             let resultData501 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result501 = RemoteServiceErrorResponse.fromJS(resultData501);
//             return throwException("Server Error", status, _responseText, _headers, result501);
//             }));
//         } else if (status === 500) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result500: any = null;
//             let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result500 = RemoteServiceErrorResponse.fromJS(resultData500);
//             return throwException("Server Error", status, _responseText, _headers, result500);
//             }));
//         } else if (status !== 200 && status !== 204) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             return throwException("An unexpected server error occurred.", status, _responseText, _headers);
//             }));
//         }
//         return _observableOf<GetFeatureListResultDto>(<any>null);
//     }
//
//     /**
//      * @param providerName (optional)
//      * @param providerKey (optional)
//      * @param body (optional)
//      * @return Success
//      */
//     featuresPut(providerName: string | undefined, providerKey: string | undefined, body: UpdateFeaturesDto | undefined): Observable<void> {
//         let url_ = this.baseUrl + "/api/feature-management/features?";
//         if (providerName === null)
//             throw new Error("The parameter 'providerName' cannot be null.");
//         else if (providerName !== undefined)
//             url_ += "providerName=" + encodeURIComponent("" + providerName) + "&";
//         if (providerKey === null)
//             throw new Error("The parameter 'providerKey' cannot be null.");
//         else if (providerKey !== undefined)
//             url_ += "providerKey=" + encodeURIComponent("" + providerKey) + "&";
//         url_ = url_.replace(/[?&]$/, "");
//
//         const content_ = JSON.stringify(body);
//
//         let options_ : any = {
//             body: content_,
//             observe: "response",
//             responseType: "blob",
//             headers: new HttpHeaders({
//                 "Content-Type": "application/json",
//             })
//         };
//
//         return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
//             return this.processFeaturesPut(response_);
//         })).pipe(_observableCatch((response_: any) => {
//             if (response_ instanceof HttpResponseBase) {
//                 try {
//                     return this.processFeaturesPut(<any>response_);
//                 } catch (e) {
//                     return <Observable<void>><any>_observableThrow(e);
//                 }
//             } else
//                 return <Observable<void>><any>_observableThrow(response_);
//         }));
//     }
//
//     protected processFeaturesPut(response: HttpResponseBase): Observable<void> {
//         const status = response.status;
//         const responseBlob =
//             response instanceof HttpResponse ? response.body :
//             (<any>response).error instanceof Blob ? (<any>response).error : undefined;
//
//         let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
//         if (status === 200) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             return _observableOf<void>(<any>null);
//             }));
//         } else if (status === 403) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result403: any = null;
//             let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result403 = RemoteServiceErrorResponse.fromJS(resultData403);
//             return throwException("Forbidden", status, _responseText, _headers, result403);
//             }));
//         } else if (status === 401) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result401: any = null;
//             let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result401 = RemoteServiceErrorResponse.fromJS(resultData401);
//             return throwException("Unauthorized", status, _responseText, _headers, result401);
//             }));
//         } else if (status === 400) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result400: any = null;
//             let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result400 = RemoteServiceErrorResponse.fromJS(resultData400);
//             return throwException("Bad Request", status, _responseText, _headers, result400);
//             }));
//         } else if (status === 404) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result404: any = null;
//             let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result404 = RemoteServiceErrorResponse.fromJS(resultData404);
//             return throwException("Not Found", status, _responseText, _headers, result404);
//             }));
//         } else if (status === 501) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result501: any = null;
//             let resultData501 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result501 = RemoteServiceErrorResponse.fromJS(resultData501);
//             return throwException("Server Error", status, _responseText, _headers, result501);
//             }));
//         } else if (status === 500) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result500: any = null;
//             let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result500 = RemoteServiceErrorResponse.fromJS(resultData500);
//             return throwException("Server Error", status, _responseText, _headers, result500);
//             }));
//         } else if (status !== 200 && status !== 204) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             return throwException("An unexpected server error occurred.", status, _responseText, _headers);
//             }));
//         }
//         return _observableOf<void>(<any>null);
//     }
// }
//
// @Injectable({providedIn: 'root'})
// export class FileDescriptorServiceProxy {
//     private http: HttpClient;
//     private baseUrl: string;
//     protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;
//
//     constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
//         this.http = http;
//         this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
//     }
//
//     /**
//      * @param directoryId (optional)
//      * @param file (optional)
//      * @return Success
//      */
//     upload(directoryId: string | undefined, name: string, file: FileParameter | undefined): Observable<FileDescriptorDto> {
//         let url_ = this.baseUrl + "/api/file-management/file-descriptor/upload?";
//         if (directoryId === null)
//             throw new Error("The parameter 'directoryId' cannot be null.");
//         else if (directoryId !== undefined)
//             url_ += "directoryId=" + encodeURIComponent("" + directoryId) + "&";
//         if (name === undefined || name === null)
//             throw new Error("The parameter 'name' must be defined and cannot be null.");
//         else
//             url_ += "Name=" + encodeURIComponent("" + name) + "&";
//         url_ = url_.replace(/[?&]$/, "");
//
//         const content_ = new FormData();
//         if (file === null || file === undefined)
//             throw new Error("The parameter 'file' cannot be null.");
//         else
//             content_.append("File", file.data, file.fileName ? file.fileName : "File");
//
//         let options_ : any = {
//             body: content_,
//             observe: "response",
//             responseType: "blob",
//             headers: new HttpHeaders({
//                 "Accept": "text/plain"
//             })
//         };
//
//         return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
//             return this.processUpload(response_);
//         })).pipe(_observableCatch((response_: any) => {
//             if (response_ instanceof HttpResponseBase) {
//                 try {
//                     return this.processUpload(<any>response_);
//                 } catch (e) {
//                     return <Observable<FileDescriptorDto>><any>_observableThrow(e);
//                 }
//             } else
//                 return <Observable<FileDescriptorDto>><any>_observableThrow(response_);
//         }));
//     }
//
//     protected processUpload(response: HttpResponseBase): Observable<FileDescriptorDto> {
//         const status = response.status;
//         const responseBlob =
//             response instanceof HttpResponse ? response.body :
//             (<any>response).error instanceof Blob ? (<any>response).error : undefined;
//
//         let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
//         if (status === 200) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result200: any = null;
//             let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result200 = FileDescriptorDto.fromJS(resultData200);
//             return _observableOf(result200);
//             }));
//         } else if (status === 403) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result403: any = null;
//             let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result403 = RemoteServiceErrorResponse.fromJS(resultData403);
//             return throwException("Forbidden", status, _responseText, _headers, result403);
//             }));
//         } else if (status === 401) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result401: any = null;
//             let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result401 = RemoteServiceErrorResponse.fromJS(resultData401);
//             return throwException("Unauthorized", status, _responseText, _headers, result401);
//             }));
//         } else if (status === 400) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result400: any = null;
//             let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result400 = RemoteServiceErrorResponse.fromJS(resultData400);
//             return throwException("Bad Request", status, _responseText, _headers, result400);
//             }));
//         } else if (status === 404) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result404: any = null;
//             let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result404 = RemoteServiceErrorResponse.fromJS(resultData404);
//             return throwException("Not Found", status, _responseText, _headers, result404);
//             }));
//         } else if (status === 501) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result501: any = null;
//             let resultData501 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result501 = RemoteServiceErrorResponse.fromJS(resultData501);
//             return throwException("Server Error", status, _responseText, _headers, result501);
//             }));
//         } else if (status === 500) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result500: any = null;
//             let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result500 = RemoteServiceErrorResponse.fromJS(resultData500);
//             return throwException("Server Error", status, _responseText, _headers, result500);
//             }));
//         } else if (status !== 200 && status !== 204) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             return throwException("An unexpected server error occurred.", status, _responseText, _headers);
//             }));
//         }
//         return _observableOf<FileDescriptorDto>(<any>null);
//     }
//
//     /**
//      * @param body (optional)
//      * @return Success
//      */
//     move(body: MoveFileInput | undefined): Observable<FileDescriptorDto> {
//         let url_ = this.baseUrl + "/api/file-management/file-descriptor/move";
//         url_ = url_.replace(/[?&]$/, "");
//
//         const content_ = JSON.stringify(body);
//
//         let options_ : any = {
//             body: content_,
//             observe: "response",
//             responseType: "blob",
//             headers: new HttpHeaders({
//                 "Content-Type": "application/json",
//                 "Accept": "text/plain"
//             })
//         };
//
//         return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
//             return this.processMove(response_);
//         })).pipe(_observableCatch((response_: any) => {
//             if (response_ instanceof HttpResponseBase) {
//                 try {
//                     return this.processMove(<any>response_);
//                 } catch (e) {
//                     return <Observable<FileDescriptorDto>><any>_observableThrow(e);
//                 }
//             } else
//                 return <Observable<FileDescriptorDto>><any>_observableThrow(response_);
//         }));
//     }
//
//     protected processMove(response: HttpResponseBase): Observable<FileDescriptorDto> {
//         const status = response.status;
//         const responseBlob =
//             response instanceof HttpResponse ? response.body :
//             (<any>response).error instanceof Blob ? (<any>response).error : undefined;
//
//         let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
//         if (status === 200) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result200: any = null;
//             let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result200 = FileDescriptorDto.fromJS(resultData200);
//             return _observableOf(result200);
//             }));
//         } else if (status === 403) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result403: any = null;
//             let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result403 = RemoteServiceErrorResponse.fromJS(resultData403);
//             return throwException("Forbidden", status, _responseText, _headers, result403);
//             }));
//         } else if (status === 401) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result401: any = null;
//             let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result401 = RemoteServiceErrorResponse.fromJS(resultData401);
//             return throwException("Unauthorized", status, _responseText, _headers, result401);
//             }));
//         } else if (status === 400) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result400: any = null;
//             let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result400 = RemoteServiceErrorResponse.fromJS(resultData400);
//             return throwException("Bad Request", status, _responseText, _headers, result400);
//             }));
//         } else if (status === 404) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result404: any = null;
//             let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result404 = RemoteServiceErrorResponse.fromJS(resultData404);
//             return throwException("Not Found", status, _responseText, _headers, result404);
//             }));
//         } else if (status === 501) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result501: any = null;
//             let resultData501 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result501 = RemoteServiceErrorResponse.fromJS(resultData501);
//             return throwException("Server Error", status, _responseText, _headers, result501);
//             }));
//         } else if (status === 500) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result500: any = null;
//             let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result500 = RemoteServiceErrorResponse.fromJS(resultData500);
//             return throwException("Server Error", status, _responseText, _headers, result500);
//             }));
//         } else if (status !== 200 && status !== 204) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             return throwException("An unexpected server error occurred.", status, _responseText, _headers);
//             }));
//         }
//         return _observableOf<FileDescriptorDto>(<any>null);
//     }
//
//     /**
//      * @param body (optional)
//      * @return Success
//      */
//     preUploadInfo(body: FileUploadPreInfoRequest[] | undefined): Observable<FileUploadPreInfoDto[]> {
//         let url_ = this.baseUrl + "/api/file-management/file-descriptor/pre-upload-info";
//         url_ = url_.replace(/[?&]$/, "");
//
//         const content_ = JSON.stringify(body);
//
//         let options_ : any = {
//             body: content_,
//             observe: "response",
//             responseType: "blob",
//             headers: new HttpHeaders({
//                 "Content-Type": "application/json",
//                 "Accept": "text/plain"
//             })
//         };
//
//         return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
//             return this.processPreUploadInfo(response_);
//         })).pipe(_observableCatch((response_: any) => {
//             if (response_ instanceof HttpResponseBase) {
//                 try {
//                     return this.processPreUploadInfo(<any>response_);
//                 } catch (e) {
//                     return <Observable<FileUploadPreInfoDto[]>><any>_observableThrow(e);
//                 }
//             } else
//                 return <Observable<FileUploadPreInfoDto[]>><any>_observableThrow(response_);
//         }));
//     }
//
//     protected processPreUploadInfo(response: HttpResponseBase): Observable<FileUploadPreInfoDto[]> {
//         const status = response.status;
//         const responseBlob =
//             response instanceof HttpResponse ? response.body :
//             (<any>response).error instanceof Blob ? (<any>response).error : undefined;
//
//         let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
//         if (status === 200) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result200: any = null;
//             let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             if (Array.isArray(resultData200)) {
//                 result200 = [] as any;
//                 for (let item of resultData200)
//                     result200!.push(FileUploadPreInfoDto.fromJS(item));
//             }
//             else {
//                 result200 = <any>null;
//             }
//             return _observableOf(result200);
//             }));
//         } else if (status === 403) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result403: any = null;
//             let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result403 = RemoteServiceErrorResponse.fromJS(resultData403);
//             return throwException("Forbidden", status, _responseText, _headers, result403);
//             }));
//         } else if (status === 401) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result401: any = null;
//             let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result401 = RemoteServiceErrorResponse.fromJS(resultData401);
//             return throwException("Unauthorized", status, _responseText, _headers, result401);
//             }));
//         } else if (status === 400) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result400: any = null;
//             let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result400 = RemoteServiceErrorResponse.fromJS(resultData400);
//             return throwException("Bad Request", status, _responseText, _headers, result400);
//             }));
//         } else if (status === 404) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result404: any = null;
//             let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result404 = RemoteServiceErrorResponse.fromJS(resultData404);
//             return throwException("Not Found", status, _responseText, _headers, result404);
//             }));
//         } else if (status === 501) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result501: any = null;
//             let resultData501 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result501 = RemoteServiceErrorResponse.fromJS(resultData501);
//             return throwException("Server Error", status, _responseText, _headers, result501);
//             }));
//         } else if (status === 500) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result500: any = null;
//             let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result500 = RemoteServiceErrorResponse.fromJS(resultData500);
//             return throwException("Server Error", status, _responseText, _headers, result500);
//             }));
//         } else if (status !== 200 && status !== 204) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             return throwException("An unexpected server error occurred.", status, _responseText, _headers);
//             }));
//         }
//         return _observableOf<FileUploadPreInfoDto[]>(<any>null);
//     }
//
//     /**
//      * @param id (optional)
//      * @return Success
//      */
//     content(id: string | undefined): Observable<string> {
//         let url_ = this.baseUrl + "/api/file-management/file-descriptor/content?";
//         if (id === null)
//             throw new Error("The parameter 'id' cannot be null.");
//         else if (id !== undefined)
//             url_ += "id=" + encodeURIComponent("" + id) + "&";
//         url_ = url_.replace(/[?&]$/, "");
//
//         let options_ : any = {
//             observe: "response",
//             responseType: "blob",
//             headers: new HttpHeaders({
//                 "Accept": "text/plain"
//             })
//         };
//
//         return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
//             return this.processContent(response_);
//         })).pipe(_observableCatch((response_: any) => {
//             if (response_ instanceof HttpResponseBase) {
//                 try {
//                     return this.processContent(<any>response_);
//                 } catch (e) {
//                     return <Observable<string>><any>_observableThrow(e);
//                 }
//             } else
//                 return <Observable<string>><any>_observableThrow(response_);
//         }));
//     }
//
//     protected processContent(response: HttpResponseBase): Observable<string> {
//         const status = response.status;
//         const responseBlob =
//             response instanceof HttpResponse ? response.body :
//             (<any>response).error instanceof Blob ? (<any>response).error : undefined;
//
//         let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
//         if (status === 200) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result200: any = null;
//             let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result200 = resultData200 !== undefined ? resultData200 : <any>null;
//             return _observableOf(result200);
//             }));
//         } else if (status === 403) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result403: any = null;
//             let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result403 = RemoteServiceErrorResponse.fromJS(resultData403);
//             return throwException("Forbidden", status, _responseText, _headers, result403);
//             }));
//         } else if (status === 401) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result401: any = null;
//             let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result401 = RemoteServiceErrorResponse.fromJS(resultData401);
//             return throwException("Unauthorized", status, _responseText, _headers, result401);
//             }));
//         } else if (status === 400) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result400: any = null;
//             let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result400 = RemoteServiceErrorResponse.fromJS(resultData400);
//             return throwException("Bad Request", status, _responseText, _headers, result400);
//             }));
//         } else if (status === 404) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result404: any = null;
//             let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result404 = RemoteServiceErrorResponse.fromJS(resultData404);
//             return throwException("Not Found", status, _responseText, _headers, result404);
//             }));
//         } else if (status === 501) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result501: any = null;
//             let resultData501 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result501 = RemoteServiceErrorResponse.fromJS(resultData501);
//             return throwException("Server Error", status, _responseText, _headers, result501);
//             }));
//         } else if (status === 500) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result500: any = null;
//             let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result500 = RemoteServiceErrorResponse.fromJS(resultData500);
//             return throwException("Server Error", status, _responseText, _headers, result500);
//             }));
//         } else if (status !== 200 && status !== 204) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             return throwException("An unexpected server error occurred.", status, _responseText, _headers);
//             }));
//         }
//         return _observableOf<string>(<any>null);
//     }
//
//     /**
//      * @param token (optional)
//      * @return Success
//      */
//     download(id: string, token: string | undefined): Observable<FileResponse> {
//         let url_ = this.baseUrl + "/api/file-management/file-descriptor/download/{id}?";
//         if (id === undefined || id === null)
//             throw new Error("The parameter 'id' must be defined.");
//         url_ = url_.replace("{id}", encodeURIComponent("" + id));
//         if (token === null)
//             throw new Error("The parameter 'token' cannot be null.");
//         else if (token !== undefined)
//             url_ += "token=" + encodeURIComponent("" + token) + "&";
//         url_ = url_.replace(/[?&]$/, "");
//
//         let options_ : any = {
//             observe: "response",
//             responseType: "blob",
//             headers: new HttpHeaders({
//                 "Accept": "text/plain"
//             })
//         };
//
//         return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
//             return this.processDownload(response_);
//         })).pipe(_observableCatch((response_: any) => {
//             if (response_ instanceof HttpResponseBase) {
//                 try {
//                     return this.processDownload(<any>response_);
//                 } catch (e) {
//                     return <Observable<FileResponse>><any>_observableThrow(e);
//                 }
//             } else
//                 return <Observable<FileResponse>><any>_observableThrow(response_);
//         }));
//     }
//
//     protected processDownload(response: HttpResponseBase): Observable<FileResponse> {
//         const status = response.status;
//         const responseBlob =
//             response instanceof HttpResponse ? response.body :
//             (<any>response).error instanceof Blob ? (<any>response).error : undefined;
//
//         let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
//         if (status === 200 || status === 206) {
//             const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
//             const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
//             const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
//             return _observableOf({ fileName: fileName, data: <any>responseBlob, status: status, headers: _headers });
//         } else if (status === 403) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result403: any = null;
//             let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result403 = RemoteServiceErrorResponse.fromJS(resultData403);
//             return throwException("Forbidden", status, _responseText, _headers, result403);
//             }));
//         } else if (status === 401) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result401: any = null;
//             let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result401 = RemoteServiceErrorResponse.fromJS(resultData401);
//             return throwException("Unauthorized", status, _responseText, _headers, result401);
//             }));
//         } else if (status === 400) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result400: any = null;
//             let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result400 = RemoteServiceErrorResponse.fromJS(resultData400);
//             return throwException("Bad Request", status, _responseText, _headers, result400);
//             }));
//         } else if (status === 404) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result404: any = null;
//             let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result404 = RemoteServiceErrorResponse.fromJS(resultData404);
//             return throwException("Not Found", status, _responseText, _headers, result404);
//             }));
//         } else if (status === 501) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result501: any = null;
//             let resultData501 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result501 = RemoteServiceErrorResponse.fromJS(resultData501);
//             return throwException("Server Error", status, _responseText, _headers, result501);
//             }));
//         } else if (status === 500) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result500: any = null;
//             let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result500 = RemoteServiceErrorResponse.fromJS(resultData500);
//             return throwException("Server Error", status, _responseText, _headers, result500);
//             }));
//         } else if (status !== 200 && status !== 204) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             return throwException("An unexpected server error occurred.", status, _responseText, _headers);
//             }));
//         }
//         return _observableOf<FileResponse>(<any>null);
//     }
// }
//
// @Injectable({providedIn: 'root'})
// export class DownloadServiceProxy {
//     private http: HttpClient;
//     private baseUrl: string;
//     protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;
//
//     constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
//         this.http = http;
//         this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
//     }
//
//     /**
//      * @return Success
//      */
//     token(id: string): Observable<DownloadTokenResultDto> {
//         let url_ = this.baseUrl + "/api/file-management/file-descriptor/download/{id}/token";
//         if (id === undefined || id === null)
//             throw new Error("The parameter 'id' must be defined.");
//         url_ = url_.replace("{id}", encodeURIComponent("" + id));
//         url_ = url_.replace(/[?&]$/, "");
//
//         let options_ : any = {
//             observe: "response",
//             responseType: "blob",
//             headers: new HttpHeaders({
//                 "Accept": "text/plain"
//             })
//         };
//
//         return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
//             return this.processToken(response_);
//         })).pipe(_observableCatch((response_: any) => {
//             if (response_ instanceof HttpResponseBase) {
//                 try {
//                     return this.processToken(<any>response_);
//                 } catch (e) {
//                     return <Observable<DownloadTokenResultDto>><any>_observableThrow(e);
//                 }
//             } else
//                 return <Observable<DownloadTokenResultDto>><any>_observableThrow(response_);
//         }));
//     }
//
//     protected processToken(response: HttpResponseBase): Observable<DownloadTokenResultDto> {
//         const status = response.status;
//         const responseBlob =
//             response instanceof HttpResponse ? response.body :
//             (<any>response).error instanceof Blob ? (<any>response).error : undefined;
//
//         let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
//         if (status === 200) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result200: any = null;
//             let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result200 = DownloadTokenResultDto.fromJS(resultData200);
//             return _observableOf(result200);
//             }));
//         } else if (status === 403) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result403: any = null;
//             let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result403 = RemoteServiceErrorResponse.fromJS(resultData403);
//             return throwException("Forbidden", status, _responseText, _headers, result403);
//             }));
//         } else if (status === 401) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result401: any = null;
//             let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result401 = RemoteServiceErrorResponse.fromJS(resultData401);
//             return throwException("Unauthorized", status, _responseText, _headers, result401);
//             }));
//         } else if (status === 400) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result400: any = null;
//             let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result400 = RemoteServiceErrorResponse.fromJS(resultData400);
//             return throwException("Bad Request", status, _responseText, _headers, result400);
//             }));
//         } else if (status === 404) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result404: any = null;
//             let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result404 = RemoteServiceErrorResponse.fromJS(resultData404);
//             return throwException("Not Found", status, _responseText, _headers, result404);
//             }));
//         } else if (status === 501) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result501: any = null;
//             let resultData501 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result501 = RemoteServiceErrorResponse.fromJS(resultData501);
//             return throwException("Server Error", status, _responseText, _headers, result501);
//             }));
//         } else if (status === 500) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result500: any = null;
//             let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result500 = RemoteServiceErrorResponse.fromJS(resultData500);
//             return throwException("Server Error", status, _responseText, _headers, result500);
//             }));
//         } else if (status !== 200 && status !== 204) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             return throwException("An unexpected server error occurred.", status, _responseText, _headers);
//             }));
//         }
//         return _observableOf<DownloadTokenResultDto>(<any>null);
//     }
// }
//
// @Injectable({providedIn: 'root'})
// export class IdentityResourcesServiceProxy {
//     private http: HttpClient;
//     private baseUrl: string;
//     protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;
//
//     constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
//         this.http = http;
//         this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
//     }
//
//     /**
//      * @return Success
//      */
//     all(): Observable<IdentityResourceWithDetailsDto[]> {
//         let url_ = this.baseUrl + "/api/identity-server/identity-resources/all";
//         url_ = url_.replace(/[?&]$/, "");
//
//         let options_ : any = {
//             observe: "response",
//             responseType: "blob",
//             headers: new HttpHeaders({
//                 "Accept": "text/plain"
//             })
//         };
//
//         return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
//             return this.processAll(response_);
//         })).pipe(_observableCatch((response_: any) => {
//             if (response_ instanceof HttpResponseBase) {
//                 try {
//                     return this.processAll(<any>response_);
//                 } catch (e) {
//                     return <Observable<IdentityResourceWithDetailsDto[]>><any>_observableThrow(e);
//                 }
//             } else
//                 return <Observable<IdentityResourceWithDetailsDto[]>><any>_observableThrow(response_);
//         }));
//     }
//
//     protected processAll(response: HttpResponseBase): Observable<IdentityResourceWithDetailsDto[]> {
//         const status = response.status;
//         const responseBlob =
//             response instanceof HttpResponse ? response.body :
//             (<any>response).error instanceof Blob ? (<any>response).error : undefined;
//
//         let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
//         if (status === 200) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result200: any = null;
//             let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             if (Array.isArray(resultData200)) {
//                 result200 = [] as any;
//                 for (let item of resultData200)
//                     result200!.push(IdentityResourceWithDetailsDto.fromJS(item));
//             }
//             else {
//                 result200 = <any>null;
//             }
//             return _observableOf(result200);
//             }));
//         } else if (status === 403) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result403: any = null;
//             let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result403 = RemoteServiceErrorResponse.fromJS(resultData403);
//             return throwException("Forbidden", status, _responseText, _headers, result403);
//             }));
//         } else if (status === 401) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result401: any = null;
//             let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result401 = RemoteServiceErrorResponse.fromJS(resultData401);
//             return throwException("Unauthorized", status, _responseText, _headers, result401);
//             }));
//         } else if (status === 400) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result400: any = null;
//             let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result400 = RemoteServiceErrorResponse.fromJS(resultData400);
//             return throwException("Bad Request", status, _responseText, _headers, result400);
//             }));
//         } else if (status === 404) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result404: any = null;
//             let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result404 = RemoteServiceErrorResponse.fromJS(resultData404);
//             return throwException("Not Found", status, _responseText, _headers, result404);
//             }));
//         } else if (status === 501) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result501: any = null;
//             let resultData501 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result501 = RemoteServiceErrorResponse.fromJS(resultData501);
//             return throwException("Server Error", status, _responseText, _headers, result501);
//             }));
//         } else if (status === 500) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result500: any = null;
//             let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result500 = RemoteServiceErrorResponse.fromJS(resultData500);
//             return throwException("Server Error", status, _responseText, _headers, result500);
//             }));
//         } else if (status !== 200 && status !== 204) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             return throwException("An unexpected server error occurred.", status, _responseText, _headers);
//             }));
//         }
//         return _observableOf<IdentityResourceWithDetailsDto[]>(<any>null);
//     }
//
//     /**
//      * @return Success
//      */
//     createStandardResources(): Observable<void> {
//         let url_ = this.baseUrl + "/api/identity-server/identity-resources/create-standard-resources";
//         url_ = url_.replace(/[?&]$/, "");
//
//         let options_ : any = {
//             observe: "response",
//             responseType: "blob",
//             headers: new HttpHeaders({
//             })
//         };
//
//         return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
//             return this.processCreateStandardResources(response_);
//         })).pipe(_observableCatch((response_: any) => {
//             if (response_ instanceof HttpResponseBase) {
//                 try {
//                     return this.processCreateStandardResources(<any>response_);
//                 } catch (e) {
//                     return <Observable<void>><any>_observableThrow(e);
//                 }
//             } else
//                 return <Observable<void>><any>_observableThrow(response_);
//         }));
//     }
//
//     protected processCreateStandardResources(response: HttpResponseBase): Observable<void> {
//         const status = response.status;
//         const responseBlob =
//             response instanceof HttpResponse ? response.body :
//             (<any>response).error instanceof Blob ? (<any>response).error : undefined;
//
//         let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
//         if (status === 200) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             return _observableOf<void>(<any>null);
//             }));
//         } else if (status === 403) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result403: any = null;
//             let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result403 = RemoteServiceErrorResponse.fromJS(resultData403);
//             return throwException("Forbidden", status, _responseText, _headers, result403);
//             }));
//         } else if (status === 401) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result401: any = null;
//             let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result401 = RemoteServiceErrorResponse.fromJS(resultData401);
//             return throwException("Unauthorized", status, _responseText, _headers, result401);
//             }));
//         } else if (status === 400) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result400: any = null;
//             let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result400 = RemoteServiceErrorResponse.fromJS(resultData400);
//             return throwException("Bad Request", status, _responseText, _headers, result400);
//             }));
//         } else if (status === 404) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result404: any = null;
//             let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result404 = RemoteServiceErrorResponse.fromJS(resultData404);
//             return throwException("Not Found", status, _responseText, _headers, result404);
//             }));
//         } else if (status === 501) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result501: any = null;
//             let resultData501 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result501 = RemoteServiceErrorResponse.fromJS(resultData501);
//             return throwException("Server Error", status, _responseText, _headers, result501);
//             }));
//         } else if (status === 500) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result500: any = null;
//             let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result500 = RemoteServiceErrorResponse.fromJS(resultData500);
//             return throwException("Server Error", status, _responseText, _headers, result500);
//             }));
//         } else if (status !== 200 && status !== 204) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             return throwException("An unexpected server error occurred.", status, _responseText, _headers);
//             }));
//         }
//         return _observableOf<void>(<any>null);
//     }
// }
//
// @Injectable({providedIn: 'root'})
// export class LanguagesServiceProxy {
//     private http: HttpClient;
//     private baseUrl: string;
//     protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;
//
//     constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
//         this.http = http;
//         this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
//     }
//
//     /**
//      * @return Success
//      */
//     all(): Observable<ListResultDto_1OfOfLanguageDtoAndContractsAnd_0AndCulture_neutralAndPublicKeyToken_null> {
//         let url_ = this.baseUrl + "/api/language-management/languages/all";
//         url_ = url_.replace(/[?&]$/, "");
//
//         let options_ : any = {
//             observe: "response",
//             responseType: "blob",
//             headers: new HttpHeaders({
//                 "Accept": "text/plain"
//             })
//         };
//
//         return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
//             return this.processAll(response_);
//         })).pipe(_observableCatch((response_: any) => {
//             if (response_ instanceof HttpResponseBase) {
//                 try {
//                     return this.processAll(<any>response_);
//                 } catch (e) {
//                     return <Observable<ListResultDto_1OfOfLanguageDtoAndContractsAnd_0AndCulture_neutralAndPublicKeyToken_null>><any>_observableThrow(e);
//                 }
//             } else
//                 return <Observable<ListResultDto_1OfOfLanguageDtoAndContractsAnd_0AndCulture_neutralAndPublicKeyToken_null>><any>_observableThrow(response_);
//         }));
//     }
//
//     protected processAll(response: HttpResponseBase): Observable<ListResultDto_1OfOfLanguageDtoAndContractsAnd_0AndCulture_neutralAndPublicKeyToken_null> {
//         const status = response.status;
//         const responseBlob =
//             response instanceof HttpResponse ? response.body :
//             (<any>response).error instanceof Blob ? (<any>response).error : undefined;
//
//         let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
//         if (status === 200) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result200: any = null;
//             let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result200 = ListResultDto_1OfOfLanguageDtoAndContractsAnd_0AndCulture_neutralAndPublicKeyToken_null.fromJS(resultData200);
//             return _observableOf(result200);
//             }));
//         } else if (status === 403) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result403: any = null;
//             let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result403 = RemoteServiceErrorResponse.fromJS(resultData403);
//             return throwException("Forbidden", status, _responseText, _headers, result403);
//             }));
//         } else if (status === 401) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result401: any = null;
//             let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result401 = RemoteServiceErrorResponse.fromJS(resultData401);
//             return throwException("Unauthorized", status, _responseText, _headers, result401);
//             }));
//         } else if (status === 400) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result400: any = null;
//             let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result400 = RemoteServiceErrorResponse.fromJS(resultData400);
//             return throwException("Bad Request", status, _responseText, _headers, result400);
//             }));
//         } else if (status === 404) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result404: any = null;
//             let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result404 = RemoteServiceErrorResponse.fromJS(resultData404);
//             return throwException("Not Found", status, _responseText, _headers, result404);
//             }));
//         } else if (status === 501) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result501: any = null;
//             let resultData501 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result501 = RemoteServiceErrorResponse.fromJS(resultData501);
//             return throwException("Server Error", status, _responseText, _headers, result501);
//             }));
//         } else if (status === 500) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result500: any = null;
//             let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result500 = RemoteServiceErrorResponse.fromJS(resultData500);
//             return throwException("Server Error", status, _responseText, _headers, result500);
//             }));
//         } else if (status !== 200 && status !== 204) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             return throwException("An unexpected server error occurred.", status, _responseText, _headers);
//             }));
//         }
//         return _observableOf<ListResultDto_1OfOfLanguageDtoAndContractsAnd_0AndCulture_neutralAndPublicKeyToken_null>(<any>null);
//     }
//
//     /**
//      * @return Success
//      */
//     setAsDefault(id: string): Observable<void> {
//         let url_ = this.baseUrl + "/api/language-management/languages/{id}/set-as-default";
//         if (id === undefined || id === null)
//             throw new Error("The parameter 'id' must be defined.");
//         url_ = url_.replace("{id}", encodeURIComponent("" + id));
//         url_ = url_.replace(/[?&]$/, "");
//
//         let options_ : any = {
//             observe: "response",
//             responseType: "blob",
//             headers: new HttpHeaders({
//             })
//         };
//
//         return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
//             return this.processSetAsDefault(response_);
//         })).pipe(_observableCatch((response_: any) => {
//             if (response_ instanceof HttpResponseBase) {
//                 try {
//                     return this.processSetAsDefault(<any>response_);
//                 } catch (e) {
//                     return <Observable<void>><any>_observableThrow(e);
//                 }
//             } else
//                 return <Observable<void>><any>_observableThrow(response_);
//         }));
//     }
//
//     protected processSetAsDefault(response: HttpResponseBase): Observable<void> {
//         const status = response.status;
//         const responseBlob =
//             response instanceof HttpResponse ? response.body :
//             (<any>response).error instanceof Blob ? (<any>response).error : undefined;
//
//         let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
//         if (status === 200) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             return _observableOf<void>(<any>null);
//             }));
//         } else if (status === 403) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result403: any = null;
//             let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result403 = RemoteServiceErrorResponse.fromJS(resultData403);
//             return throwException("Forbidden", status, _responseText, _headers, result403);
//             }));
//         } else if (status === 401) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result401: any = null;
//             let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result401 = RemoteServiceErrorResponse.fromJS(resultData401);
//             return throwException("Unauthorized", status, _responseText, _headers, result401);
//             }));
//         } else if (status === 400) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result400: any = null;
//             let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result400 = RemoteServiceErrorResponse.fromJS(resultData400);
//             return throwException("Bad Request", status, _responseText, _headers, result400);
//             }));
//         } else if (status === 404) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result404: any = null;
//             let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result404 = RemoteServiceErrorResponse.fromJS(resultData404);
//             return throwException("Not Found", status, _responseText, _headers, result404);
//             }));
//         } else if (status === 501) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result501: any = null;
//             let resultData501 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result501 = RemoteServiceErrorResponse.fromJS(resultData501);
//             return throwException("Server Error", status, _responseText, _headers, result501);
//             }));
//         } else if (status === 500) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result500: any = null;
//             let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result500 = RemoteServiceErrorResponse.fromJS(resultData500);
//             return throwException("Server Error", status, _responseText, _headers, result500);
//             }));
//         } else if (status !== 200 && status !== 204) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             return throwException("An unexpected server error occurred.", status, _responseText, _headers);
//             }));
//         }
//         return _observableOf<void>(<any>null);
//     }
//
//     /**
//      * @return Success
//      */
//     resources(): Observable<LanguageResourceDto[]> {
//         let url_ = this.baseUrl + "/api/language-management/languages/resources";
//         url_ = url_.replace(/[?&]$/, "");
//
//         let options_ : any = {
//             observe: "response",
//             responseType: "blob",
//             headers: new HttpHeaders({
//                 "Accept": "text/plain"
//             })
//         };
//
//         return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
//             return this.processResources(response_);
//         })).pipe(_observableCatch((response_: any) => {
//             if (response_ instanceof HttpResponseBase) {
//                 try {
//                     return this.processResources(<any>response_);
//                 } catch (e) {
//                     return <Observable<LanguageResourceDto[]>><any>_observableThrow(e);
//                 }
//             } else
//                 return <Observable<LanguageResourceDto[]>><any>_observableThrow(response_);
//         }));
//     }
//
//     protected processResources(response: HttpResponseBase): Observable<LanguageResourceDto[]> {
//         const status = response.status;
//         const responseBlob =
//             response instanceof HttpResponse ? response.body :
//             (<any>response).error instanceof Blob ? (<any>response).error : undefined;
//
//         let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
//         if (status === 200) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result200: any = null;
//             let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             if (Array.isArray(resultData200)) {
//                 result200 = [] as any;
//                 for (let item of resultData200)
//                     result200!.push(LanguageResourceDto.fromJS(item));
//             }
//             else {
//                 result200 = <any>null;
//             }
//             return _observableOf(result200);
//             }));
//         } else if (status === 403) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result403: any = null;
//             let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result403 = RemoteServiceErrorResponse.fromJS(resultData403);
//             return throwException("Forbidden", status, _responseText, _headers, result403);
//             }));
//         } else if (status === 401) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result401: any = null;
//             let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result401 = RemoteServiceErrorResponse.fromJS(resultData401);
//             return throwException("Unauthorized", status, _responseText, _headers, result401);
//             }));
//         } else if (status === 400) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result400: any = null;
//             let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result400 = RemoteServiceErrorResponse.fromJS(resultData400);
//             return throwException("Bad Request", status, _responseText, _headers, result400);
//             }));
//         } else if (status === 404) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result404: any = null;
//             let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result404 = RemoteServiceErrorResponse.fromJS(resultData404);
//             return throwException("Not Found", status, _responseText, _headers, result404);
//             }));
//         } else if (status === 501) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result501: any = null;
//             let resultData501 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result501 = RemoteServiceErrorResponse.fromJS(resultData501);
//             return throwException("Server Error", status, _responseText, _headers, result501);
//             }));
//         } else if (status === 500) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result500: any = null;
//             let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result500 = RemoteServiceErrorResponse.fromJS(resultData500);
//             return throwException("Server Error", status, _responseText, _headers, result500);
//             }));
//         } else if (status !== 200 && status !== 204) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             return throwException("An unexpected server error occurred.", status, _responseText, _headers);
//             }));
//         }
//         return _observableOf<LanguageResourceDto[]>(<any>null);
//     }
//
//     /**
//      * @return Success
//      */
//     cultureList(): Observable<CultureInfoDto[]> {
//         let url_ = this.baseUrl + "/api/language-management/languages/culture-list";
//         url_ = url_.replace(/[?&]$/, "");
//
//         let options_ : any = {
//             observe: "response",
//             responseType: "blob",
//             headers: new HttpHeaders({
//                 "Accept": "text/plain"
//             })
//         };
//
//         return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
//             return this.processCultureList(response_);
//         })).pipe(_observableCatch((response_: any) => {
//             if (response_ instanceof HttpResponseBase) {
//                 try {
//                     return this.processCultureList(<any>response_);
//                 } catch (e) {
//                     return <Observable<CultureInfoDto[]>><any>_observableThrow(e);
//                 }
//             } else
//                 return <Observable<CultureInfoDto[]>><any>_observableThrow(response_);
//         }));
//     }
//
//     protected processCultureList(response: HttpResponseBase): Observable<CultureInfoDto[]> {
//         const status = response.status;
//         const responseBlob =
//             response instanceof HttpResponse ? response.body :
//             (<any>response).error instanceof Blob ? (<any>response).error : undefined;
//
//         let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
//         if (status === 200) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result200: any = null;
//             let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             if (Array.isArray(resultData200)) {
//                 result200 = [] as any;
//                 for (let item of resultData200)
//                     result200!.push(CultureInfoDto.fromJS(item));
//             }
//             else {
//                 result200 = <any>null;
//             }
//             return _observableOf(result200);
//             }));
//         } else if (status === 403) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result403: any = null;
//             let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result403 = RemoteServiceErrorResponse.fromJS(resultData403);
//             return throwException("Forbidden", status, _responseText, _headers, result403);
//             }));
//         } else if (status === 401) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result401: any = null;
//             let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result401 = RemoteServiceErrorResponse.fromJS(resultData401);
//             return throwException("Unauthorized", status, _responseText, _headers, result401);
//             }));
//         } else if (status === 400) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result400: any = null;
//             let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result400 = RemoteServiceErrorResponse.fromJS(resultData400);
//             return throwException("Bad Request", status, _responseText, _headers, result400);
//             }));
//         } else if (status === 404) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result404: any = null;
//             let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result404 = RemoteServiceErrorResponse.fromJS(resultData404);
//             return throwException("Not Found", status, _responseText, _headers, result404);
//             }));
//         } else if (status === 501) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result501: any = null;
//             let resultData501 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result501 = RemoteServiceErrorResponse.fromJS(resultData501);
//             return throwException("Server Error", status, _responseText, _headers, result501);
//             }));
//         } else if (status === 500) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result500: any = null;
//             let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result500 = RemoteServiceErrorResponse.fromJS(resultData500);
//             return throwException("Server Error", status, _responseText, _headers, result500);
//             }));
//         } else if (status !== 200 && status !== 204) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             return throwException("An unexpected server error occurred.", status, _responseText, _headers);
//             }));
//         }
//         return _observableOf<CultureInfoDto[]>(<any>null);
//     }
//
//     /**
//      * @return Success
//      */
//     flagList(): Observable<string[]> {
//         let url_ = this.baseUrl + "/api/language-management/languages/flag-list";
//         url_ = url_.replace(/[?&]$/, "");
//
//         let options_ : any = {
//             observe: "response",
//             responseType: "blob",
//             headers: new HttpHeaders({
//                 "Accept": "text/plain"
//             })
//         };
//
//         return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
//             return this.processFlagList(response_);
//         })).pipe(_observableCatch((response_: any) => {
//             if (response_ instanceof HttpResponseBase) {
//                 try {
//                     return this.processFlagList(<any>response_);
//                 } catch (e) {
//                     return <Observable<string[]>><any>_observableThrow(e);
//                 }
//             } else
//                 return <Observable<string[]>><any>_observableThrow(response_);
//         }));
//     }
//
//     protected processFlagList(response: HttpResponseBase): Observable<string[]> {
//         const status = response.status;
//         const responseBlob =
//             response instanceof HttpResponse ? response.body :
//             (<any>response).error instanceof Blob ? (<any>response).error : undefined;
//
//         let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
//         if (status === 200) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result200: any = null;
//             let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             if (Array.isArray(resultData200)) {
//                 result200 = [] as any;
//                 for (let item of resultData200)
//                     result200!.push(item);
//             }
//             else {
//                 result200 = <any>null;
//             }
//             return _observableOf(result200);
//             }));
//         } else if (status === 403) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result403: any = null;
//             let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result403 = RemoteServiceErrorResponse.fromJS(resultData403);
//             return throwException("Forbidden", status, _responseText, _headers, result403);
//             }));
//         } else if (status === 401) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result401: any = null;
//             let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result401 = RemoteServiceErrorResponse.fromJS(resultData401);
//             return throwException("Unauthorized", status, _responseText, _headers, result401);
//             }));
//         } else if (status === 400) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result400: any = null;
//             let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result400 = RemoteServiceErrorResponse.fromJS(resultData400);
//             return throwException("Bad Request", status, _responseText, _headers, result400);
//             }));
//         } else if (status === 404) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result404: any = null;
//             let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result404 = RemoteServiceErrorResponse.fromJS(resultData404);
//             return throwException("Not Found", status, _responseText, _headers, result404);
//             }));
//         } else if (status === 501) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result501: any = null;
//             let resultData501 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result501 = RemoteServiceErrorResponse.fromJS(resultData501);
//             return throwException("Server Error", status, _responseText, _headers, result501);
//             }));
//         } else if (status === 500) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result500: any = null;
//             let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result500 = RemoteServiceErrorResponse.fromJS(resultData500);
//             return throwException("Server Error", status, _responseText, _headers, result500);
//             }));
//         } else if (status !== 200 && status !== 204) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             return throwException("An unexpected server error occurred.", status, _responseText, _headers);
//             }));
//         }
//         return _observableOf<string[]>(<any>null);
//     }
// }
//
// @Injectable({providedIn: 'root'})
// export class LanguageManagementServiceProxy {
//     private http: HttpClient;
//     private baseUrl: string;
//     protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;
//
//     constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
//         this.http = http;
//         this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
//     }
//
//     /**
//      * @param filter (optional)
//      * @param resourceName (optional)
//      * @param baseCultureName (optional)
//      * @param targetCultureName (optional)
//      * @param getOnlyEmptyValues (optional)
//      * @param sorting (optional)
//      * @param skipCount (optional)
//      * @param maxResultCount (optional)
//      * @return Success
//      */
//     languagesGet(filter: string | undefined, resourceName: string | undefined, baseCultureName: string | undefined, targetCultureName: string | undefined, getOnlyEmptyValues: boolean | undefined, sorting: string | undefined, skipCount: number | undefined, maxResultCount: number | undefined): Observable<PagedResultDto_1OfOfLanguageDtoAndContractsAnd_0AndCulture_neutralAndPublicKeyToken_null> {
//         let url_ = this.baseUrl + "/api/language-management/languages?";
//         if (filter === null)
//             throw new Error("The parameter 'filter' cannot be null.");
//         else if (filter !== undefined)
//             url_ += "Filter=" + encodeURIComponent("" + filter) + "&";
//         if (resourceName === null)
//             throw new Error("The parameter 'resourceName' cannot be null.");
//         else if (resourceName !== undefined)
//             url_ += "ResourceName=" + encodeURIComponent("" + resourceName) + "&";
//         if (baseCultureName === null)
//             throw new Error("The parameter 'baseCultureName' cannot be null.");
//         else if (baseCultureName !== undefined)
//             url_ += "BaseCultureName=" + encodeURIComponent("" + baseCultureName) + "&";
//         if (targetCultureName === null)
//             throw new Error("The parameter 'targetCultureName' cannot be null.");
//         else if (targetCultureName !== undefined)
//             url_ += "TargetCultureName=" + encodeURIComponent("" + targetCultureName) + "&";
//         if (getOnlyEmptyValues === null)
//             throw new Error("The parameter 'getOnlyEmptyValues' cannot be null.");
//         else if (getOnlyEmptyValues !== undefined)
//             url_ += "GetOnlyEmptyValues=" + encodeURIComponent("" + getOnlyEmptyValues) + "&";
//         if (sorting === null)
//             throw new Error("The parameter 'sorting' cannot be null.");
//         else if (sorting !== undefined)
//             url_ += "Sorting=" + encodeURIComponent("" + sorting) + "&";
//         if (skipCount === null)
//             throw new Error("The parameter 'skipCount' cannot be null.");
//         else if (skipCount !== undefined)
//             url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&";
//         if (maxResultCount === null)
//             throw new Error("The parameter 'maxResultCount' cannot be null.");
//         else if (maxResultCount !== undefined)
//             url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&";
//         url_ = url_.replace(/[?&]$/, "");
//
//         let options_ : any = {
//             observe: "response",
//             responseType: "blob",
//             headers: new HttpHeaders({
//                 "Accept": "text/plain"
//             })
//         };
//
//         return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
//             return this.processLanguagesGet(response_);
//         })).pipe(_observableCatch((response_: any) => {
//             if (response_ instanceof HttpResponseBase) {
//                 try {
//                     return this.processLanguagesGet(<any>response_);
//                 } catch (e) {
//                     return <Observable<PagedResultDto_1OfOfLanguageDtoAndContractsAnd_0AndCulture_neutralAndPublicKeyToken_null>><any>_observableThrow(e);
//                 }
//             } else
//                 return <Observable<PagedResultDto_1OfOfLanguageDtoAndContractsAnd_0AndCulture_neutralAndPublicKeyToken_null>><any>_observableThrow(response_);
//         }));
//     }
//
//     protected processLanguagesGet(response: HttpResponseBase): Observable<PagedResultDto_1OfOfLanguageDtoAndContractsAnd_0AndCulture_neutralAndPublicKeyToken_null> {
//         const status = response.status;
//         const responseBlob =
//             response instanceof HttpResponse ? response.body :
//             (<any>response).error instanceof Blob ? (<any>response).error : undefined;
//
//         let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
//         if (status === 200) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result200: any = null;
//             let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result200 = PagedResultDto_1OfOfLanguageDtoAndContractsAnd_0AndCulture_neutralAndPublicKeyToken_null.fromJS(resultData200);
//             return _observableOf(result200);
//             }));
//         } else if (status === 403) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result403: any = null;
//             let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result403 = RemoteServiceErrorResponse.fromJS(resultData403);
//             return throwException("Forbidden", status, _responseText, _headers, result403);
//             }));
//         } else if (status === 401) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result401: any = null;
//             let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result401 = RemoteServiceErrorResponse.fromJS(resultData401);
//             return throwException("Unauthorized", status, _responseText, _headers, result401);
//             }));
//         } else if (status === 400) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result400: any = null;
//             let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result400 = RemoteServiceErrorResponse.fromJS(resultData400);
//             return throwException("Bad Request", status, _responseText, _headers, result400);
//             }));
//         } else if (status === 404) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result404: any = null;
//             let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result404 = RemoteServiceErrorResponse.fromJS(resultData404);
//             return throwException("Not Found", status, _responseText, _headers, result404);
//             }));
//         } else if (status === 501) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result501: any = null;
//             let resultData501 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result501 = RemoteServiceErrorResponse.fromJS(resultData501);
//             return throwException("Server Error", status, _responseText, _headers, result501);
//             }));
//         } else if (status === 500) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result500: any = null;
//             let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result500 = RemoteServiceErrorResponse.fromJS(resultData500);
//             return throwException("Server Error", status, _responseText, _headers, result500);
//             }));
//         } else if (status !== 200 && status !== 204) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             return throwException("An unexpected server error occurred.", status, _responseText, _headers);
//             }));
//         }
//         return _observableOf<PagedResultDto_1OfOfLanguageDtoAndContractsAnd_0AndCulture_neutralAndPublicKeyToken_null>(<any>null);
//     }
//
//     /**
//      * @param body (optional)
//      * @return Success
//      */
//     languagesPost(body: CreateLanguageDto | undefined): Observable<LanguageDto> {
//         let url_ = this.baseUrl + "/api/language-management/languages";
//         url_ = url_.replace(/[?&]$/, "");
//
//         const content_ = JSON.stringify(body);
//
//         let options_ : any = {
//             body: content_,
//             observe: "response",
//             responseType: "blob",
//             headers: new HttpHeaders({
//                 "Content-Type": "application/json",
//                 "Accept": "text/plain"
//             })
//         };
//
//         return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
//             return this.processLanguagesPost(response_);
//         })).pipe(_observableCatch((response_: any) => {
//             if (response_ instanceof HttpResponseBase) {
//                 try {
//                     return this.processLanguagesPost(<any>response_);
//                 } catch (e) {
//                     return <Observable<LanguageDto>><any>_observableThrow(e);
//                 }
//             } else
//                 return <Observable<LanguageDto>><any>_observableThrow(response_);
//         }));
//     }
//
//     protected processLanguagesPost(response: HttpResponseBase): Observable<LanguageDto> {
//         const status = response.status;
//         const responseBlob =
//             response instanceof HttpResponse ? response.body :
//             (<any>response).error instanceof Blob ? (<any>response).error : undefined;
//
//         let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
//         if (status === 200) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result200: any = null;
//             let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result200 = LanguageDto.fromJS(resultData200);
//             return _observableOf(result200);
//             }));
//         } else if (status === 403) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result403: any = null;
//             let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result403 = RemoteServiceErrorResponse.fromJS(resultData403);
//             return throwException("Forbidden", status, _responseText, _headers, result403);
//             }));
//         } else if (status === 401) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result401: any = null;
//             let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result401 = RemoteServiceErrorResponse.fromJS(resultData401);
//             return throwException("Unauthorized", status, _responseText, _headers, result401);
//             }));
//         } else if (status === 400) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result400: any = null;
//             let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result400 = RemoteServiceErrorResponse.fromJS(resultData400);
//             return throwException("Bad Request", status, _responseText, _headers, result400);
//             }));
//         } else if (status === 404) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result404: any = null;
//             let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result404 = RemoteServiceErrorResponse.fromJS(resultData404);
//             return throwException("Not Found", status, _responseText, _headers, result404);
//             }));
//         } else if (status === 501) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result501: any = null;
//             let resultData501 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result501 = RemoteServiceErrorResponse.fromJS(resultData501);
//             return throwException("Server Error", status, _responseText, _headers, result501);
//             }));
//         } else if (status === 500) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result500: any = null;
//             let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result500 = RemoteServiceErrorResponse.fromJS(resultData500);
//             return throwException("Server Error", status, _responseText, _headers, result500);
//             }));
//         } else if (status !== 200 && status !== 204) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             return throwException("An unexpected server error occurred.", status, _responseText, _headers);
//             }));
//         }
//         return _observableOf<LanguageDto>(<any>null);
//     }
//
//     /**
//      * @return Success
//      */
//     languagesGet(id: string): Observable<LanguageDto> {
//         let url_ = this.baseUrl + "/api/language-management/languages/{id}";
//         if (id === undefined || id === null)
//             throw new Error("The parameter 'id' must be defined.");
//         url_ = url_.replace("{id}", encodeURIComponent("" + id));
//         url_ = url_.replace(/[?&]$/, "");
//
//         let options_ : any = {
//             observe: "response",
//             responseType: "blob",
//             headers: new HttpHeaders({
//                 "Accept": "text/plain"
//             })
//         };
//
//         return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
//             return this.processLanguagesGet(response_);
//         })).pipe(_observableCatch((response_: any) => {
//             if (response_ instanceof HttpResponseBase) {
//                 try {
//                     return this.processLanguagesGet(<any>response_);
//                 } catch (e) {
//                     return <Observable<LanguageDto>><any>_observableThrow(e);
//                 }
//             } else
//                 return <Observable<LanguageDto>><any>_observableThrow(response_);
//         }));
//     }
//
//     protected processLanguagesGet(response: HttpResponseBase): Observable<LanguageDto> {
//         const status = response.status;
//         const responseBlob =
//             response instanceof HttpResponse ? response.body :
//             (<any>response).error instanceof Blob ? (<any>response).error : undefined;
//
//         let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
//         if (status === 200) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result200: any = null;
//             let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result200 = LanguageDto.fromJS(resultData200);
//             return _observableOf(result200);
//             }));
//         } else if (status === 403) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result403: any = null;
//             let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result403 = RemoteServiceErrorResponse.fromJS(resultData403);
//             return throwException("Forbidden", status, _responseText, _headers, result403);
//             }));
//         } else if (status === 401) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result401: any = null;
//             let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result401 = RemoteServiceErrorResponse.fromJS(resultData401);
//             return throwException("Unauthorized", status, _responseText, _headers, result401);
//             }));
//         } else if (status === 400) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result400: any = null;
//             let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result400 = RemoteServiceErrorResponse.fromJS(resultData400);
//             return throwException("Bad Request", status, _responseText, _headers, result400);
//             }));
//         } else if (status === 404) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result404: any = null;
//             let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result404 = RemoteServiceErrorResponse.fromJS(resultData404);
//             return throwException("Not Found", status, _responseText, _headers, result404);
//             }));
//         } else if (status === 501) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result501: any = null;
//             let resultData501 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result501 = RemoteServiceErrorResponse.fromJS(resultData501);
//             return throwException("Server Error", status, _responseText, _headers, result501);
//             }));
//         } else if (status === 500) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result500: any = null;
//             let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result500 = RemoteServiceErrorResponse.fromJS(resultData500);
//             return throwException("Server Error", status, _responseText, _headers, result500);
//             }));
//         } else if (status !== 200 && status !== 204) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             return throwException("An unexpected server error occurred.", status, _responseText, _headers);
//             }));
//         }
//         return _observableOf<LanguageDto>(<any>null);
//     }
//
//     /**
//      * @param body (optional)
//      * @return Success
//      */
//     languagesPut(id: string, body: UpdateLanguageDto | undefined): Observable<LanguageDto> {
//         let url_ = this.baseUrl + "/api/language-management/languages/{id}";
//         if (id === undefined || id === null)
//             throw new Error("The parameter 'id' must be defined.");
//         url_ = url_.replace("{id}", encodeURIComponent("" + id));
//         url_ = url_.replace(/[?&]$/, "");
//
//         const content_ = JSON.stringify(body);
//
//         let options_ : any = {
//             body: content_,
//             observe: "response",
//             responseType: "blob",
//             headers: new HttpHeaders({
//                 "Content-Type": "application/json",
//                 "Accept": "text/plain"
//             })
//         };
//
//         return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
//             return this.processLanguagesPut(response_);
//         })).pipe(_observableCatch((response_: any) => {
//             if (response_ instanceof HttpResponseBase) {
//                 try {
//                     return this.processLanguagesPut(<any>response_);
//                 } catch (e) {
//                     return <Observable<LanguageDto>><any>_observableThrow(e);
//                 }
//             } else
//                 return <Observable<LanguageDto>><any>_observableThrow(response_);
//         }));
//     }
//
//     protected processLanguagesPut(response: HttpResponseBase): Observable<LanguageDto> {
//         const status = response.status;
//         const responseBlob =
//             response instanceof HttpResponse ? response.body :
//             (<any>response).error instanceof Blob ? (<any>response).error : undefined;
//
//         let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
//         if (status === 200) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result200: any = null;
//             let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result200 = LanguageDto.fromJS(resultData200);
//             return _observableOf(result200);
//             }));
//         } else if (status === 403) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result403: any = null;
//             let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result403 = RemoteServiceErrorResponse.fromJS(resultData403);
//             return throwException("Forbidden", status, _responseText, _headers, result403);
//             }));
//         } else if (status === 401) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result401: any = null;
//             let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result401 = RemoteServiceErrorResponse.fromJS(resultData401);
//             return throwException("Unauthorized", status, _responseText, _headers, result401);
//             }));
//         } else if (status === 400) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result400: any = null;
//             let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result400 = RemoteServiceErrorResponse.fromJS(resultData400);
//             return throwException("Bad Request", status, _responseText, _headers, result400);
//             }));
//         } else if (status === 404) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result404: any = null;
//             let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result404 = RemoteServiceErrorResponse.fromJS(resultData404);
//             return throwException("Not Found", status, _responseText, _headers, result404);
//             }));
//         } else if (status === 501) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result501: any = null;
//             let resultData501 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result501 = RemoteServiceErrorResponse.fromJS(resultData501);
//             return throwException("Server Error", status, _responseText, _headers, result501);
//             }));
//         } else if (status === 500) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result500: any = null;
//             let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result500 = RemoteServiceErrorResponse.fromJS(resultData500);
//             return throwException("Server Error", status, _responseText, _headers, result500);
//             }));
//         } else if (status !== 200 && status !== 204) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             return throwException("An unexpected server error occurred.", status, _responseText, _headers);
//             }));
//         }
//         return _observableOf<LanguageDto>(<any>null);
//     }
//
//     /**
//      * @return Success
//      */
//     languagesDelete(id: string): Observable<void> {
//         let url_ = this.baseUrl + "/api/language-management/languages/{id}";
//         if (id === undefined || id === null)
//             throw new Error("The parameter 'id' must be defined.");
//         url_ = url_.replace("{id}", encodeURIComponent("" + id));
//         url_ = url_.replace(/[?&]$/, "");
//
//         let options_ : any = {
//             observe: "response",
//             responseType: "blob",
//             headers: new HttpHeaders({
//             })
//         };
//
//         return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
//             return this.processLanguagesDelete(response_);
//         })).pipe(_observableCatch((response_: any) => {
//             if (response_ instanceof HttpResponseBase) {
//                 try {
//                     return this.processLanguagesDelete(<any>response_);
//                 } catch (e) {
//                     return <Observable<void>><any>_observableThrow(e);
//                 }
//             } else
//                 return <Observable<void>><any>_observableThrow(response_);
//         }));
//     }
//
//     protected processLanguagesDelete(response: HttpResponseBase): Observable<void> {
//         const status = response.status;
//         const responseBlob =
//             response instanceof HttpResponse ? response.body :
//             (<any>response).error instanceof Blob ? (<any>response).error : undefined;
//
//         let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
//         if (status === 200) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             return _observableOf<void>(<any>null);
//             }));
//         } else if (status === 403) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result403: any = null;
//             let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result403 = RemoteServiceErrorResponse.fromJS(resultData403);
//             return throwException("Forbidden", status, _responseText, _headers, result403);
//             }));
//         } else if (status === 401) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result401: any = null;
//             let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result401 = RemoteServiceErrorResponse.fromJS(resultData401);
//             return throwException("Unauthorized", status, _responseText, _headers, result401);
//             }));
//         } else if (status === 400) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result400: any = null;
//             let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result400 = RemoteServiceErrorResponse.fromJS(resultData400);
//             return throwException("Bad Request", status, _responseText, _headers, result400);
//             }));
//         } else if (status === 404) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result404: any = null;
//             let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result404 = RemoteServiceErrorResponse.fromJS(resultData404);
//             return throwException("Not Found", status, _responseText, _headers, result404);
//             }));
//         } else if (status === 501) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result501: any = null;
//             let resultData501 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result501 = RemoteServiceErrorResponse.fromJS(resultData501);
//             return throwException("Server Error", status, _responseText, _headers, result501);
//             }));
//         } else if (status === 500) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result500: any = null;
//             let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result500 = RemoteServiceErrorResponse.fromJS(resultData500);
//             return throwException("Server Error", status, _responseText, _headers, result500);
//             }));
//         } else if (status !== 200 && status !== 204) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             return throwException("An unexpected server error occurred.", status, _responseText, _headers);
//             }));
//         }
//         return _observableOf<void>(<any>null);
//     }
//
//     /**
//      * @param filter (optional)
//      * @param resourceName (optional)
//      * @param baseCultureName (optional)
//      * @param targetCultureName (optional)
//      * @param getOnlyEmptyValues (optional)
//      * @param sorting (optional)
//      * @param skipCount (optional)
//      * @param maxResultCount (optional)
//      * @return Success
//      */
//     languageTextsGet(filter: string | undefined, resourceName: string | undefined, baseCultureName: string | undefined, targetCultureName: string | undefined, getOnlyEmptyValues: boolean | undefined, sorting: string | undefined, skipCount: number | undefined, maxResultCount: number | undefined): Observable<PagedResultDto_1OfOfLanguageTextDtoAndContractsAnd_0AndCulture_neutralAndPublicKeyToken_null> {
//         let url_ = this.baseUrl + "/api/language-management/language-texts?";
//         if (filter === null)
//             throw new Error("The parameter 'filter' cannot be null.");
//         else if (filter !== undefined)
//             url_ += "Filter=" + encodeURIComponent("" + filter) + "&";
//         if (resourceName === null)
//             throw new Error("The parameter 'resourceName' cannot be null.");
//         else if (resourceName !== undefined)
//             url_ += "ResourceName=" + encodeURIComponent("" + resourceName) + "&";
//         if (baseCultureName === null)
//             throw new Error("The parameter 'baseCultureName' cannot be null.");
//         else if (baseCultureName !== undefined)
//             url_ += "BaseCultureName=" + encodeURIComponent("" + baseCultureName) + "&";
//         if (targetCultureName === null)
//             throw new Error("The parameter 'targetCultureName' cannot be null.");
//         else if (targetCultureName !== undefined)
//             url_ += "TargetCultureName=" + encodeURIComponent("" + targetCultureName) + "&";
//         if (getOnlyEmptyValues === null)
//             throw new Error("The parameter 'getOnlyEmptyValues' cannot be null.");
//         else if (getOnlyEmptyValues !== undefined)
//             url_ += "GetOnlyEmptyValues=" + encodeURIComponent("" + getOnlyEmptyValues) + "&";
//         if (sorting === null)
//             throw new Error("The parameter 'sorting' cannot be null.");
//         else if (sorting !== undefined)
//             url_ += "Sorting=" + encodeURIComponent("" + sorting) + "&";
//         if (skipCount === null)
//             throw new Error("The parameter 'skipCount' cannot be null.");
//         else if (skipCount !== undefined)
//             url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&";
//         if (maxResultCount === null)
//             throw new Error("The parameter 'maxResultCount' cannot be null.");
//         else if (maxResultCount !== undefined)
//             url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&";
//         url_ = url_.replace(/[?&]$/, "");
//
//         let options_ : any = {
//             observe: "response",
//             responseType: "blob",
//             headers: new HttpHeaders({
//                 "Accept": "text/plain"
//             })
//         };
//
//         return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
//             return this.processLanguageTextsGet(response_);
//         })).pipe(_observableCatch((response_: any) => {
//             if (response_ instanceof HttpResponseBase) {
//                 try {
//                     return this.processLanguageTextsGet(<any>response_);
//                 } catch (e) {
//                     return <Observable<PagedResultDto_1OfOfLanguageTextDtoAndContractsAnd_0AndCulture_neutralAndPublicKeyToken_null>><any>_observableThrow(e);
//                 }
//             } else
//                 return <Observable<PagedResultDto_1OfOfLanguageTextDtoAndContractsAnd_0AndCulture_neutralAndPublicKeyToken_null>><any>_observableThrow(response_);
//         }));
//     }
//
//     protected processLanguageTextsGet(response: HttpResponseBase): Observable<PagedResultDto_1OfOfLanguageTextDtoAndContractsAnd_0AndCulture_neutralAndPublicKeyToken_null> {
//         const status = response.status;
//         const responseBlob =
//             response instanceof HttpResponse ? response.body :
//             (<any>response).error instanceof Blob ? (<any>response).error : undefined;
//
//         let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
//         if (status === 200) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result200: any = null;
//             let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result200 = PagedResultDto_1OfOfLanguageTextDtoAndContractsAnd_0AndCulture_neutralAndPublicKeyToken_null.fromJS(resultData200);
//             return _observableOf(result200);
//             }));
//         } else if (status === 403) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result403: any = null;
//             let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result403 = RemoteServiceErrorResponse.fromJS(resultData403);
//             return throwException("Forbidden", status, _responseText, _headers, result403);
//             }));
//         } else if (status === 401) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result401: any = null;
//             let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result401 = RemoteServiceErrorResponse.fromJS(resultData401);
//             return throwException("Unauthorized", status, _responseText, _headers, result401);
//             }));
//         } else if (status === 400) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result400: any = null;
//             let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result400 = RemoteServiceErrorResponse.fromJS(resultData400);
//             return throwException("Bad Request", status, _responseText, _headers, result400);
//             }));
//         } else if (status === 404) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result404: any = null;
//             let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result404 = RemoteServiceErrorResponse.fromJS(resultData404);
//             return throwException("Not Found", status, _responseText, _headers, result404);
//             }));
//         } else if (status === 501) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result501: any = null;
//             let resultData501 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result501 = RemoteServiceErrorResponse.fromJS(resultData501);
//             return throwException("Server Error", status, _responseText, _headers, result501);
//             }));
//         } else if (status === 500) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result500: any = null;
//             let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result500 = RemoteServiceErrorResponse.fromJS(resultData500);
//             return throwException("Server Error", status, _responseText, _headers, result500);
//             }));
//         } else if (status !== 200 && status !== 204) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             return throwException("An unexpected server error occurred.", status, _responseText, _headers);
//             }));
//         }
//         return _observableOf<PagedResultDto_1OfOfLanguageTextDtoAndContractsAnd_0AndCulture_neutralAndPublicKeyToken_null>(<any>null);
//     }
//
//     /**
//      * @param baseCultureName (optional)
//      * @return Success
//      */
//     languageTextsGet(resourceName: string, cultureName: string, name: string, baseCultureName: string | undefined): Observable<LanguageTextDto> {
//         let url_ = this.baseUrl + "/api/language-management/language-texts/{resourceName}/{cultureName}/{name}?";
//         if (resourceName === undefined || resourceName === null)
//             throw new Error("The parameter 'resourceName' must be defined.");
//         url_ = url_.replace("{resourceName}", encodeURIComponent("" + resourceName));
//         if (cultureName === undefined || cultureName === null)
//             throw new Error("The parameter 'cultureName' must be defined.");
//         url_ = url_.replace("{cultureName}", encodeURIComponent("" + cultureName));
//         if (name === undefined || name === null)
//             throw new Error("The parameter 'name' must be defined.");
//         url_ = url_.replace("{name}", encodeURIComponent("" + name));
//         if (baseCultureName === null)
//             throw new Error("The parameter 'baseCultureName' cannot be null.");
//         else if (baseCultureName !== undefined)
//             url_ += "baseCultureName=" + encodeURIComponent("" + baseCultureName) + "&";
//         url_ = url_.replace(/[?&]$/, "");
//
//         let options_ : any = {
//             observe: "response",
//             responseType: "blob",
//             headers: new HttpHeaders({
//                 "Accept": "text/plain"
//             })
//         };
//
//         return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
//             return this.processLanguageTextsGet(response_);
//         })).pipe(_observableCatch((response_: any) => {
//             if (response_ instanceof HttpResponseBase) {
//                 try {
//                     return this.processLanguageTextsGet(<any>response_);
//                 } catch (e) {
//                     return <Observable<LanguageTextDto>><any>_observableThrow(e);
//                 }
//             } else
//                 return <Observable<LanguageTextDto>><any>_observableThrow(response_);
//         }));
//     }
//
//     protected processLanguageTextsGet(response: HttpResponseBase): Observable<LanguageTextDto> {
//         const status = response.status;
//         const responseBlob =
//             response instanceof HttpResponse ? response.body :
//             (<any>response).error instanceof Blob ? (<any>response).error : undefined;
//
//         let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
//         if (status === 200) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result200: any = null;
//             let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result200 = LanguageTextDto.fromJS(resultData200);
//             return _observableOf(result200);
//             }));
//         } else if (status === 403) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result403: any = null;
//             let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result403 = RemoteServiceErrorResponse.fromJS(resultData403);
//             return throwException("Forbidden", status, _responseText, _headers, result403);
//             }));
//         } else if (status === 401) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result401: any = null;
//             let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result401 = RemoteServiceErrorResponse.fromJS(resultData401);
//             return throwException("Unauthorized", status, _responseText, _headers, result401);
//             }));
//         } else if (status === 400) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result400: any = null;
//             let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result400 = RemoteServiceErrorResponse.fromJS(resultData400);
//             return throwException("Bad Request", status, _responseText, _headers, result400);
//             }));
//         } else if (status === 404) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result404: any = null;
//             let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result404 = RemoteServiceErrorResponse.fromJS(resultData404);
//             return throwException("Not Found", status, _responseText, _headers, result404);
//             }));
//         } else if (status === 501) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result501: any = null;
//             let resultData501 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result501 = RemoteServiceErrorResponse.fromJS(resultData501);
//             return throwException("Server Error", status, _responseText, _headers, result501);
//             }));
//         } else if (status === 500) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result500: any = null;
//             let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result500 = RemoteServiceErrorResponse.fromJS(resultData500);
//             return throwException("Server Error", status, _responseText, _headers, result500);
//             }));
//         } else if (status !== 200 && status !== 204) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             return throwException("An unexpected server error occurred.", status, _responseText, _headers);
//             }));
//         }
//         return _observableOf<LanguageTextDto>(<any>null);
//     }
//
//     /**
//      * @param value (optional)
//      * @return Success
//      */
//     languageTextsPut(resourceName: string, cultureName: string, name: string, value: string | undefined): Observable<void> {
//         let url_ = this.baseUrl + "/api/language-management/language-texts/{resourceName}/{cultureName}/{name}?";
//         if (resourceName === undefined || resourceName === null)
//             throw new Error("The parameter 'resourceName' must be defined.");
//         url_ = url_.replace("{resourceName}", encodeURIComponent("" + resourceName));
//         if (cultureName === undefined || cultureName === null)
//             throw new Error("The parameter 'cultureName' must be defined.");
//         url_ = url_.replace("{cultureName}", encodeURIComponent("" + cultureName));
//         if (name === undefined || name === null)
//             throw new Error("The parameter 'name' must be defined.");
//         url_ = url_.replace("{name}", encodeURIComponent("" + name));
//         if (value === null)
//             throw new Error("The parameter 'value' cannot be null.");
//         else if (value !== undefined)
//             url_ += "value=" + encodeURIComponent("" + value) + "&";
//         url_ = url_.replace(/[?&]$/, "");
//
//         let options_ : any = {
//             observe: "response",
//             responseType: "blob",
//             headers: new HttpHeaders({
//             })
//         };
//
//         return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
//             return this.processLanguageTextsPut(response_);
//         })).pipe(_observableCatch((response_: any) => {
//             if (response_ instanceof HttpResponseBase) {
//                 try {
//                     return this.processLanguageTextsPut(<any>response_);
//                 } catch (e) {
//                     return <Observable<void>><any>_observableThrow(e);
//                 }
//             } else
//                 return <Observable<void>><any>_observableThrow(response_);
//         }));
//     }
//
//     protected processLanguageTextsPut(response: HttpResponseBase): Observable<void> {
//         const status = response.status;
//         const responseBlob =
//             response instanceof HttpResponse ? response.body :
//             (<any>response).error instanceof Blob ? (<any>response).error : undefined;
//
//         let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
//         if (status === 200) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             return _observableOf<void>(<any>null);
//             }));
//         } else if (status === 403) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result403: any = null;
//             let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result403 = RemoteServiceErrorResponse.fromJS(resultData403);
//             return throwException("Forbidden", status, _responseText, _headers, result403);
//             }));
//         } else if (status === 401) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result401: any = null;
//             let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result401 = RemoteServiceErrorResponse.fromJS(resultData401);
//             return throwException("Unauthorized", status, _responseText, _headers, result401);
//             }));
//         } else if (status === 400) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result400: any = null;
//             let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result400 = RemoteServiceErrorResponse.fromJS(resultData400);
//             return throwException("Bad Request", status, _responseText, _headers, result400);
//             }));
//         } else if (status === 404) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result404: any = null;
//             let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result404 = RemoteServiceErrorResponse.fromJS(resultData404);
//             return throwException("Not Found", status, _responseText, _headers, result404);
//             }));
//         } else if (status === 501) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result501: any = null;
//             let resultData501 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result501 = RemoteServiceErrorResponse.fromJS(resultData501);
//             return throwException("Server Error", status, _responseText, _headers, result501);
//             }));
//         } else if (status === 500) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result500: any = null;
//             let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result500 = RemoteServiceErrorResponse.fromJS(resultData500);
//             return throwException("Server Error", status, _responseText, _headers, result500);
//             }));
//         } else if (status !== 200 && status !== 204) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             return throwException("An unexpected server error occurred.", status, _responseText, _headers);
//             }));
//         }
//         return _observableOf<void>(<any>null);
//     }
// }
//
// @Injectable({providedIn: 'root'})
// export class LanguageTextsServiceProxy {
//     private http: HttpClient;
//     private baseUrl: string;
//     protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;
//
//     constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
//         this.http = http;
//         this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
//     }
//
//     /**
//      * @return Success
//      */
//     restore(resourceName: string, cultureName: string, name: string): Observable<void> {
//         let url_ = this.baseUrl + "/api/language-management/language-texts/{resourceName}/{cultureName}/{name}/restore";
//         if (resourceName === undefined || resourceName === null)
//             throw new Error("The parameter 'resourceName' must be defined.");
//         url_ = url_.replace("{resourceName}", encodeURIComponent("" + resourceName));
//         if (cultureName === undefined || cultureName === null)
//             throw new Error("The parameter 'cultureName' must be defined.");
//         url_ = url_.replace("{cultureName}", encodeURIComponent("" + cultureName));
//         if (name === undefined || name === null)
//             throw new Error("The parameter 'name' must be defined.");
//         url_ = url_.replace("{name}", encodeURIComponent("" + name));
//         url_ = url_.replace(/[?&]$/, "");
//
//         let options_ : any = {
//             observe: "response",
//             responseType: "blob",
//             headers: new HttpHeaders({
//             })
//         };
//
//         return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
//             return this.processRestore(response_);
//         })).pipe(_observableCatch((response_: any) => {
//             if (response_ instanceof HttpResponseBase) {
//                 try {
//                     return this.processRestore(<any>response_);
//                 } catch (e) {
//                     return <Observable<void>><any>_observableThrow(e);
//                 }
//             } else
//                 return <Observable<void>><any>_observableThrow(response_);
//         }));
//     }
//
//     protected processRestore(response: HttpResponseBase): Observable<void> {
//         const status = response.status;
//         const responseBlob =
//             response instanceof HttpResponse ? response.body :
//             (<any>response).error instanceof Blob ? (<any>response).error : undefined;
//
//         let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
//         if (status === 200) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             return _observableOf<void>(<any>null);
//             }));
//         } else if (status === 403) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result403: any = null;
//             let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result403 = RemoteServiceErrorResponse.fromJS(resultData403);
//             return throwException("Forbidden", status, _responseText, _headers, result403);
//             }));
//         } else if (status === 401) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result401: any = null;
//             let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result401 = RemoteServiceErrorResponse.fromJS(resultData401);
//             return throwException("Unauthorized", status, _responseText, _headers, result401);
//             }));
//         } else if (status === 400) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result400: any = null;
//             let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result400 = RemoteServiceErrorResponse.fromJS(resultData400);
//             return throwException("Bad Request", status, _responseText, _headers, result400);
//             }));
//         } else if (status === 404) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result404: any = null;
//             let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result404 = RemoteServiceErrorResponse.fromJS(resultData404);
//             return throwException("Not Found", status, _responseText, _headers, result404);
//             }));
//         } else if (status === 501) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result501: any = null;
//             let resultData501 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result501 = RemoteServiceErrorResponse.fromJS(resultData501);
//             return throwException("Server Error", status, _responseText, _headers, result501);
//             }));
//         } else if (status === 500) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result500: any = null;
//             let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result500 = RemoteServiceErrorResponse.fromJS(resultData500);
//             return throwException("Server Error", status, _responseText, _headers, result500);
//             }));
//         } else if (status !== 200 && status !== 204) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             return throwException("An unexpected server error occurred.", status, _responseText, _headers);
//             }));
//         }
//         return _observableOf<void>(<any>null);
//     }
// }
//
// @Injectable({providedIn: 'root'})
// export class LeptonThemeManagementServiceProxy {
//     private http: HttpClient;
//     private baseUrl: string;
//     protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;
//
//     constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
//         this.http = http;
//         this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
//     }
//
//     /**
//      * @return Success
//      */
//     settingsGet(): Observable<LeptonThemeSettingsDto> {
//         let url_ = this.baseUrl + "/api/lepton-theme-management/settings";
//         url_ = url_.replace(/[?&]$/, "");
//
//         let options_ : any = {
//             observe: "response",
//             responseType: "blob",
//             headers: new HttpHeaders({
//                 "Accept": "text/plain"
//             })
//         };
//
//         return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
//             return this.processSettingsGet(response_);
//         })).pipe(_observableCatch((response_: any) => {
//             if (response_ instanceof HttpResponseBase) {
//                 try {
//                     return this.processSettingsGet(<any>response_);
//                 } catch (e) {
//                     return <Observable<LeptonThemeSettingsDto>><any>_observableThrow(e);
//                 }
//             } else
//                 return <Observable<LeptonThemeSettingsDto>><any>_observableThrow(response_);
//         }));
//     }
//
//     protected processSettingsGet(response: HttpResponseBase): Observable<LeptonThemeSettingsDto> {
//         const status = response.status;
//         const responseBlob =
//             response instanceof HttpResponse ? response.body :
//             (<any>response).error instanceof Blob ? (<any>response).error : undefined;
//
//         let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
//         if (status === 200) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result200: any = null;
//             let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result200 = LeptonThemeSettingsDto.fromJS(resultData200);
//             return _observableOf(result200);
//             }));
//         } else if (status === 403) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result403: any = null;
//             let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result403 = RemoteServiceErrorResponse.fromJS(resultData403);
//             return throwException("Forbidden", status, _responseText, _headers, result403);
//             }));
//         } else if (status === 401) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result401: any = null;
//             let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result401 = RemoteServiceErrorResponse.fromJS(resultData401);
//             return throwException("Unauthorized", status, _responseText, _headers, result401);
//             }));
//         } else if (status === 400) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result400: any = null;
//             let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result400 = RemoteServiceErrorResponse.fromJS(resultData400);
//             return throwException("Bad Request", status, _responseText, _headers, result400);
//             }));
//         } else if (status === 404) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result404: any = null;
//             let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result404 = RemoteServiceErrorResponse.fromJS(resultData404);
//             return throwException("Not Found", status, _responseText, _headers, result404);
//             }));
//         } else if (status === 501) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result501: any = null;
//             let resultData501 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result501 = RemoteServiceErrorResponse.fromJS(resultData501);
//             return throwException("Server Error", status, _responseText, _headers, result501);
//             }));
//         } else if (status === 500) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result500: any = null;
//             let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result500 = RemoteServiceErrorResponse.fromJS(resultData500);
//             return throwException("Server Error", status, _responseText, _headers, result500);
//             }));
//         } else if (status !== 200 && status !== 204) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             return throwException("An unexpected server error occurred.", status, _responseText, _headers);
//             }));
//         }
//         return _observableOf<LeptonThemeSettingsDto>(<any>null);
//     }
//
//     /**
//      * @param body (optional)
//      * @return Success
//      */
//     settingsPut(body: UpdateLeptonThemeSettingsDto | undefined): Observable<void> {
//         let url_ = this.baseUrl + "/api/lepton-theme-management/settings";
//         url_ = url_.replace(/[?&]$/, "");
//
//         const content_ = JSON.stringify(body);
//
//         let options_ : any = {
//             body: content_,
//             observe: "response",
//             responseType: "blob",
//             headers: new HttpHeaders({
//                 "Content-Type": "application/json",
//             })
//         };
//
//         return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
//             return this.processSettingsPut(response_);
//         })).pipe(_observableCatch((response_: any) => {
//             if (response_ instanceof HttpResponseBase) {
//                 try {
//                     return this.processSettingsPut(<any>response_);
//                 } catch (e) {
//                     return <Observable<void>><any>_observableThrow(e);
//                 }
//             } else
//                 return <Observable<void>><any>_observableThrow(response_);
//         }));
//     }
//
//     protected processSettingsPut(response: HttpResponseBase): Observable<void> {
//         const status = response.status;
//         const responseBlob =
//             response instanceof HttpResponse ? response.body :
//             (<any>response).error instanceof Blob ? (<any>response).error : undefined;
//
//         let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
//         if (status === 200) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             return _observableOf<void>(<any>null);
//             }));
//         } else if (status === 403) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result403: any = null;
//             let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result403 = RemoteServiceErrorResponse.fromJS(resultData403);
//             return throwException("Forbidden", status, _responseText, _headers, result403);
//             }));
//         } else if (status === 401) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result401: any = null;
//             let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result401 = RemoteServiceErrorResponse.fromJS(resultData401);
//             return throwException("Unauthorized", status, _responseText, _headers, result401);
//             }));
//         } else if (status === 400) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result400: any = null;
//             let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result400 = RemoteServiceErrorResponse.fromJS(resultData400);
//             return throwException("Bad Request", status, _responseText, _headers, result400);
//             }));
//         } else if (status === 404) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result404: any = null;
//             let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result404 = RemoteServiceErrorResponse.fromJS(resultData404);
//             return throwException("Not Found", status, _responseText, _headers, result404);
//             }));
//         } else if (status === 501) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result501: any = null;
//             let resultData501 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result501 = RemoteServiceErrorResponse.fromJS(resultData501);
//             return throwException("Server Error", status, _responseText, _headers, result501);
//             }));
//         } else if (status === 500) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result500: any = null;
//             let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result500 = RemoteServiceErrorResponse.fromJS(resultData500);
//             return throwException("Server Error", status, _responseText, _headers, result500);
//             }));
//         } else if (status !== 200 && status !== 204) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             return throwException("An unexpected server error occurred.", status, _responseText, _headers);
//             }));
//         }
//         return _observableOf<void>(<any>null);
//     }
// }
//
// @Injectable({providedIn: 'root'})
// export class OrganizationUnitsServiceProxy {
//     private http: HttpClient;
//     private baseUrl: string;
//     protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;
//
//     constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
//         this.http = http;
//         this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
//     }
//
//     /**
//      * @param body (optional)
//      * @return Success
//      */
//     rolesPut(id: string, body: OrganizationUnitRoleInput | undefined): Observable<void> {
//         let url_ = this.baseUrl + "/api/identity/organization-units/{id}/roles";
//         if (id === undefined || id === null)
//             throw new Error("The parameter 'id' must be defined.");
//         url_ = url_.replace("{id}", encodeURIComponent("" + id));
//         url_ = url_.replace(/[?&]$/, "");
//
//         const content_ = JSON.stringify(body);
//
//         let options_ : any = {
//             body: content_,
//             observe: "response",
//             responseType: "blob",
//             headers: new HttpHeaders({
//                 "Content-Type": "application/json",
//             })
//         };
//
//         return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
//             return this.processRolesPut(response_);
//         })).pipe(_observableCatch((response_: any) => {
//             if (response_ instanceof HttpResponseBase) {
//                 try {
//                     return this.processRolesPut(<any>response_);
//                 } catch (e) {
//                     return <Observable<void>><any>_observableThrow(e);
//                 }
//             } else
//                 return <Observable<void>><any>_observableThrow(response_);
//         }));
//     }
//
//     protected processRolesPut(response: HttpResponseBase): Observable<void> {
//         const status = response.status;
//         const responseBlob =
//             response instanceof HttpResponse ? response.body :
//             (<any>response).error instanceof Blob ? (<any>response).error : undefined;
//
//         let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
//         if (status === 200) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             return _observableOf<void>(<any>null);
//             }));
//         } else if (status === 403) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result403: any = null;
//             let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result403 = RemoteServiceErrorResponse.fromJS(resultData403);
//             return throwException("Forbidden", status, _responseText, _headers, result403);
//             }));
//         } else if (status === 401) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result401: any = null;
//             let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result401 = RemoteServiceErrorResponse.fromJS(resultData401);
//             return throwException("Unauthorized", status, _responseText, _headers, result401);
//             }));
//         } else if (status === 400) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result400: any = null;
//             let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result400 = RemoteServiceErrorResponse.fromJS(resultData400);
//             return throwException("Bad Request", status, _responseText, _headers, result400);
//             }));
//         } else if (status === 404) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result404: any = null;
//             let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result404 = RemoteServiceErrorResponse.fromJS(resultData404);
//             return throwException("Not Found", status, _responseText, _headers, result404);
//             }));
//         } else if (status === 501) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result501: any = null;
//             let resultData501 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result501 = RemoteServiceErrorResponse.fromJS(resultData501);
//             return throwException("Server Error", status, _responseText, _headers, result501);
//             }));
//         } else if (status === 500) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result500: any = null;
//             let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result500 = RemoteServiceErrorResponse.fromJS(resultData500);
//             return throwException("Server Error", status, _responseText, _headers, result500);
//             }));
//         } else if (status !== 200 && status !== 204) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             return throwException("An unexpected server error occurred.", status, _responseText, _headers);
//             }));
//         }
//         return _observableOf<void>(<any>null);
//     }
//
//     /**
//      * @param skipCount (optional)
//      * @param maxResultCount (optional)
//      * @param sorting (optional)
//      * @return Success
//      */
//     rolesGet(id: string, skipCount: number | undefined, maxResultCount: number | undefined, sorting: string | undefined): Observable<PagedResultDto_1OfOfIdentityRoleDtoAndContractsAnd_0AndCulture_neutralAndPublicKeyToken_null> {
//         let url_ = this.baseUrl + "/api/identity/organization-units/{id}/roles?";
//         if (id === undefined || id === null)
//             throw new Error("The parameter 'id' must be defined.");
//         url_ = url_.replace("{id}", encodeURIComponent("" + id));
//         if (skipCount === null)
//             throw new Error("The parameter 'skipCount' cannot be null.");
//         else if (skipCount !== undefined)
//             url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&";
//         if (maxResultCount === null)
//             throw new Error("The parameter 'maxResultCount' cannot be null.");
//         else if (maxResultCount !== undefined)
//             url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&";
//         if (sorting === null)
//             throw new Error("The parameter 'sorting' cannot be null.");
//         else if (sorting !== undefined)
//             url_ += "Sorting=" + encodeURIComponent("" + sorting) + "&";
//         url_ = url_.replace(/[?&]$/, "");
//
//         let options_ : any = {
//             observe: "response",
//             responseType: "blob",
//             headers: new HttpHeaders({
//                 "Accept": "text/plain"
//             })
//         };
//
//         return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
//             return this.processRolesGet(response_);
//         })).pipe(_observableCatch((response_: any) => {
//             if (response_ instanceof HttpResponseBase) {
//                 try {
//                     return this.processRolesGet(<any>response_);
//                 } catch (e) {
//                     return <Observable<PagedResultDto_1OfOfIdentityRoleDtoAndContractsAnd_0AndCulture_neutralAndPublicKeyToken_null>><any>_observableThrow(e);
//                 }
//             } else
//                 return <Observable<PagedResultDto_1OfOfIdentityRoleDtoAndContractsAnd_0AndCulture_neutralAndPublicKeyToken_null>><any>_observableThrow(response_);
//         }));
//     }
//
//     protected processRolesGet(response: HttpResponseBase): Observable<PagedResultDto_1OfOfIdentityRoleDtoAndContractsAnd_0AndCulture_neutralAndPublicKeyToken_null> {
//         const status = response.status;
//         const responseBlob =
//             response instanceof HttpResponse ? response.body :
//             (<any>response).error instanceof Blob ? (<any>response).error : undefined;
//
//         let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
//         if (status === 200) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result200: any = null;
//             let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result200 = PagedResultDto_1OfOfIdentityRoleDtoAndContractsAnd_0AndCulture_neutralAndPublicKeyToken_null.fromJS(resultData200);
//             return _observableOf(result200);
//             }));
//         } else if (status === 403) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result403: any = null;
//             let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result403 = RemoteServiceErrorResponse.fromJS(resultData403);
//             return throwException("Forbidden", status, _responseText, _headers, result403);
//             }));
//         } else if (status === 401) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result401: any = null;
//             let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result401 = RemoteServiceErrorResponse.fromJS(resultData401);
//             return throwException("Unauthorized", status, _responseText, _headers, result401);
//             }));
//         } else if (status === 400) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result400: any = null;
//             let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result400 = RemoteServiceErrorResponse.fromJS(resultData400);
//             return throwException("Bad Request", status, _responseText, _headers, result400);
//             }));
//         } else if (status === 404) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result404: any = null;
//             let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result404 = RemoteServiceErrorResponse.fromJS(resultData404);
//             return throwException("Not Found", status, _responseText, _headers, result404);
//             }));
//         } else if (status === 501) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result501: any = null;
//             let resultData501 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result501 = RemoteServiceErrorResponse.fromJS(resultData501);
//             return throwException("Server Error", status, _responseText, _headers, result501);
//             }));
//         } else if (status === 500) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result500: any = null;
//             let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result500 = RemoteServiceErrorResponse.fromJS(resultData500);
//             return throwException("Server Error", status, _responseText, _headers, result500);
//             }));
//         } else if (status !== 200 && status !== 204) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             return throwException("An unexpected server error occurred.", status, _responseText, _headers);
//             }));
//         }
//         return _observableOf<PagedResultDto_1OfOfIdentityRoleDtoAndContractsAnd_0AndCulture_neutralAndPublicKeyToken_null>(<any>null);
//     }
//
//     /**
//      * @param body (optional)
//      * @return Success
//      */
//     membersPut(id: string, body: OrganizationUnitUserInput | undefined): Observable<void> {
//         let url_ = this.baseUrl + "/api/identity/organization-units/{id}/members";
//         if (id === undefined || id === null)
//             throw new Error("The parameter 'id' must be defined.");
//         url_ = url_.replace("{id}", encodeURIComponent("" + id));
//         url_ = url_.replace(/[?&]$/, "");
//
//         const content_ = JSON.stringify(body);
//
//         let options_ : any = {
//             body: content_,
//             observe: "response",
//             responseType: "blob",
//             headers: new HttpHeaders({
//                 "Content-Type": "application/json",
//             })
//         };
//
//         return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
//             return this.processMembersPut(response_);
//         })).pipe(_observableCatch((response_: any) => {
//             if (response_ instanceof HttpResponseBase) {
//                 try {
//                     return this.processMembersPut(<any>response_);
//                 } catch (e) {
//                     return <Observable<void>><any>_observableThrow(e);
//                 }
//             } else
//                 return <Observable<void>><any>_observableThrow(response_);
//         }));
//     }
//
//     protected processMembersPut(response: HttpResponseBase): Observable<void> {
//         const status = response.status;
//         const responseBlob =
//             response instanceof HttpResponse ? response.body :
//             (<any>response).error instanceof Blob ? (<any>response).error : undefined;
//
//         let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
//         if (status === 200) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             return _observableOf<void>(<any>null);
//             }));
//         } else if (status === 403) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result403: any = null;
//             let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result403 = RemoteServiceErrorResponse.fromJS(resultData403);
//             return throwException("Forbidden", status, _responseText, _headers, result403);
//             }));
//         } else if (status === 401) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result401: any = null;
//             let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result401 = RemoteServiceErrorResponse.fromJS(resultData401);
//             return throwException("Unauthorized", status, _responseText, _headers, result401);
//             }));
//         } else if (status === 400) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result400: any = null;
//             let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result400 = RemoteServiceErrorResponse.fromJS(resultData400);
//             return throwException("Bad Request", status, _responseText, _headers, result400);
//             }));
//         } else if (status === 404) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result404: any = null;
//             let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result404 = RemoteServiceErrorResponse.fromJS(resultData404);
//             return throwException("Not Found", status, _responseText, _headers, result404);
//             }));
//         } else if (status === 501) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result501: any = null;
//             let resultData501 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result501 = RemoteServiceErrorResponse.fromJS(resultData501);
//             return throwException("Server Error", status, _responseText, _headers, result501);
//             }));
//         } else if (status === 500) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result500: any = null;
//             let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result500 = RemoteServiceErrorResponse.fromJS(resultData500);
//             return throwException("Server Error", status, _responseText, _headers, result500);
//             }));
//         } else if (status !== 200 && status !== 204) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             return throwException("An unexpected server error occurred.", status, _responseText, _headers);
//             }));
//         }
//         return _observableOf<void>(<any>null);
//     }
//
//     /**
//      * @param filter (optional)
//      * @param sorting (optional)
//      * @param skipCount (optional)
//      * @param maxResultCount (optional)
//      * @return Success
//      */
//     membersGet(id: string, filter: string | undefined, sorting: string | undefined, skipCount: number | undefined, maxResultCount: number | undefined): Observable<PagedResultDto_1OfOfIdentityUserDtoAndContractsAnd_0AndCulture_neutralAndPublicKeyToken_null> {
//         let url_ = this.baseUrl + "/api/identity/organization-units/{id}/members?";
//         if (id === undefined || id === null)
//             throw new Error("The parameter 'id' must be defined.");
//         url_ = url_.replace("{id}", encodeURIComponent("" + id));
//         if (filter === null)
//             throw new Error("The parameter 'filter' cannot be null.");
//         else if (filter !== undefined)
//             url_ += "Filter=" + encodeURIComponent("" + filter) + "&";
//         if (sorting === null)
//             throw new Error("The parameter 'sorting' cannot be null.");
//         else if (sorting !== undefined)
//             url_ += "Sorting=" + encodeURIComponent("" + sorting) + "&";
//         if (skipCount === null)
//             throw new Error("The parameter 'skipCount' cannot be null.");
//         else if (skipCount !== undefined)
//             url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&";
//         if (maxResultCount === null)
//             throw new Error("The parameter 'maxResultCount' cannot be null.");
//         else if (maxResultCount !== undefined)
//             url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&";
//         url_ = url_.replace(/[?&]$/, "");
//
//         let options_ : any = {
//             observe: "response",
//             responseType: "blob",
//             headers: new HttpHeaders({
//                 "Accept": "text/plain"
//             })
//         };
//
//         return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
//             return this.processMembersGet(response_);
//         })).pipe(_observableCatch((response_: any) => {
//             if (response_ instanceof HttpResponseBase) {
//                 try {
//                     return this.processMembersGet(<any>response_);
//                 } catch (e) {
//                     return <Observable<PagedResultDto_1OfOfIdentityUserDtoAndContractsAnd_0AndCulture_neutralAndPublicKeyToken_null>><any>_observableThrow(e);
//                 }
//             } else
//                 return <Observable<PagedResultDto_1OfOfIdentityUserDtoAndContractsAnd_0AndCulture_neutralAndPublicKeyToken_null>><any>_observableThrow(response_);
//         }));
//     }
//
//     protected processMembersGet(response: HttpResponseBase): Observable<PagedResultDto_1OfOfIdentityUserDtoAndContractsAnd_0AndCulture_neutralAndPublicKeyToken_null> {
//         const status = response.status;
//         const responseBlob =
//             response instanceof HttpResponse ? response.body :
//             (<any>response).error instanceof Blob ? (<any>response).error : undefined;
//
//         let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
//         if (status === 200) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result200: any = null;
//             let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result200 = PagedResultDto_1OfOfIdentityUserDtoAndContractsAnd_0AndCulture_neutralAndPublicKeyToken_null.fromJS(resultData200);
//             return _observableOf(result200);
//             }));
//         } else if (status === 403) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result403: any = null;
//             let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result403 = RemoteServiceErrorResponse.fromJS(resultData403);
//             return throwException("Forbidden", status, _responseText, _headers, result403);
//             }));
//         } else if (status === 401) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result401: any = null;
//             let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result401 = RemoteServiceErrorResponse.fromJS(resultData401);
//             return throwException("Unauthorized", status, _responseText, _headers, result401);
//             }));
//         } else if (status === 400) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result400: any = null;
//             let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result400 = RemoteServiceErrorResponse.fromJS(resultData400);
//             return throwException("Bad Request", status, _responseText, _headers, result400);
//             }));
//         } else if (status === 404) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result404: any = null;
//             let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result404 = RemoteServiceErrorResponse.fromJS(resultData404);
//             return throwException("Not Found", status, _responseText, _headers, result404);
//             }));
//         } else if (status === 501) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result501: any = null;
//             let resultData501 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result501 = RemoteServiceErrorResponse.fromJS(resultData501);
//             return throwException("Server Error", status, _responseText, _headers, result501);
//             }));
//         } else if (status === 500) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result500: any = null;
//             let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result500 = RemoteServiceErrorResponse.fromJS(resultData500);
//             return throwException("Server Error", status, _responseText, _headers, result500);
//             }));
//         } else if (status !== 200 && status !== 204) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             return throwException("An unexpected server error occurred.", status, _responseText, _headers);
//             }));
//         }
//         return _observableOf<PagedResultDto_1OfOfIdentityUserDtoAndContractsAnd_0AndCulture_neutralAndPublicKeyToken_null>(<any>null);
//     }
//
//     /**
//      * @return Success
//      */
//     all(): Observable<ListResultDto_1OfOfOrganizationUnitWithDetailsDtoAndContractsAnd_0AndCulture_neutralAndPublicKeyToken_null> {
//         let url_ = this.baseUrl + "/api/identity/organization-units/all";
//         url_ = url_.replace(/[?&]$/, "");
//
//         let options_ : any = {
//             observe: "response",
//             responseType: "blob",
//             headers: new HttpHeaders({
//                 "Accept": "text/plain"
//             })
//         };
//
//         return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
//             return this.processAll(response_);
//         })).pipe(_observableCatch((response_: any) => {
//             if (response_ instanceof HttpResponseBase) {
//                 try {
//                     return this.processAll(<any>response_);
//                 } catch (e) {
//                     return <Observable<ListResultDto_1OfOfOrganizationUnitWithDetailsDtoAndContractsAnd_0AndCulture_neutralAndPublicKeyToken_null>><any>_observableThrow(e);
//                 }
//             } else
//                 return <Observable<ListResultDto_1OfOfOrganizationUnitWithDetailsDtoAndContractsAnd_0AndCulture_neutralAndPublicKeyToken_null>><any>_observableThrow(response_);
//         }));
//     }
//
//     protected processAll(response: HttpResponseBase): Observable<ListResultDto_1OfOfOrganizationUnitWithDetailsDtoAndContractsAnd_0AndCulture_neutralAndPublicKeyToken_null> {
//         const status = response.status;
//         const responseBlob =
//             response instanceof HttpResponse ? response.body :
//             (<any>response).error instanceof Blob ? (<any>response).error : undefined;
//
//         let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
//         if (status === 200) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result200: any = null;
//             let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result200 = ListResultDto_1OfOfOrganizationUnitWithDetailsDtoAndContractsAnd_0AndCulture_neutralAndPublicKeyToken_null.fromJS(resultData200);
//             return _observableOf(result200);
//             }));
//         } else if (status === 403) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result403: any = null;
//             let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result403 = RemoteServiceErrorResponse.fromJS(resultData403);
//             return throwException("Forbidden", status, _responseText, _headers, result403);
//             }));
//         } else if (status === 401) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result401: any = null;
//             let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result401 = RemoteServiceErrorResponse.fromJS(resultData401);
//             return throwException("Unauthorized", status, _responseText, _headers, result401);
//             }));
//         } else if (status === 400) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result400: any = null;
//             let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result400 = RemoteServiceErrorResponse.fromJS(resultData400);
//             return throwException("Bad Request", status, _responseText, _headers, result400);
//             }));
//         } else if (status === 404) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result404: any = null;
//             let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result404 = RemoteServiceErrorResponse.fromJS(resultData404);
//             return throwException("Not Found", status, _responseText, _headers, result404);
//             }));
//         } else if (status === 501) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result501: any = null;
//             let resultData501 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result501 = RemoteServiceErrorResponse.fromJS(resultData501);
//             return throwException("Server Error", status, _responseText, _headers, result501);
//             }));
//         } else if (status === 500) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result500: any = null;
//             let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result500 = RemoteServiceErrorResponse.fromJS(resultData500);
//             return throwException("Server Error", status, _responseText, _headers, result500);
//             }));
//         } else if (status !== 200 && status !== 204) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             return throwException("An unexpected server error occurred.", status, _responseText, _headers);
//             }));
//         }
//         return _observableOf<ListResultDto_1OfOfOrganizationUnitWithDetailsDtoAndContractsAnd_0AndCulture_neutralAndPublicKeyToken_null>(<any>null);
//     }
//
//     /**
//      * @param body (optional)
//      * @return Success
//      */
//     move(id: string, body: OrganizationUnitMoveInput | undefined): Observable<void> {
//         let url_ = this.baseUrl + "/api/identity/organization-units/{id}/move";
//         if (id === undefined || id === null)
//             throw new Error("The parameter 'id' must be defined.");
//         url_ = url_.replace("{id}", encodeURIComponent("" + id));
//         url_ = url_.replace(/[?&]$/, "");
//
//         const content_ = JSON.stringify(body);
//
//         let options_ : any = {
//             body: content_,
//             observe: "response",
//             responseType: "blob",
//             headers: new HttpHeaders({
//                 "Content-Type": "application/json",
//             })
//         };
//
//         return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
//             return this.processMove(response_);
//         })).pipe(_observableCatch((response_: any) => {
//             if (response_ instanceof HttpResponseBase) {
//                 try {
//                     return this.processMove(<any>response_);
//                 } catch (e) {
//                     return <Observable<void>><any>_observableThrow(e);
//                 }
//             } else
//                 return <Observable<void>><any>_observableThrow(response_);
//         }));
//     }
//
//     protected processMove(response: HttpResponseBase): Observable<void> {
//         const status = response.status;
//         const responseBlob =
//             response instanceof HttpResponse ? response.body :
//             (<any>response).error instanceof Blob ? (<any>response).error : undefined;
//
//         let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
//         if (status === 200) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             return _observableOf<void>(<any>null);
//             }));
//         } else if (status === 403) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result403: any = null;
//             let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result403 = RemoteServiceErrorResponse.fromJS(resultData403);
//             return throwException("Forbidden", status, _responseText, _headers, result403);
//             }));
//         } else if (status === 401) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result401: any = null;
//             let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result401 = RemoteServiceErrorResponse.fromJS(resultData401);
//             return throwException("Unauthorized", status, _responseText, _headers, result401);
//             }));
//         } else if (status === 400) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result400: any = null;
//             let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result400 = RemoteServiceErrorResponse.fromJS(resultData400);
//             return throwException("Bad Request", status, _responseText, _headers, result400);
//             }));
//         } else if (status === 404) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result404: any = null;
//             let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result404 = RemoteServiceErrorResponse.fromJS(resultData404);
//             return throwException("Not Found", status, _responseText, _headers, result404);
//             }));
//         } else if (status === 501) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result501: any = null;
//             let resultData501 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result501 = RemoteServiceErrorResponse.fromJS(resultData501);
//             return throwException("Server Error", status, _responseText, _headers, result501);
//             }));
//         } else if (status === 500) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result500: any = null;
//             let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result500 = RemoteServiceErrorResponse.fromJS(resultData500);
//             return throwException("Server Error", status, _responseText, _headers, result500);
//             }));
//         } else if (status !== 200 && status !== 204) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             return throwException("An unexpected server error occurred.", status, _responseText, _headers);
//             }));
//         }
//         return _observableOf<void>(<any>null);
//     }
//
//     /**
//      * @param filter (optional)
//      * @param id (optional)
//      * @param sorting (optional)
//      * @param skipCount (optional)
//      * @param maxResultCount (optional)
//      * @return Success
//      */
//     availableUsers(filter: string | undefined, id: string | undefined, sorting: string | undefined, skipCount: number | undefined, maxResultCount: number | undefined): Observable<PagedResultDto_1OfOfIdentityUserDtoAndContractsAnd_0AndCulture_neutralAndPublicKeyToken_null> {
//         let url_ = this.baseUrl + "/api/identity/organization-units/available-users?";
//         if (filter === null)
//             throw new Error("The parameter 'filter' cannot be null.");
//         else if (filter !== undefined)
//             url_ += "Filter=" + encodeURIComponent("" + filter) + "&";
//         if (id === null)
//             throw new Error("The parameter 'id' cannot be null.");
//         else if (id !== undefined)
//             url_ += "Id=" + encodeURIComponent("" + id) + "&";
//         if (sorting === null)
//             throw new Error("The parameter 'sorting' cannot be null.");
//         else if (sorting !== undefined)
//             url_ += "Sorting=" + encodeURIComponent("" + sorting) + "&";
//         if (skipCount === null)
//             throw new Error("The parameter 'skipCount' cannot be null.");
//         else if (skipCount !== undefined)
//             url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&";
//         if (maxResultCount === null)
//             throw new Error("The parameter 'maxResultCount' cannot be null.");
//         else if (maxResultCount !== undefined)
//             url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&";
//         url_ = url_.replace(/[?&]$/, "");
//
//         let options_ : any = {
//             observe: "response",
//             responseType: "blob",
//             headers: new HttpHeaders({
//                 "Accept": "text/plain"
//             })
//         };
//
//         return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
//             return this.processAvailableUsers(response_);
//         })).pipe(_observableCatch((response_: any) => {
//             if (response_ instanceof HttpResponseBase) {
//                 try {
//                     return this.processAvailableUsers(<any>response_);
//                 } catch (e) {
//                     return <Observable<PagedResultDto_1OfOfIdentityUserDtoAndContractsAnd_0AndCulture_neutralAndPublicKeyToken_null>><any>_observableThrow(e);
//                 }
//             } else
//                 return <Observable<PagedResultDto_1OfOfIdentityUserDtoAndContractsAnd_0AndCulture_neutralAndPublicKeyToken_null>><any>_observableThrow(response_);
//         }));
//     }
//
//     protected processAvailableUsers(response: HttpResponseBase): Observable<PagedResultDto_1OfOfIdentityUserDtoAndContractsAnd_0AndCulture_neutralAndPublicKeyToken_null> {
//         const status = response.status;
//         const responseBlob =
//             response instanceof HttpResponse ? response.body :
//             (<any>response).error instanceof Blob ? (<any>response).error : undefined;
//
//         let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
//         if (status === 200) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result200: any = null;
//             let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result200 = PagedResultDto_1OfOfIdentityUserDtoAndContractsAnd_0AndCulture_neutralAndPublicKeyToken_null.fromJS(resultData200);
//             return _observableOf(result200);
//             }));
//         } else if (status === 403) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result403: any = null;
//             let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result403 = RemoteServiceErrorResponse.fromJS(resultData403);
//             return throwException("Forbidden", status, _responseText, _headers, result403);
//             }));
//         } else if (status === 401) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result401: any = null;
//             let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result401 = RemoteServiceErrorResponse.fromJS(resultData401);
//             return throwException("Unauthorized", status, _responseText, _headers, result401);
//             }));
//         } else if (status === 400) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result400: any = null;
//             let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result400 = RemoteServiceErrorResponse.fromJS(resultData400);
//             return throwException("Bad Request", status, _responseText, _headers, result400);
//             }));
//         } else if (status === 404) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result404: any = null;
//             let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result404 = RemoteServiceErrorResponse.fromJS(resultData404);
//             return throwException("Not Found", status, _responseText, _headers, result404);
//             }));
//         } else if (status === 501) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result501: any = null;
//             let resultData501 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result501 = RemoteServiceErrorResponse.fromJS(resultData501);
//             return throwException("Server Error", status, _responseText, _headers, result501);
//             }));
//         } else if (status === 500) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result500: any = null;
//             let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result500 = RemoteServiceErrorResponse.fromJS(resultData500);
//             return throwException("Server Error", status, _responseText, _headers, result500);
//             }));
//         } else if (status !== 200 && status !== 204) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             return throwException("An unexpected server error occurred.", status, _responseText, _headers);
//             }));
//         }
//         return _observableOf<PagedResultDto_1OfOfIdentityUserDtoAndContractsAnd_0AndCulture_neutralAndPublicKeyToken_null>(<any>null);
//     }
//
//     /**
//      * @param filter (optional)
//      * @param id (optional)
//      * @param sorting (optional)
//      * @param skipCount (optional)
//      * @param maxResultCount (optional)
//      * @return Success
//      */
//     availableRoles(filter: string | undefined, id: string | undefined, sorting: string | undefined, skipCount: number | undefined, maxResultCount: number | undefined): Observable<PagedResultDto_1OfOfIdentityRoleDtoAndContractsAnd_0AndCulture_neutralAndPublicKeyToken_null> {
//         let url_ = this.baseUrl + "/api/identity/organization-units/available-roles?";
//         if (filter === null)
//             throw new Error("The parameter 'filter' cannot be null.");
//         else if (filter !== undefined)
//             url_ += "Filter=" + encodeURIComponent("" + filter) + "&";
//         if (id === null)
//             throw new Error("The parameter 'id' cannot be null.");
//         else if (id !== undefined)
//             url_ += "Id=" + encodeURIComponent("" + id) + "&";
//         if (sorting === null)
//             throw new Error("The parameter 'sorting' cannot be null.");
//         else if (sorting !== undefined)
//             url_ += "Sorting=" + encodeURIComponent("" + sorting) + "&";
//         if (skipCount === null)
//             throw new Error("The parameter 'skipCount' cannot be null.");
//         else if (skipCount !== undefined)
//             url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&";
//         if (maxResultCount === null)
//             throw new Error("The parameter 'maxResultCount' cannot be null.");
//         else if (maxResultCount !== undefined)
//             url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&";
//         url_ = url_.replace(/[?&]$/, "");
//
//         let options_ : any = {
//             observe: "response",
//             responseType: "blob",
//             headers: new HttpHeaders({
//                 "Accept": "text/plain"
//             })
//         };
//
//         return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
//             return this.processAvailableRoles(response_);
//         })).pipe(_observableCatch((response_: any) => {
//             if (response_ instanceof HttpResponseBase) {
//                 try {
//                     return this.processAvailableRoles(<any>response_);
//                 } catch (e) {
//                     return <Observable<PagedResultDto_1OfOfIdentityRoleDtoAndContractsAnd_0AndCulture_neutralAndPublicKeyToken_null>><any>_observableThrow(e);
//                 }
//             } else
//                 return <Observable<PagedResultDto_1OfOfIdentityRoleDtoAndContractsAnd_0AndCulture_neutralAndPublicKeyToken_null>><any>_observableThrow(response_);
//         }));
//     }
//
//     protected processAvailableRoles(response: HttpResponseBase): Observable<PagedResultDto_1OfOfIdentityRoleDtoAndContractsAnd_0AndCulture_neutralAndPublicKeyToken_null> {
//         const status = response.status;
//         const responseBlob =
//             response instanceof HttpResponse ? response.body :
//             (<any>response).error instanceof Blob ? (<any>response).error : undefined;
//
//         let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
//         if (status === 200) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result200: any = null;
//             let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result200 = PagedResultDto_1OfOfIdentityRoleDtoAndContractsAnd_0AndCulture_neutralAndPublicKeyToken_null.fromJS(resultData200);
//             return _observableOf(result200);
//             }));
//         } else if (status === 403) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result403: any = null;
//             let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result403 = RemoteServiceErrorResponse.fromJS(resultData403);
//             return throwException("Forbidden", status, _responseText, _headers, result403);
//             }));
//         } else if (status === 401) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result401: any = null;
//             let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result401 = RemoteServiceErrorResponse.fromJS(resultData401);
//             return throwException("Unauthorized", status, _responseText, _headers, result401);
//             }));
//         } else if (status === 400) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result400: any = null;
//             let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result400 = RemoteServiceErrorResponse.fromJS(resultData400);
//             return throwException("Bad Request", status, _responseText, _headers, result400);
//             }));
//         } else if (status === 404) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result404: any = null;
//             let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result404 = RemoteServiceErrorResponse.fromJS(resultData404);
//             return throwException("Not Found", status, _responseText, _headers, result404);
//             }));
//         } else if (status === 501) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result501: any = null;
//             let resultData501 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result501 = RemoteServiceErrorResponse.fromJS(resultData501);
//             return throwException("Server Error", status, _responseText, _headers, result501);
//             }));
//         } else if (status === 500) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result500: any = null;
//             let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result500 = RemoteServiceErrorResponse.fromJS(resultData500);
//             return throwException("Server Error", status, _responseText, _headers, result500);
//             }));
//         } else if (status !== 200 && status !== 204) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             return throwException("An unexpected server error occurred.", status, _responseText, _headers);
//             }));
//         }
//         return _observableOf<PagedResultDto_1OfOfIdentityRoleDtoAndContractsAnd_0AndCulture_neutralAndPublicKeyToken_null>(<any>null);
//     }
//
//     /**
//      * @return Success
//      */
//     membersDelete(id: string, memberId: string): Observable<void> {
//         let url_ = this.baseUrl + "/api/identity/organization-units/{id}/members/{memberId}";
//         if (id === undefined || id === null)
//             throw new Error("The parameter 'id' must be defined.");
//         url_ = url_.replace("{id}", encodeURIComponent("" + id));
//         if (memberId === undefined || memberId === null)
//             throw new Error("The parameter 'memberId' must be defined.");
//         url_ = url_.replace("{memberId}", encodeURIComponent("" + memberId));
//         url_ = url_.replace(/[?&]$/, "");
//
//         let options_ : any = {
//             observe: "response",
//             responseType: "blob",
//             headers: new HttpHeaders({
//             })
//         };
//
//         return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
//             return this.processMembersDelete(response_);
//         })).pipe(_observableCatch((response_: any) => {
//             if (response_ instanceof HttpResponseBase) {
//                 try {
//                     return this.processMembersDelete(<any>response_);
//                 } catch (e) {
//                     return <Observable<void>><any>_observableThrow(e);
//                 }
//             } else
//                 return <Observable<void>><any>_observableThrow(response_);
//         }));
//     }
//
//     protected processMembersDelete(response: HttpResponseBase): Observable<void> {
//         const status = response.status;
//         const responseBlob =
//             response instanceof HttpResponse ? response.body :
//             (<any>response).error instanceof Blob ? (<any>response).error : undefined;
//
//         let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
//         if (status === 200) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             return _observableOf<void>(<any>null);
//             }));
//         } else if (status === 403) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result403: any = null;
//             let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result403 = RemoteServiceErrorResponse.fromJS(resultData403);
//             return throwException("Forbidden", status, _responseText, _headers, result403);
//             }));
//         } else if (status === 401) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result401: any = null;
//             let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result401 = RemoteServiceErrorResponse.fromJS(resultData401);
//             return throwException("Unauthorized", status, _responseText, _headers, result401);
//             }));
//         } else if (status === 400) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result400: any = null;
//             let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result400 = RemoteServiceErrorResponse.fromJS(resultData400);
//             return throwException("Bad Request", status, _responseText, _headers, result400);
//             }));
//         } else if (status === 404) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result404: any = null;
//             let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result404 = RemoteServiceErrorResponse.fromJS(resultData404);
//             return throwException("Not Found", status, _responseText, _headers, result404);
//             }));
//         } else if (status === 501) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result501: any = null;
//             let resultData501 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result501 = RemoteServiceErrorResponse.fromJS(resultData501);
//             return throwException("Server Error", status, _responseText, _headers, result501);
//             }));
//         } else if (status === 500) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result500: any = null;
//             let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result500 = RemoteServiceErrorResponse.fromJS(resultData500);
//             return throwException("Server Error", status, _responseText, _headers, result500);
//             }));
//         } else if (status !== 200 && status !== 204) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             return throwException("An unexpected server error occurred.", status, _responseText, _headers);
//             }));
//         }
//         return _observableOf<void>(<any>null);
//     }
//
//     /**
//      * @return Success
//      */
//     rolesDelete(id: string, roleId: string): Observable<void> {
//         let url_ = this.baseUrl + "/api/identity/organization-units/{id}/roles/{roleId}";
//         if (id === undefined || id === null)
//             throw new Error("The parameter 'id' must be defined.");
//         url_ = url_.replace("{id}", encodeURIComponent("" + id));
//         if (roleId === undefined || roleId === null)
//             throw new Error("The parameter 'roleId' must be defined.");
//         url_ = url_.replace("{roleId}", encodeURIComponent("" + roleId));
//         url_ = url_.replace(/[?&]$/, "");
//
//         let options_ : any = {
//             observe: "response",
//             responseType: "blob",
//             headers: new HttpHeaders({
//             })
//         };
//
//         return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
//             return this.processRolesDelete(response_);
//         })).pipe(_observableCatch((response_: any) => {
//             if (response_ instanceof HttpResponseBase) {
//                 try {
//                     return this.processRolesDelete(<any>response_);
//                 } catch (e) {
//                     return <Observable<void>><any>_observableThrow(e);
//                 }
//             } else
//                 return <Observable<void>><any>_observableThrow(response_);
//         }));
//     }
//
//     protected processRolesDelete(response: HttpResponseBase): Observable<void> {
//         const status = response.status;
//         const responseBlob =
//             response instanceof HttpResponse ? response.body :
//             (<any>response).error instanceof Blob ? (<any>response).error : undefined;
//
//         let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
//         if (status === 200) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             return _observableOf<void>(<any>null);
//             }));
//         } else if (status === 403) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result403: any = null;
//             let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result403 = RemoteServiceErrorResponse.fromJS(resultData403);
//             return throwException("Forbidden", status, _responseText, _headers, result403);
//             }));
//         } else if (status === 401) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result401: any = null;
//             let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result401 = RemoteServiceErrorResponse.fromJS(resultData401);
//             return throwException("Unauthorized", status, _responseText, _headers, result401);
//             }));
//         } else if (status === 400) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result400: any = null;
//             let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result400 = RemoteServiceErrorResponse.fromJS(resultData400);
//             return throwException("Bad Request", status, _responseText, _headers, result400);
//             }));
//         } else if (status === 404) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result404: any = null;
//             let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result404 = RemoteServiceErrorResponse.fromJS(resultData404);
//             return throwException("Not Found", status, _responseText, _headers, result404);
//             }));
//         } else if (status === 501) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result501: any = null;
//             let resultData501 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result501 = RemoteServiceErrorResponse.fromJS(resultData501);
//             return throwException("Server Error", status, _responseText, _headers, result501);
//             }));
//         } else if (status === 500) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result500: any = null;
//             let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result500 = RemoteServiceErrorResponse.fromJS(resultData500);
//             return throwException("Server Error", status, _responseText, _headers, result500);
//             }));
//         } else if (status !== 200 && status !== 204) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             return throwException("An unexpected server error occurred.", status, _responseText, _headers);
//             }));
//         }
//         return _observableOf<void>(<any>null);
//     }
// }
//
// @Injectable({providedIn: 'root'})
// export class PermissionManagementServiceProxy {
//     private http: HttpClient;
//     private baseUrl: string;
//     protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;
//
//     constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
//         this.http = http;
//         this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
//     }
//
//     /**
//      * @param providerName (optional)
//      * @param providerKey (optional)
//      * @return Success
//      */
//     permissionsGet(providerName: string | undefined, providerKey: string | undefined): Observable<GetPermissionListResultDto> {
//         let url_ = this.baseUrl + "/api/permission-management/permissions?";
//         if (providerName === null)
//             throw new Error("The parameter 'providerName' cannot be null.");
//         else if (providerName !== undefined)
//             url_ += "providerName=" + encodeURIComponent("" + providerName) + "&";
//         if (providerKey === null)
//             throw new Error("The parameter 'providerKey' cannot be null.");
//         else if (providerKey !== undefined)
//             url_ += "providerKey=" + encodeURIComponent("" + providerKey) + "&";
//         url_ = url_.replace(/[?&]$/, "");
//
//         let options_ : any = {
//             observe: "response",
//             responseType: "blob",
//             headers: new HttpHeaders({
//                 "Accept": "text/plain"
//             })
//         };
//
//         return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
//             return this.processPermissionsGet(response_);
//         })).pipe(_observableCatch((response_: any) => {
//             if (response_ instanceof HttpResponseBase) {
//                 try {
//                     return this.processPermissionsGet(<any>response_);
//                 } catch (e) {
//                     return <Observable<GetPermissionListResultDto>><any>_observableThrow(e);
//                 }
//             } else
//                 return <Observable<GetPermissionListResultDto>><any>_observableThrow(response_);
//         }));
//     }
//
//     protected processPermissionsGet(response: HttpResponseBase): Observable<GetPermissionListResultDto> {
//         const status = response.status;
//         const responseBlob =
//             response instanceof HttpResponse ? response.body :
//             (<any>response).error instanceof Blob ? (<any>response).error : undefined;
//
//         let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
//         if (status === 200) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result200: any = null;
//             let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result200 = GetPermissionListResultDto.fromJS(resultData200);
//             return _observableOf(result200);
//             }));
//         } else if (status === 403) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result403: any = null;
//             let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result403 = RemoteServiceErrorResponse.fromJS(resultData403);
//             return throwException("Forbidden", status, _responseText, _headers, result403);
//             }));
//         } else if (status === 401) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result401: any = null;
//             let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result401 = RemoteServiceErrorResponse.fromJS(resultData401);
//             return throwException("Unauthorized", status, _responseText, _headers, result401);
//             }));
//         } else if (status === 400) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result400: any = null;
//             let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result400 = RemoteServiceErrorResponse.fromJS(resultData400);
//             return throwException("Bad Request", status, _responseText, _headers, result400);
//             }));
//         } else if (status === 404) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result404: any = null;
//             let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result404 = RemoteServiceErrorResponse.fromJS(resultData404);
//             return throwException("Not Found", status, _responseText, _headers, result404);
//             }));
//         } else if (status === 501) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result501: any = null;
//             let resultData501 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result501 = RemoteServiceErrorResponse.fromJS(resultData501);
//             return throwException("Server Error", status, _responseText, _headers, result501);
//             }));
//         } else if (status === 500) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result500: any = null;
//             let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result500 = RemoteServiceErrorResponse.fromJS(resultData500);
//             return throwException("Server Error", status, _responseText, _headers, result500);
//             }));
//         } else if (status !== 200 && status !== 204) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             return throwException("An unexpected server error occurred.", status, _responseText, _headers);
//             }));
//         }
//         return _observableOf<GetPermissionListResultDto>(<any>null);
//     }
//
//     /**
//      * @param providerName (optional)
//      * @param providerKey (optional)
//      * @param body (optional)
//      * @return Success
//      */
//     permissionsPut(providerName: string | undefined, providerKey: string | undefined, body: UpdatePermissionsDto | undefined): Observable<void> {
//         let url_ = this.baseUrl + "/api/permission-management/permissions?";
//         if (providerName === null)
//             throw new Error("The parameter 'providerName' cannot be null.");
//         else if (providerName !== undefined)
//             url_ += "providerName=" + encodeURIComponent("" + providerName) + "&";
//         if (providerKey === null)
//             throw new Error("The parameter 'providerKey' cannot be null.");
//         else if (providerKey !== undefined)
//             url_ += "providerKey=" + encodeURIComponent("" + providerKey) + "&";
//         url_ = url_.replace(/[?&]$/, "");
//
//         const content_ = JSON.stringify(body);
//
//         let options_ : any = {
//             body: content_,
//             observe: "response",
//             responseType: "blob",
//             headers: new HttpHeaders({
//                 "Content-Type": "application/json",
//             })
//         };
//
//         return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
//             return this.processPermissionsPut(response_);
//         })).pipe(_observableCatch((response_: any) => {
//             if (response_ instanceof HttpResponseBase) {
//                 try {
//                     return this.processPermissionsPut(<any>response_);
//                 } catch (e) {
//                     return <Observable<void>><any>_observableThrow(e);
//                 }
//             } else
//                 return <Observable<void>><any>_observableThrow(response_);
//         }));
//     }
//
//     protected processPermissionsPut(response: HttpResponseBase): Observable<void> {
//         const status = response.status;
//         const responseBlob =
//             response instanceof HttpResponse ? response.body :
//             (<any>response).error instanceof Blob ? (<any>response).error : undefined;
//
//         let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
//         if (status === 200) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             return _observableOf<void>(<any>null);
//             }));
//         } else if (status === 403) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result403: any = null;
//             let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result403 = RemoteServiceErrorResponse.fromJS(resultData403);
//             return throwException("Forbidden", status, _responseText, _headers, result403);
//             }));
//         } else if (status === 401) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result401: any = null;
//             let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result401 = RemoteServiceErrorResponse.fromJS(resultData401);
//             return throwException("Unauthorized", status, _responseText, _headers, result401);
//             }));
//         } else if (status === 400) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result400: any = null;
//             let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result400 = RemoteServiceErrorResponse.fromJS(resultData400);
//             return throwException("Bad Request", status, _responseText, _headers, result400);
//             }));
//         } else if (status === 404) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result404: any = null;
//             let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result404 = RemoteServiceErrorResponse.fromJS(resultData404);
//             return throwException("Not Found", status, _responseText, _headers, result404);
//             }));
//         } else if (status === 501) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result501: any = null;
//             let resultData501 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result501 = RemoteServiceErrorResponse.fromJS(resultData501);
//             return throwException("Server Error", status, _responseText, _headers, result501);
//             }));
//         } else if (status === 500) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result500: any = null;
//             let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result500 = RemoteServiceErrorResponse.fromJS(resultData500);
//             return throwException("Server Error", status, _responseText, _headers, result500);
//             }));
//         } else if (status !== 200 && status !== 204) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             return throwException("An unexpected server error occurred.", status, _responseText, _headers);
//             }));
//         }
//         return _observableOf<void>(<any>null);
//     }
// }
//
// @Injectable({providedIn: 'root'})
// export class MyProfileServiceProxy {
//     private http: HttpClient;
//     private baseUrl: string;
//     protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;
//
//     constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
//         this.http = http;
//         this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
//     }
//
//     /**
//      * @param body (optional)
//      * @return Success
//      */
//     changePassword(body: ChangePasswordInput | undefined): Observable<void> {
//         let url_ = this.baseUrl + "/api/identity/my-profile/change-password";
//         url_ = url_.replace(/[?&]$/, "");
//
//         const content_ = JSON.stringify(body);
//
//         let options_ : any = {
//             body: content_,
//             observe: "response",
//             responseType: "blob",
//             headers: new HttpHeaders({
//                 "Content-Type": "application/json",
//             })
//         };
//
//         return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
//             return this.processChangePassword(response_);
//         })).pipe(_observableCatch((response_: any) => {
//             if (response_ instanceof HttpResponseBase) {
//                 try {
//                     return this.processChangePassword(<any>response_);
//                 } catch (e) {
//                     return <Observable<void>><any>_observableThrow(e);
//                 }
//             } else
//                 return <Observable<void>><any>_observableThrow(response_);
//         }));
//     }
//
//     protected processChangePassword(response: HttpResponseBase): Observable<void> {
//         const status = response.status;
//         const responseBlob =
//             response instanceof HttpResponse ? response.body :
//             (<any>response).error instanceof Blob ? (<any>response).error : undefined;
//
//         let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
//         if (status === 200) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             return _observableOf<void>(<any>null);
//             }));
//         } else if (status === 403) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result403: any = null;
//             let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result403 = RemoteServiceErrorResponse.fromJS(resultData403);
//             return throwException("Forbidden", status, _responseText, _headers, result403);
//             }));
//         } else if (status === 401) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result401: any = null;
//             let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result401 = RemoteServiceErrorResponse.fromJS(resultData401);
//             return throwException("Unauthorized", status, _responseText, _headers, result401);
//             }));
//         } else if (status === 400) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result400: any = null;
//             let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result400 = RemoteServiceErrorResponse.fromJS(resultData400);
//             return throwException("Bad Request", status, _responseText, _headers, result400);
//             }));
//         } else if (status === 404) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result404: any = null;
//             let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result404 = RemoteServiceErrorResponse.fromJS(resultData404);
//             return throwException("Not Found", status, _responseText, _headers, result404);
//             }));
//         } else if (status === 501) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result501: any = null;
//             let resultData501 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result501 = RemoteServiceErrorResponse.fromJS(resultData501);
//             return throwException("Server Error", status, _responseText, _headers, result501);
//             }));
//         } else if (status === 500) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result500: any = null;
//             let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result500 = RemoteServiceErrorResponse.fromJS(resultData500);
//             return throwException("Server Error", status, _responseText, _headers, result500);
//             }));
//         } else if (status !== 200 && status !== 204) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             return throwException("An unexpected server error occurred.", status, _responseText, _headers);
//             }));
//         }
//         return _observableOf<void>(<any>null);
//     }
//
//     /**
//      * @return Success
//      */
//     twoFactorEnabled(): Observable<boolean> {
//         let url_ = this.baseUrl + "/api/identity/my-profile/two-factor-enabled";
//         url_ = url_.replace(/[?&]$/, "");
//
//         let options_ : any = {
//             observe: "response",
//             responseType: "blob",
//             headers: new HttpHeaders({
//                 "Accept": "text/plain"
//             })
//         };
//
//         return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
//             return this.processTwoFactorEnabled(response_);
//         })).pipe(_observableCatch((response_: any) => {
//             if (response_ instanceof HttpResponseBase) {
//                 try {
//                     return this.processTwoFactorEnabled(<any>response_);
//                 } catch (e) {
//                     return <Observable<boolean>><any>_observableThrow(e);
//                 }
//             } else
//                 return <Observable<boolean>><any>_observableThrow(response_);
//         }));
//     }
//
//     protected processTwoFactorEnabled(response: HttpResponseBase): Observable<boolean> {
//         const status = response.status;
//         const responseBlob =
//             response instanceof HttpResponse ? response.body :
//             (<any>response).error instanceof Blob ? (<any>response).error : undefined;
//
//         let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
//         if (status === 200) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result200: any = null;
//             let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result200 = resultData200 !== undefined ? resultData200 : <any>null;
//             return _observableOf(result200);
//             }));
//         } else if (status === 403) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result403: any = null;
//             let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result403 = RemoteServiceErrorResponse.fromJS(resultData403);
//             return throwException("Forbidden", status, _responseText, _headers, result403);
//             }));
//         } else if (status === 401) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result401: any = null;
//             let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result401 = RemoteServiceErrorResponse.fromJS(resultData401);
//             return throwException("Unauthorized", status, _responseText, _headers, result401);
//             }));
//         } else if (status === 400) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result400: any = null;
//             let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result400 = RemoteServiceErrorResponse.fromJS(resultData400);
//             return throwException("Bad Request", status, _responseText, _headers, result400);
//             }));
//         } else if (status === 404) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result404: any = null;
//             let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result404 = RemoteServiceErrorResponse.fromJS(resultData404);
//             return throwException("Not Found", status, _responseText, _headers, result404);
//             }));
//         } else if (status === 501) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result501: any = null;
//             let resultData501 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result501 = RemoteServiceErrorResponse.fromJS(resultData501);
//             return throwException("Server Error", status, _responseText, _headers, result501);
//             }));
//         } else if (status === 500) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result500: any = null;
//             let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result500 = RemoteServiceErrorResponse.fromJS(resultData500);
//             return throwException("Server Error", status, _responseText, _headers, result500);
//             }));
//         } else if (status !== 200 && status !== 204) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             return throwException("An unexpected server error occurred.", status, _responseText, _headers);
//             }));
//         }
//         return _observableOf<boolean>(<any>null);
//     }
//
//     /**
//      * @param enabled (optional)
//      * @return Success
//      */
//     setTwoFactorEnabled(enabled: boolean | undefined): Observable<void> {
//         let url_ = this.baseUrl + "/api/identity/my-profile/set-two-factor-enabled?";
//         if (enabled === null)
//             throw new Error("The parameter 'enabled' cannot be null.");
//         else if (enabled !== undefined)
//             url_ += "enabled=" + encodeURIComponent("" + enabled) + "&";
//         url_ = url_.replace(/[?&]$/, "");
//
//         let options_ : any = {
//             observe: "response",
//             responseType: "blob",
//             headers: new HttpHeaders({
//             })
//         };
//
//         return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
//             return this.processSetTwoFactorEnabled(response_);
//         })).pipe(_observableCatch((response_: any) => {
//             if (response_ instanceof HttpResponseBase) {
//                 try {
//                     return this.processSetTwoFactorEnabled(<any>response_);
//                 } catch (e) {
//                     return <Observable<void>><any>_observableThrow(e);
//                 }
//             } else
//                 return <Observable<void>><any>_observableThrow(response_);
//         }));
//     }
//
//     protected processSetTwoFactorEnabled(response: HttpResponseBase): Observable<void> {
//         const status = response.status;
//         const responseBlob =
//             response instanceof HttpResponse ? response.body :
//             (<any>response).error instanceof Blob ? (<any>response).error : undefined;
//
//         let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
//         if (status === 200) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             return _observableOf<void>(<any>null);
//             }));
//         } else if (status === 403) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result403: any = null;
//             let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result403 = RemoteServiceErrorResponse.fromJS(resultData403);
//             return throwException("Forbidden", status, _responseText, _headers, result403);
//             }));
//         } else if (status === 401) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result401: any = null;
//             let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result401 = RemoteServiceErrorResponse.fromJS(resultData401);
//             return throwException("Unauthorized", status, _responseText, _headers, result401);
//             }));
//         } else if (status === 400) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result400: any = null;
//             let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result400 = RemoteServiceErrorResponse.fromJS(resultData400);
//             return throwException("Bad Request", status, _responseText, _headers, result400);
//             }));
//         } else if (status === 404) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result404: any = null;
//             let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result404 = RemoteServiceErrorResponse.fromJS(resultData404);
//             return throwException("Not Found", status, _responseText, _headers, result404);
//             }));
//         } else if (status === 501) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result501: any = null;
//             let resultData501 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result501 = RemoteServiceErrorResponse.fromJS(resultData501);
//             return throwException("Server Error", status, _responseText, _headers, result501);
//             }));
//         } else if (status === 500) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result500: any = null;
//             let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result500 = RemoteServiceErrorResponse.fromJS(resultData500);
//             return throwException("Server Error", status, _responseText, _headers, result500);
//             }));
//         } else if (status !== 200 && status !== 204) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             return throwException("An unexpected server error occurred.", status, _responseText, _headers);
//             }));
//         }
//         return _observableOf<void>(<any>null);
//     }
// }
//
// @Injectable({providedIn: 'root'})
// export class RolesServiceProxy {
//     private http: HttpClient;
//     private baseUrl: string;
//     protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;
//
//     constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
//         this.http = http;
//         this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
//     }
//
//     /**
//      * @return Success
//      */
//     all(): Observable<ListResultDto_1OfOfIdentityRoleDtoAndContractsAnd_0AndCulture_neutralAndPublicKeyToken_null> {
//         let url_ = this.baseUrl + "/api/identity/roles/all";
//         url_ = url_.replace(/[?&]$/, "");
//
//         let options_ : any = {
//             observe: "response",
//             responseType: "blob",
//             headers: new HttpHeaders({
//                 "Accept": "text/plain"
//             })
//         };
//
//         return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
//             return this.processAll(response_);
//         })).pipe(_observableCatch((response_: any) => {
//             if (response_ instanceof HttpResponseBase) {
//                 try {
//                     return this.processAll(<any>response_);
//                 } catch (e) {
//                     return <Observable<ListResultDto_1OfOfIdentityRoleDtoAndContractsAnd_0AndCulture_neutralAndPublicKeyToken_null>><any>_observableThrow(e);
//                 }
//             } else
//                 return <Observable<ListResultDto_1OfOfIdentityRoleDtoAndContractsAnd_0AndCulture_neutralAndPublicKeyToken_null>><any>_observableThrow(response_);
//         }));
//     }
//
//     protected processAll(response: HttpResponseBase): Observable<ListResultDto_1OfOfIdentityRoleDtoAndContractsAnd_0AndCulture_neutralAndPublicKeyToken_null> {
//         const status = response.status;
//         const responseBlob =
//             response instanceof HttpResponse ? response.body :
//             (<any>response).error instanceof Blob ? (<any>response).error : undefined;
//
//         let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
//         if (status === 200) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result200: any = null;
//             let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result200 = ListResultDto_1OfOfIdentityRoleDtoAndContractsAnd_0AndCulture_neutralAndPublicKeyToken_null.fromJS(resultData200);
//             return _observableOf(result200);
//             }));
//         } else if (status === 403) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result403: any = null;
//             let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result403 = RemoteServiceErrorResponse.fromJS(resultData403);
//             return throwException("Forbidden", status, _responseText, _headers, result403);
//             }));
//         } else if (status === 401) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result401: any = null;
//             let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result401 = RemoteServiceErrorResponse.fromJS(resultData401);
//             return throwException("Unauthorized", status, _responseText, _headers, result401);
//             }));
//         } else if (status === 400) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result400: any = null;
//             let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result400 = RemoteServiceErrorResponse.fromJS(resultData400);
//             return throwException("Bad Request", status, _responseText, _headers, result400);
//             }));
//         } else if (status === 404) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result404: any = null;
//             let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result404 = RemoteServiceErrorResponse.fromJS(resultData404);
//             return throwException("Not Found", status, _responseText, _headers, result404);
//             }));
//         } else if (status === 501) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result501: any = null;
//             let resultData501 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result501 = RemoteServiceErrorResponse.fromJS(resultData501);
//             return throwException("Server Error", status, _responseText, _headers, result501);
//             }));
//         } else if (status === 500) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result500: any = null;
//             let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result500 = RemoteServiceErrorResponse.fromJS(resultData500);
//             return throwException("Server Error", status, _responseText, _headers, result500);
//             }));
//         } else if (status !== 200 && status !== 204) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             return throwException("An unexpected server error occurred.", status, _responseText, _headers);
//             }));
//         }
//         return _observableOf<ListResultDto_1OfOfIdentityRoleDtoAndContractsAnd_0AndCulture_neutralAndPublicKeyToken_null>(<any>null);
//     }
//
//     /**
//      * @param body (optional)
//      * @return Success
//      */
//     claimsPut(id: string, body: IdentityRoleClaimDto[] | undefined): Observable<void> {
//         let url_ = this.baseUrl + "/api/identity/roles/{id}/claims";
//         if (id === undefined || id === null)
//             throw new Error("The parameter 'id' must be defined.");
//         url_ = url_.replace("{id}", encodeURIComponent("" + id));
//         url_ = url_.replace(/[?&]$/, "");
//
//         const content_ = JSON.stringify(body);
//
//         let options_ : any = {
//             body: content_,
//             observe: "response",
//             responseType: "blob",
//             headers: new HttpHeaders({
//                 "Content-Type": "application/json",
//             })
//         };
//
//         return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
//             return this.processClaimsPut(response_);
//         })).pipe(_observableCatch((response_: any) => {
//             if (response_ instanceof HttpResponseBase) {
//                 try {
//                     return this.processClaimsPut(<any>response_);
//                 } catch (e) {
//                     return <Observable<void>><any>_observableThrow(e);
//                 }
//             } else
//                 return <Observable<void>><any>_observableThrow(response_);
//         }));
//     }
//
//     protected processClaimsPut(response: HttpResponseBase): Observable<void> {
//         const status = response.status;
//         const responseBlob =
//             response instanceof HttpResponse ? response.body :
//             (<any>response).error instanceof Blob ? (<any>response).error : undefined;
//
//         let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
//         if (status === 200) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             return _observableOf<void>(<any>null);
//             }));
//         } else if (status === 403) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result403: any = null;
//             let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result403 = RemoteServiceErrorResponse.fromJS(resultData403);
//             return throwException("Forbidden", status, _responseText, _headers, result403);
//             }));
//         } else if (status === 401) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result401: any = null;
//             let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result401 = RemoteServiceErrorResponse.fromJS(resultData401);
//             return throwException("Unauthorized", status, _responseText, _headers, result401);
//             }));
//         } else if (status === 400) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result400: any = null;
//             let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result400 = RemoteServiceErrorResponse.fromJS(resultData400);
//             return throwException("Bad Request", status, _responseText, _headers, result400);
//             }));
//         } else if (status === 404) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result404: any = null;
//             let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result404 = RemoteServiceErrorResponse.fromJS(resultData404);
//             return throwException("Not Found", status, _responseText, _headers, result404);
//             }));
//         } else if (status === 501) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result501: any = null;
//             let resultData501 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result501 = RemoteServiceErrorResponse.fromJS(resultData501);
//             return throwException("Server Error", status, _responseText, _headers, result501);
//             }));
//         } else if (status === 500) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result500: any = null;
//             let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result500 = RemoteServiceErrorResponse.fromJS(resultData500);
//             return throwException("Server Error", status, _responseText, _headers, result500);
//             }));
//         } else if (status !== 200 && status !== 204) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             return throwException("An unexpected server error occurred.", status, _responseText, _headers);
//             }));
//         }
//         return _observableOf<void>(<any>null);
//     }
//
//     /**
//      * @return Success
//      */
//     claimsGet(id: string): Observable<IdentityRoleClaimDto[]> {
//         let url_ = this.baseUrl + "/api/identity/roles/{id}/claims";
//         if (id === undefined || id === null)
//             throw new Error("The parameter 'id' must be defined.");
//         url_ = url_.replace("{id}", encodeURIComponent("" + id));
//         url_ = url_.replace(/[?&]$/, "");
//
//         let options_ : any = {
//             observe: "response",
//             responseType: "blob",
//             headers: new HttpHeaders({
//                 "Accept": "text/plain"
//             })
//         };
//
//         return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
//             return this.processClaimsGet(response_);
//         })).pipe(_observableCatch((response_: any) => {
//             if (response_ instanceof HttpResponseBase) {
//                 try {
//                     return this.processClaimsGet(<any>response_);
//                 } catch (e) {
//                     return <Observable<IdentityRoleClaimDto[]>><any>_observableThrow(e);
//                 }
//             } else
//                 return <Observable<IdentityRoleClaimDto[]>><any>_observableThrow(response_);
//         }));
//     }
//
//     protected processClaimsGet(response: HttpResponseBase): Observable<IdentityRoleClaimDto[]> {
//         const status = response.status;
//         const responseBlob =
//             response instanceof HttpResponse ? response.body :
//             (<any>response).error instanceof Blob ? (<any>response).error : undefined;
//
//         let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
//         if (status === 200) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result200: any = null;
//             let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             if (Array.isArray(resultData200)) {
//                 result200 = [] as any;
//                 for (let item of resultData200)
//                     result200!.push(IdentityRoleClaimDto.fromJS(item));
//             }
//             else {
//                 result200 = <any>null;
//             }
//             return _observableOf(result200);
//             }));
//         } else if (status === 403) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result403: any = null;
//             let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result403 = RemoteServiceErrorResponse.fromJS(resultData403);
//             return throwException("Forbidden", status, _responseText, _headers, result403);
//             }));
//         } else if (status === 401) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result401: any = null;
//             let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result401 = RemoteServiceErrorResponse.fromJS(resultData401);
//             return throwException("Unauthorized", status, _responseText, _headers, result401);
//             }));
//         } else if (status === 400) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result400: any = null;
//             let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result400 = RemoteServiceErrorResponse.fromJS(resultData400);
//             return throwException("Bad Request", status, _responseText, _headers, result400);
//             }));
//         } else if (status === 404) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result404: any = null;
//             let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result404 = RemoteServiceErrorResponse.fromJS(resultData404);
//             return throwException("Not Found", status, _responseText, _headers, result404);
//             }));
//         } else if (status === 501) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result501: any = null;
//             let resultData501 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result501 = RemoteServiceErrorResponse.fromJS(resultData501);
//             return throwException("Server Error", status, _responseText, _headers, result501);
//             }));
//         } else if (status === 500) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result500: any = null;
//             let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result500 = RemoteServiceErrorResponse.fromJS(resultData500);
//             return throwException("Server Error", status, _responseText, _headers, result500);
//             }));
//         } else if (status !== 200 && status !== 204) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             return throwException("An unexpected server error occurred.", status, _responseText, _headers);
//             }));
//         }
//         return _observableOf<IdentityRoleClaimDto[]>(<any>null);
//     }
//
//     /**
//      * @return Success
//      */
//     allClaimTypes(): Observable<ClaimTypeDto[]> {
//         let url_ = this.baseUrl + "/api/identity/roles/all-claim-types";
//         url_ = url_.replace(/[?&]$/, "");
//
//         let options_ : any = {
//             observe: "response",
//             responseType: "blob",
//             headers: new HttpHeaders({
//                 "Accept": "text/plain"
//             })
//         };
//
//         return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
//             return this.processAllClaimTypes(response_);
//         })).pipe(_observableCatch((response_: any) => {
//             if (response_ instanceof HttpResponseBase) {
//                 try {
//                     return this.processAllClaimTypes(<any>response_);
//                 } catch (e) {
//                     return <Observable<ClaimTypeDto[]>><any>_observableThrow(e);
//                 }
//             } else
//                 return <Observable<ClaimTypeDto[]>><any>_observableThrow(response_);
//         }));
//     }
//
//     protected processAllClaimTypes(response: HttpResponseBase): Observable<ClaimTypeDto[]> {
//         const status = response.status;
//         const responseBlob =
//             response instanceof HttpResponse ? response.body :
//             (<any>response).error instanceof Blob ? (<any>response).error : undefined;
//
//         let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
//         if (status === 200) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result200: any = null;
//             let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             if (Array.isArray(resultData200)) {
//                 result200 = [] as any;
//                 for (let item of resultData200)
//                     result200!.push(ClaimTypeDto.fromJS(item));
//             }
//             else {
//                 result200 = <any>null;
//             }
//             return _observableOf(result200);
//             }));
//         } else if (status === 403) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result403: any = null;
//             let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result403 = RemoteServiceErrorResponse.fromJS(resultData403);
//             return throwException("Forbidden", status, _responseText, _headers, result403);
//             }));
//         } else if (status === 401) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result401: any = null;
//             let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result401 = RemoteServiceErrorResponse.fromJS(resultData401);
//             return throwException("Unauthorized", status, _responseText, _headers, result401);
//             }));
//         } else if (status === 400) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result400: any = null;
//             let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result400 = RemoteServiceErrorResponse.fromJS(resultData400);
//             return throwException("Bad Request", status, _responseText, _headers, result400);
//             }));
//         } else if (status === 404) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result404: any = null;
//             let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result404 = RemoteServiceErrorResponse.fromJS(resultData404);
//             return throwException("Not Found", status, _responseText, _headers, result404);
//             }));
//         } else if (status === 501) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result501: any = null;
//             let resultData501 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result501 = RemoteServiceErrorResponse.fromJS(resultData501);
//             return throwException("Server Error", status, _responseText, _headers, result501);
//             }));
//         } else if (status === 500) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result500: any = null;
//             let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result500 = RemoteServiceErrorResponse.fromJS(resultData500);
//             return throwException("Server Error", status, _responseText, _headers, result500);
//             }));
//         } else if (status !== 200 && status !== 204) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             return throwException("An unexpected server error occurred.", status, _responseText, _headers);
//             }));
//         }
//         return _observableOf<ClaimTypeDto[]>(<any>null);
//     }
// }
//
// @Injectable({providedIn: 'root'})
// export class SecurityLogsServiceProxy {
//     private http: HttpClient;
//     private baseUrl: string;
//     protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;
//
//     constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
//         this.http = http;
//         this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
//     }
//
//     /**
//      * @param startTime (optional)
//      * @param endTime (optional)
//      * @param applicationName (optional)
//      * @param identity (optional)
//      * @param action (optional)
//      * @param userName (optional)
//      * @param clientId (optional)
//      * @param correlationId (optional)
//      * @param sorting (optional)
//      * @param skipCount (optional)
//      * @param maxResultCount (optional)
//      * @return Success
//      */
//     myGet(startTime: DateTime | undefined, endTime: DateTime | undefined, applicationName: string | undefined, identity: string | undefined, action: string | undefined, userName: string | undefined, clientId: string | undefined, correlationId: string | undefined, sorting: string | undefined, skipCount: number | undefined, maxResultCount: number | undefined): Observable<PagedResultDto_1OfOfIdentitySecurityLogDtoAndContractsAnd_0AndCulture_neutralAndPublicKeyToken_null> {
//         let url_ = this.baseUrl + "/api/identity/security-logs/my?";
//         if (startTime === null)
//             throw new Error("The parameter 'startTime' cannot be null.");
//         else if (startTime !== undefined)
//             url_ += "StartTime=" + encodeURIComponent(startTime ? "" + startTime.toJSON() : "") + "&";
//         if (endTime === null)
//             throw new Error("The parameter 'endTime' cannot be null.");
//         else if (endTime !== undefined)
//             url_ += "EndTime=" + encodeURIComponent(endTime ? "" + endTime.toJSON() : "") + "&";
//         if (applicationName === null)
//             throw new Error("The parameter 'applicationName' cannot be null.");
//         else if (applicationName !== undefined)
//             url_ += "ApplicationName=" + encodeURIComponent("" + applicationName) + "&";
//         if (identity === null)
//             throw new Error("The parameter 'identity' cannot be null.");
//         else if (identity !== undefined)
//             url_ += "Identity=" + encodeURIComponent("" + identity) + "&";
//         if (action === null)
//             throw new Error("The parameter 'action' cannot be null.");
//         else if (action !== undefined)
//             url_ += "Action=" + encodeURIComponent("" + action) + "&";
//         if (userName === null)
//             throw new Error("The parameter 'userName' cannot be null.");
//         else if (userName !== undefined)
//             url_ += "UserName=" + encodeURIComponent("" + userName) + "&";
//         if (clientId === null)
//             throw new Error("The parameter 'clientId' cannot be null.");
//         else if (clientId !== undefined)
//             url_ += "ClientId=" + encodeURIComponent("" + clientId) + "&";
//         if (correlationId === null)
//             throw new Error("The parameter 'correlationId' cannot be null.");
//         else if (correlationId !== undefined)
//             url_ += "CorrelationId=" + encodeURIComponent("" + correlationId) + "&";
//         if (sorting === null)
//             throw new Error("The parameter 'sorting' cannot be null.");
//         else if (sorting !== undefined)
//             url_ += "Sorting=" + encodeURIComponent("" + sorting) + "&";
//         if (skipCount === null)
//             throw new Error("The parameter 'skipCount' cannot be null.");
//         else if (skipCount !== undefined)
//             url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&";
//         if (maxResultCount === null)
//             throw new Error("The parameter 'maxResultCount' cannot be null.");
//         else if (maxResultCount !== undefined)
//             url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&";
//         url_ = url_.replace(/[?&]$/, "");
//
//         let options_ : any = {
//             observe: "response",
//             responseType: "blob",
//             headers: new HttpHeaders({
//                 "Accept": "text/plain"
//             })
//         };
//
//         return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
//             return this.processMyGet(response_);
//         })).pipe(_observableCatch((response_: any) => {
//             if (response_ instanceof HttpResponseBase) {
//                 try {
//                     return this.processMyGet(<any>response_);
//                 } catch (e) {
//                     return <Observable<PagedResultDto_1OfOfIdentitySecurityLogDtoAndContractsAnd_0AndCulture_neutralAndPublicKeyToken_null>><any>_observableThrow(e);
//                 }
//             } else
//                 return <Observable<PagedResultDto_1OfOfIdentitySecurityLogDtoAndContractsAnd_0AndCulture_neutralAndPublicKeyToken_null>><any>_observableThrow(response_);
//         }));
//     }
//
//     protected processMyGet(response: HttpResponseBase): Observable<PagedResultDto_1OfOfIdentitySecurityLogDtoAndContractsAnd_0AndCulture_neutralAndPublicKeyToken_null> {
//         const status = response.status;
//         const responseBlob =
//             response instanceof HttpResponse ? response.body :
//             (<any>response).error instanceof Blob ? (<any>response).error : undefined;
//
//         let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
//         if (status === 200) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result200: any = null;
//             let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result200 = PagedResultDto_1OfOfIdentitySecurityLogDtoAndContractsAnd_0AndCulture_neutralAndPublicKeyToken_null.fromJS(resultData200);
//             return _observableOf(result200);
//             }));
//         } else if (status === 403) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result403: any = null;
//             let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result403 = RemoteServiceErrorResponse.fromJS(resultData403);
//             return throwException("Forbidden", status, _responseText, _headers, result403);
//             }));
//         } else if (status === 401) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result401: any = null;
//             let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result401 = RemoteServiceErrorResponse.fromJS(resultData401);
//             return throwException("Unauthorized", status, _responseText, _headers, result401);
//             }));
//         } else if (status === 400) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result400: any = null;
//             let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result400 = RemoteServiceErrorResponse.fromJS(resultData400);
//             return throwException("Bad Request", status, _responseText, _headers, result400);
//             }));
//         } else if (status === 404) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result404: any = null;
//             let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result404 = RemoteServiceErrorResponse.fromJS(resultData404);
//             return throwException("Not Found", status, _responseText, _headers, result404);
//             }));
//         } else if (status === 501) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result501: any = null;
//             let resultData501 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result501 = RemoteServiceErrorResponse.fromJS(resultData501);
//             return throwException("Server Error", status, _responseText, _headers, result501);
//             }));
//         } else if (status === 500) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result500: any = null;
//             let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result500 = RemoteServiceErrorResponse.fromJS(resultData500);
//             return throwException("Server Error", status, _responseText, _headers, result500);
//             }));
//         } else if (status !== 200 && status !== 204) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             return throwException("An unexpected server error occurred.", status, _responseText, _headers);
//             }));
//         }
//         return _observableOf<PagedResultDto_1OfOfIdentitySecurityLogDtoAndContractsAnd_0AndCulture_neutralAndPublicKeyToken_null>(<any>null);
//     }
//
//     /**
//      * @return Success
//      */
//     myGet(id: string): Observable<IdentitySecurityLogDto> {
//         let url_ = this.baseUrl + "/api/identity/security-logs/my/{id}";
//         if (id === undefined || id === null)
//             throw new Error("The parameter 'id' must be defined.");
//         url_ = url_.replace("{id}", encodeURIComponent("" + id));
//         url_ = url_.replace(/[?&]$/, "");
//
//         let options_ : any = {
//             observe: "response",
//             responseType: "blob",
//             headers: new HttpHeaders({
//                 "Accept": "text/plain"
//             })
//         };
//
//         return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
//             return this.processMyGet(response_);
//         })).pipe(_observableCatch((response_: any) => {
//             if (response_ instanceof HttpResponseBase) {
//                 try {
//                     return this.processMyGet(<any>response_);
//                 } catch (e) {
//                     return <Observable<IdentitySecurityLogDto>><any>_observableThrow(e);
//                 }
//             } else
//                 return <Observable<IdentitySecurityLogDto>><any>_observableThrow(response_);
//         }));
//     }
//
//     protected processMyGet(response: HttpResponseBase): Observable<IdentitySecurityLogDto> {
//         const status = response.status;
//         const responseBlob =
//             response instanceof HttpResponse ? response.body :
//             (<any>response).error instanceof Blob ? (<any>response).error : undefined;
//
//         let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
//         if (status === 200) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result200: any = null;
//             let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result200 = IdentitySecurityLogDto.fromJS(resultData200);
//             return _observableOf(result200);
//             }));
//         } else if (status === 403) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result403: any = null;
//             let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result403 = RemoteServiceErrorResponse.fromJS(resultData403);
//             return throwException("Forbidden", status, _responseText, _headers, result403);
//             }));
//         } else if (status === 401) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result401: any = null;
//             let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result401 = RemoteServiceErrorResponse.fromJS(resultData401);
//             return throwException("Unauthorized", status, _responseText, _headers, result401);
//             }));
//         } else if (status === 400) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result400: any = null;
//             let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result400 = RemoteServiceErrorResponse.fromJS(resultData400);
//             return throwException("Bad Request", status, _responseText, _headers, result400);
//             }));
//         } else if (status === 404) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result404: any = null;
//             let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result404 = RemoteServiceErrorResponse.fromJS(resultData404);
//             return throwException("Not Found", status, _responseText, _headers, result404);
//             }));
//         } else if (status === 501) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result501: any = null;
//             let resultData501 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result501 = RemoteServiceErrorResponse.fromJS(resultData501);
//             return throwException("Server Error", status, _responseText, _headers, result501);
//             }));
//         } else if (status === 500) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result500: any = null;
//             let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result500 = RemoteServiceErrorResponse.fromJS(resultData500);
//             return throwException("Server Error", status, _responseText, _headers, result500);
//             }));
//         } else if (status !== 200 && status !== 204) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             return throwException("An unexpected server error occurred.", status, _responseText, _headers);
//             }));
//         }
//         return _observableOf<IdentitySecurityLogDto>(<any>null);
//     }
// }
//
// @Injectable({providedIn: 'root'})
// export class TextTemplateManagementServiceProxy {
//     private http: HttpClient;
//     private baseUrl: string;
//     protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;
//
//     constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
//         this.http = http;
//         this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
//     }
//
//     /**
//      * @param cultureName (optional)
//      * @return Success
//      */
//     templateContentsGet(templateName: string, cultureName: string | undefined): Observable<TextTemplateContentDto> {
//         let url_ = this.baseUrl + "/api/text-template-management/template-contents?";
//         if (templateName === undefined || templateName === null)
//             throw new Error("The parameter 'templateName' must be defined and cannot be null.");
//         else
//             url_ += "TemplateName=" + encodeURIComponent("" + templateName) + "&";
//         if (cultureName === null)
//             throw new Error("The parameter 'cultureName' cannot be null.");
//         else if (cultureName !== undefined)
//             url_ += "CultureName=" + encodeURIComponent("" + cultureName) + "&";
//         url_ = url_.replace(/[?&]$/, "");
//
//         let options_ : any = {
//             observe: "response",
//             responseType: "blob",
//             headers: new HttpHeaders({
//                 "Accept": "text/plain"
//             })
//         };
//
//         return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
//             return this.processTemplateContentsGet(response_);
//         })).pipe(_observableCatch((response_: any) => {
//             if (response_ instanceof HttpResponseBase) {
//                 try {
//                     return this.processTemplateContentsGet(<any>response_);
//                 } catch (e) {
//                     return <Observable<TextTemplateContentDto>><any>_observableThrow(e);
//                 }
//             } else
//                 return <Observable<TextTemplateContentDto>><any>_observableThrow(response_);
//         }));
//     }
//
//     protected processTemplateContentsGet(response: HttpResponseBase): Observable<TextTemplateContentDto> {
//         const status = response.status;
//         const responseBlob =
//             response instanceof HttpResponse ? response.body :
//             (<any>response).error instanceof Blob ? (<any>response).error : undefined;
//
//         let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
//         if (status === 200) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result200: any = null;
//             let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result200 = TextTemplateContentDto.fromJS(resultData200);
//             return _observableOf(result200);
//             }));
//         } else if (status === 403) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result403: any = null;
//             let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result403 = RemoteServiceErrorResponse.fromJS(resultData403);
//             return throwException("Forbidden", status, _responseText, _headers, result403);
//             }));
//         } else if (status === 401) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result401: any = null;
//             let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result401 = RemoteServiceErrorResponse.fromJS(resultData401);
//             return throwException("Unauthorized", status, _responseText, _headers, result401);
//             }));
//         } else if (status === 400) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result400: any = null;
//             let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result400 = RemoteServiceErrorResponse.fromJS(resultData400);
//             return throwException("Bad Request", status, _responseText, _headers, result400);
//             }));
//         } else if (status === 404) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result404: any = null;
//             let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result404 = RemoteServiceErrorResponse.fromJS(resultData404);
//             return throwException("Not Found", status, _responseText, _headers, result404);
//             }));
//         } else if (status === 501) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result501: any = null;
//             let resultData501 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result501 = RemoteServiceErrorResponse.fromJS(resultData501);
//             return throwException("Server Error", status, _responseText, _headers, result501);
//             }));
//         } else if (status === 500) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result500: any = null;
//             let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result500 = RemoteServiceErrorResponse.fromJS(resultData500);
//             return throwException("Server Error", status, _responseText, _headers, result500);
//             }));
//         } else if (status !== 200 && status !== 204) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             return throwException("An unexpected server error occurred.", status, _responseText, _headers);
//             }));
//         }
//         return _observableOf<TextTemplateContentDto>(<any>null);
//     }
//
//     /**
//      * @param body (optional)
//      * @return Success
//      */
//     templateContentsPut(body: UpdateTemplateContentInput | undefined): Observable<TextTemplateContentDto> {
//         let url_ = this.baseUrl + "/api/text-template-management/template-contents";
//         url_ = url_.replace(/[?&]$/, "");
//
//         const content_ = JSON.stringify(body);
//
//         let options_ : any = {
//             body: content_,
//             observe: "response",
//             responseType: "blob",
//             headers: new HttpHeaders({
//                 "Content-Type": "application/json",
//                 "Accept": "text/plain"
//             })
//         };
//
//         return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
//             return this.processTemplateContentsPut(response_);
//         })).pipe(_observableCatch((response_: any) => {
//             if (response_ instanceof HttpResponseBase) {
//                 try {
//                     return this.processTemplateContentsPut(<any>response_);
//                 } catch (e) {
//                     return <Observable<TextTemplateContentDto>><any>_observableThrow(e);
//                 }
//             } else
//                 return <Observable<TextTemplateContentDto>><any>_observableThrow(response_);
//         }));
//     }
//
//     protected processTemplateContentsPut(response: HttpResponseBase): Observable<TextTemplateContentDto> {
//         const status = response.status;
//         const responseBlob =
//             response instanceof HttpResponse ? response.body :
//             (<any>response).error instanceof Blob ? (<any>response).error : undefined;
//
//         let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
//         if (status === 200) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result200: any = null;
//             let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result200 = TextTemplateContentDto.fromJS(resultData200);
//             return _observableOf(result200);
//             }));
//         } else if (status === 403) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result403: any = null;
//             let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result403 = RemoteServiceErrorResponse.fromJS(resultData403);
//             return throwException("Forbidden", status, _responseText, _headers, result403);
//             }));
//         } else if (status === 401) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result401: any = null;
//             let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result401 = RemoteServiceErrorResponse.fromJS(resultData401);
//             return throwException("Unauthorized", status, _responseText, _headers, result401);
//             }));
//         } else if (status === 400) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result400: any = null;
//             let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result400 = RemoteServiceErrorResponse.fromJS(resultData400);
//             return throwException("Bad Request", status, _responseText, _headers, result400);
//             }));
//         } else if (status === 404) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result404: any = null;
//             let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result404 = RemoteServiceErrorResponse.fromJS(resultData404);
//             return throwException("Not Found", status, _responseText, _headers, result404);
//             }));
//         } else if (status === 501) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result501: any = null;
//             let resultData501 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result501 = RemoteServiceErrorResponse.fromJS(resultData501);
//             return throwException("Server Error", status, _responseText, _headers, result501);
//             }));
//         } else if (status === 500) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result500: any = null;
//             let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result500 = RemoteServiceErrorResponse.fromJS(resultData500);
//             return throwException("Server Error", status, _responseText, _headers, result500);
//             }));
//         } else if (status !== 200 && status !== 204) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             return throwException("An unexpected server error occurred.", status, _responseText, _headers);
//             }));
//         }
//         return _observableOf<TextTemplateContentDto>(<any>null);
//     }
//
//     /**
//      * @param filterText (optional)
//      * @param sorting (optional)
//      * @param skipCount (optional)
//      * @param maxResultCount (optional)
//      * @return Success
//      */
//     templateDefinitionsGet(filterText: string | undefined, sorting: string | undefined, skipCount: number | undefined, maxResultCount: number | undefined): Observable<PagedResultDto_1OfOfTemplateDefinitionDtoAndContractsAnd_0AndCulture_neutralAndPublicKeyToken_null> {
//         let url_ = this.baseUrl + "/api/text-template-management/template-definitions?";
//         if (filterText === null)
//             throw new Error("The parameter 'filterText' cannot be null.");
//         else if (filterText !== undefined)
//             url_ += "FilterText=" + encodeURIComponent("" + filterText) + "&";
//         if (sorting === null)
//             throw new Error("The parameter 'sorting' cannot be null.");
//         else if (sorting !== undefined)
//             url_ += "Sorting=" + encodeURIComponent("" + sorting) + "&";
//         if (skipCount === null)
//             throw new Error("The parameter 'skipCount' cannot be null.");
//         else if (skipCount !== undefined)
//             url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&";
//         if (maxResultCount === null)
//             throw new Error("The parameter 'maxResultCount' cannot be null.");
//         else if (maxResultCount !== undefined)
//             url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&";
//         url_ = url_.replace(/[?&]$/, "");
//
//         let options_ : any = {
//             observe: "response",
//             responseType: "blob",
//             headers: new HttpHeaders({
//                 "Accept": "text/plain"
//             })
//         };
//
//         return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
//             return this.processTemplateDefinitionsGet(response_);
//         })).pipe(_observableCatch((response_: any) => {
//             if (response_ instanceof HttpResponseBase) {
//                 try {
//                     return this.processTemplateDefinitionsGet(<any>response_);
//                 } catch (e) {
//                     return <Observable<PagedResultDto_1OfOfTemplateDefinitionDtoAndContractsAnd_0AndCulture_neutralAndPublicKeyToken_null>><any>_observableThrow(e);
//                 }
//             } else
//                 return <Observable<PagedResultDto_1OfOfTemplateDefinitionDtoAndContractsAnd_0AndCulture_neutralAndPublicKeyToken_null>><any>_observableThrow(response_);
//         }));
//     }
//
//     protected processTemplateDefinitionsGet(response: HttpResponseBase): Observable<PagedResultDto_1OfOfTemplateDefinitionDtoAndContractsAnd_0AndCulture_neutralAndPublicKeyToken_null> {
//         const status = response.status;
//         const responseBlob =
//             response instanceof HttpResponse ? response.body :
//             (<any>response).error instanceof Blob ? (<any>response).error : undefined;
//
//         let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
//         if (status === 200) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result200: any = null;
//             let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result200 = PagedResultDto_1OfOfTemplateDefinitionDtoAndContractsAnd_0AndCulture_neutralAndPublicKeyToken_null.fromJS(resultData200);
//             return _observableOf(result200);
//             }));
//         } else if (status === 403) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result403: any = null;
//             let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result403 = RemoteServiceErrorResponse.fromJS(resultData403);
//             return throwException("Forbidden", status, _responseText, _headers, result403);
//             }));
//         } else if (status === 401) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result401: any = null;
//             let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result401 = RemoteServiceErrorResponse.fromJS(resultData401);
//             return throwException("Unauthorized", status, _responseText, _headers, result401);
//             }));
//         } else if (status === 400) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result400: any = null;
//             let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result400 = RemoteServiceErrorResponse.fromJS(resultData400);
//             return throwException("Bad Request", status, _responseText, _headers, result400);
//             }));
//         } else if (status === 404) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result404: any = null;
//             let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result404 = RemoteServiceErrorResponse.fromJS(resultData404);
//             return throwException("Not Found", status, _responseText, _headers, result404);
//             }));
//         } else if (status === 501) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result501: any = null;
//             let resultData501 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result501 = RemoteServiceErrorResponse.fromJS(resultData501);
//             return throwException("Server Error", status, _responseText, _headers, result501);
//             }));
//         } else if (status === 500) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result500: any = null;
//             let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result500 = RemoteServiceErrorResponse.fromJS(resultData500);
//             return throwException("Server Error", status, _responseText, _headers, result500);
//             }));
//         } else if (status !== 200 && status !== 204) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             return throwException("An unexpected server error occurred.", status, _responseText, _headers);
//             }));
//         }
//         return _observableOf<PagedResultDto_1OfOfTemplateDefinitionDtoAndContractsAnd_0AndCulture_neutralAndPublicKeyToken_null>(<any>null);
//     }
//
//     /**
//      * @return Success
//      */
//     templateDefinitionsGet(name: string): Observable<TemplateDefinitionDto> {
//         let url_ = this.baseUrl + "/api/text-template-management/template-definitions/{name}";
//         if (name === undefined || name === null)
//             throw new Error("The parameter 'name' must be defined.");
//         url_ = url_.replace("{name}", encodeURIComponent("" + name));
//         url_ = url_.replace(/[?&]$/, "");
//
//         let options_ : any = {
//             observe: "response",
//             responseType: "blob",
//             headers: new HttpHeaders({
//                 "Accept": "text/plain"
//             })
//         };
//
//         return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
//             return this.processTemplateDefinitionsGet(response_);
//         })).pipe(_observableCatch((response_: any) => {
//             if (response_ instanceof HttpResponseBase) {
//                 try {
//                     return this.processTemplateDefinitionsGet(<any>response_);
//                 } catch (e) {
//                     return <Observable<TemplateDefinitionDto>><any>_observableThrow(e);
//                 }
//             } else
//                 return <Observable<TemplateDefinitionDto>><any>_observableThrow(response_);
//         }));
//     }
//
//     protected processTemplateDefinitionsGet(response: HttpResponseBase): Observable<TemplateDefinitionDto> {
//         const status = response.status;
//         const responseBlob =
//             response instanceof HttpResponse ? response.body :
//             (<any>response).error instanceof Blob ? (<any>response).error : undefined;
//
//         let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
//         if (status === 200) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result200: any = null;
//             let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result200 = TemplateDefinitionDto.fromJS(resultData200);
//             return _observableOf(result200);
//             }));
//         } else if (status === 403) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result403: any = null;
//             let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result403 = RemoteServiceErrorResponse.fromJS(resultData403);
//             return throwException("Forbidden", status, _responseText, _headers, result403);
//             }));
//         } else if (status === 401) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result401: any = null;
//             let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result401 = RemoteServiceErrorResponse.fromJS(resultData401);
//             return throwException("Unauthorized", status, _responseText, _headers, result401);
//             }));
//         } else if (status === 400) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result400: any = null;
//             let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result400 = RemoteServiceErrorResponse.fromJS(resultData400);
//             return throwException("Bad Request", status, _responseText, _headers, result400);
//             }));
//         } else if (status === 404) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result404: any = null;
//             let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result404 = RemoteServiceErrorResponse.fromJS(resultData404);
//             return throwException("Not Found", status, _responseText, _headers, result404);
//             }));
//         } else if (status === 501) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result501: any = null;
//             let resultData501 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result501 = RemoteServiceErrorResponse.fromJS(resultData501);
//             return throwException("Server Error", status, _responseText, _headers, result501);
//             }));
//         } else if (status === 500) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result500: any = null;
//             let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result500 = RemoteServiceErrorResponse.fromJS(resultData500);
//             return throwException("Server Error", status, _responseText, _headers, result500);
//             }));
//         } else if (status !== 200 && status !== 204) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             return throwException("An unexpected server error occurred.", status, _responseText, _headers);
//             }));
//         }
//         return _observableOf<TemplateDefinitionDto>(<any>null);
//     }
// }
//
// @Injectable({providedIn: 'root'})
// export class TemplateContentsServiceProxy {
//     private http: HttpClient;
//     private baseUrl: string;
//     protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;
//
//     constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
//         this.http = http;
//         this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
//     }
//
//     /**
//      * @param body (optional)
//      * @return Success
//      */
//     restoreToDefault(body: RestoreTemplateContentInput | undefined): Observable<void> {
//         let url_ = this.baseUrl + "/api/text-template-management/template-contents/restore-to-default";
//         url_ = url_.replace(/[?&]$/, "");
//
//         const content_ = JSON.stringify(body);
//
//         let options_ : any = {
//             body: content_,
//             observe: "response",
//             responseType: "blob",
//             headers: new HttpHeaders({
//                 "Content-Type": "application/json",
//             })
//         };
//
//         return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
//             return this.processRestoreToDefault(response_);
//         })).pipe(_observableCatch((response_: any) => {
//             if (response_ instanceof HttpResponseBase) {
//                 try {
//                     return this.processRestoreToDefault(<any>response_);
//                 } catch (e) {
//                     return <Observable<void>><any>_observableThrow(e);
//                 }
//             } else
//                 return <Observable<void>><any>_observableThrow(response_);
//         }));
//     }
//
//     protected processRestoreToDefault(response: HttpResponseBase): Observable<void> {
//         const status = response.status;
//         const responseBlob =
//             response instanceof HttpResponse ? response.body :
//             (<any>response).error instanceof Blob ? (<any>response).error : undefined;
//
//         let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
//         if (status === 200) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             return _observableOf<void>(<any>null);
//             }));
//         } else if (status === 403) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result403: any = null;
//             let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result403 = RemoteServiceErrorResponse.fromJS(resultData403);
//             return throwException("Forbidden", status, _responseText, _headers, result403);
//             }));
//         } else if (status === 401) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result401: any = null;
//             let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result401 = RemoteServiceErrorResponse.fromJS(resultData401);
//             return throwException("Unauthorized", status, _responseText, _headers, result401);
//             }));
//         } else if (status === 400) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result400: any = null;
//             let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result400 = RemoteServiceErrorResponse.fromJS(resultData400);
//             return throwException("Bad Request", status, _responseText, _headers, result400);
//             }));
//         } else if (status === 404) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result404: any = null;
//             let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result404 = RemoteServiceErrorResponse.fromJS(resultData404);
//             return throwException("Not Found", status, _responseText, _headers, result404);
//             }));
//         } else if (status === 501) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result501: any = null;
//             let resultData501 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result501 = RemoteServiceErrorResponse.fromJS(resultData501);
//             return throwException("Server Error", status, _responseText, _headers, result501);
//             }));
//         } else if (status === 500) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result500: any = null;
//             let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result500 = RemoteServiceErrorResponse.fromJS(resultData500);
//             return throwException("Server Error", status, _responseText, _headers, result500);
//             }));
//         } else if (status !== 200 && status !== 204) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             return throwException("An unexpected server error occurred.", status, _responseText, _headers);
//             }));
//         }
//         return _observableOf<void>(<any>null);
//     }
// }
//
// @Injectable({providedIn: 'root'})
// export class LinkUserServiceProxy {
//     private http: HttpClient;
//     private baseUrl: string;
//     protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;
//
//     constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
//         this.http = http;
//         this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
//     }
//
//     /**
//      * @param body (optional)
//      * @return Success
//      */
//     link(body: LinkUserInput | undefined): Observable<void> {
//         let url_ = this.baseUrl + "/api/identity/link-user/link";
//         url_ = url_.replace(/[?&]$/, "");
//
//         const content_ = JSON.stringify(body);
//
//         let options_ : any = {
//             body: content_,
//             observe: "response",
//             responseType: "blob",
//             headers: new HttpHeaders({
//                 "Content-Type": "application/json",
//             })
//         };
//
//         return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
//             return this.processLink(response_);
//         })).pipe(_observableCatch((response_: any) => {
//             if (response_ instanceof HttpResponseBase) {
//                 try {
//                     return this.processLink(<any>response_);
//                 } catch (e) {
//                     return <Observable<void>><any>_observableThrow(e);
//                 }
//             } else
//                 return <Observable<void>><any>_observableThrow(response_);
//         }));
//     }
//
//     protected processLink(response: HttpResponseBase): Observable<void> {
//         const status = response.status;
//         const responseBlob =
//             response instanceof HttpResponse ? response.body :
//             (<any>response).error instanceof Blob ? (<any>response).error : undefined;
//
//         let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
//         if (status === 200) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             return _observableOf<void>(<any>null);
//             }));
//         } else if (status === 403) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result403: any = null;
//             let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result403 = RemoteServiceErrorResponse.fromJS(resultData403);
//             return throwException("Forbidden", status, _responseText, _headers, result403);
//             }));
//         } else if (status === 401) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result401: any = null;
//             let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result401 = RemoteServiceErrorResponse.fromJS(resultData401);
//             return throwException("Unauthorized", status, _responseText, _headers, result401);
//             }));
//         } else if (status === 400) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result400: any = null;
//             let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result400 = RemoteServiceErrorResponse.fromJS(resultData400);
//             return throwException("Bad Request", status, _responseText, _headers, result400);
//             }));
//         } else if (status === 404) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result404: any = null;
//             let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result404 = RemoteServiceErrorResponse.fromJS(resultData404);
//             return throwException("Not Found", status, _responseText, _headers, result404);
//             }));
//         } else if (status === 501) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result501: any = null;
//             let resultData501 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result501 = RemoteServiceErrorResponse.fromJS(resultData501);
//             return throwException("Server Error", status, _responseText, _headers, result501);
//             }));
//         } else if (status === 500) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result500: any = null;
//             let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result500 = RemoteServiceErrorResponse.fromJS(resultData500);
//             return throwException("Server Error", status, _responseText, _headers, result500);
//             }));
//         } else if (status !== 200 && status !== 204) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             return throwException("An unexpected server error occurred.", status, _responseText, _headers);
//             }));
//         }
//         return _observableOf<void>(<any>null);
//     }
//
//     /**
//      * @param body (optional)
//      * @return Success
//      */
//     unlink(body: UnLinkUserInput | undefined): Observable<void> {
//         let url_ = this.baseUrl + "/api/identity/link-user/unlink";
//         url_ = url_.replace(/[?&]$/, "");
//
//         const content_ = JSON.stringify(body);
//
//         let options_ : any = {
//             body: content_,
//             observe: "response",
//             responseType: "blob",
//             headers: new HttpHeaders({
//                 "Content-Type": "application/json",
//             })
//         };
//
//         return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
//             return this.processUnlink(response_);
//         })).pipe(_observableCatch((response_: any) => {
//             if (response_ instanceof HttpResponseBase) {
//                 try {
//                     return this.processUnlink(<any>response_);
//                 } catch (e) {
//                     return <Observable<void>><any>_observableThrow(e);
//                 }
//             } else
//                 return <Observable<void>><any>_observableThrow(response_);
//         }));
//     }
//
//     protected processUnlink(response: HttpResponseBase): Observable<void> {
//         const status = response.status;
//         const responseBlob =
//             response instanceof HttpResponse ? response.body :
//             (<any>response).error instanceof Blob ? (<any>response).error : undefined;
//
//         let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
//         if (status === 200) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             return _observableOf<void>(<any>null);
//             }));
//         } else if (status === 403) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result403: any = null;
//             let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result403 = RemoteServiceErrorResponse.fromJS(resultData403);
//             return throwException("Forbidden", status, _responseText, _headers, result403);
//             }));
//         } else if (status === 401) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result401: any = null;
//             let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result401 = RemoteServiceErrorResponse.fromJS(resultData401);
//             return throwException("Unauthorized", status, _responseText, _headers, result401);
//             }));
//         } else if (status === 400) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result400: any = null;
//             let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result400 = RemoteServiceErrorResponse.fromJS(resultData400);
//             return throwException("Bad Request", status, _responseText, _headers, result400);
//             }));
//         } else if (status === 404) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result404: any = null;
//             let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result404 = RemoteServiceErrorResponse.fromJS(resultData404);
//             return throwException("Not Found", status, _responseText, _headers, result404);
//             }));
//         } else if (status === 501) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result501: any = null;
//             let resultData501 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result501 = RemoteServiceErrorResponse.fromJS(resultData501);
//             return throwException("Server Error", status, _responseText, _headers, result501);
//             }));
//         } else if (status === 500) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result500: any = null;
//             let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result500 = RemoteServiceErrorResponse.fromJS(resultData500);
//             return throwException("Server Error", status, _responseText, _headers, result500);
//             }));
//         } else if (status !== 200 && status !== 204) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             return throwException("An unexpected server error occurred.", status, _responseText, _headers);
//             }));
//         }
//         return _observableOf<void>(<any>null);
//     }
//
//     /**
//      * @param body (optional)
//      * @return Success
//      */
//     isLinked(body: IsLinkedInput | undefined): Observable<boolean> {
//         let url_ = this.baseUrl + "/api/identity/link-user/is-linked";
//         url_ = url_.replace(/[?&]$/, "");
//
//         const content_ = JSON.stringify(body);
//
//         let options_ : any = {
//             body: content_,
//             observe: "response",
//             responseType: "blob",
//             headers: new HttpHeaders({
//                 "Content-Type": "application/json",
//                 "Accept": "text/plain"
//             })
//         };
//
//         return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
//             return this.processIsLinked(response_);
//         })).pipe(_observableCatch((response_: any) => {
//             if (response_ instanceof HttpResponseBase) {
//                 try {
//                     return this.processIsLinked(<any>response_);
//                 } catch (e) {
//                     return <Observable<boolean>><any>_observableThrow(e);
//                 }
//             } else
//                 return <Observable<boolean>><any>_observableThrow(response_);
//         }));
//     }
//
//     protected processIsLinked(response: HttpResponseBase): Observable<boolean> {
//         const status = response.status;
//         const responseBlob =
//             response instanceof HttpResponse ? response.body :
//             (<any>response).error instanceof Blob ? (<any>response).error : undefined;
//
//         let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
//         if (status === 200) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result200: any = null;
//             let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result200 = resultData200 !== undefined ? resultData200 : <any>null;
//             return _observableOf(result200);
//             }));
//         } else if (status === 403) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result403: any = null;
//             let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result403 = RemoteServiceErrorResponse.fromJS(resultData403);
//             return throwException("Forbidden", status, _responseText, _headers, result403);
//             }));
//         } else if (status === 401) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result401: any = null;
//             let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result401 = RemoteServiceErrorResponse.fromJS(resultData401);
//             return throwException("Unauthorized", status, _responseText, _headers, result401);
//             }));
//         } else if (status === 400) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result400: any = null;
//             let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result400 = RemoteServiceErrorResponse.fromJS(resultData400);
//             return throwException("Bad Request", status, _responseText, _headers, result400);
//             }));
//         } else if (status === 404) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result404: any = null;
//             let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result404 = RemoteServiceErrorResponse.fromJS(resultData404);
//             return throwException("Not Found", status, _responseText, _headers, result404);
//             }));
//         } else if (status === 501) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result501: any = null;
//             let resultData501 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result501 = RemoteServiceErrorResponse.fromJS(resultData501);
//             return throwException("Server Error", status, _responseText, _headers, result501);
//             }));
//         } else if (status === 500) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result500: any = null;
//             let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result500 = RemoteServiceErrorResponse.fromJS(resultData500);
//             return throwException("Server Error", status, _responseText, _headers, result500);
//             }));
//         } else if (status !== 200 && status !== 204) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             return throwException("An unexpected server error occurred.", status, _responseText, _headers);
//             }));
//         }
//         return _observableOf<boolean>(<any>null);
//     }
//
//     /**
//      * @return Success
//      */
//     generateLinkToken(): Observable<string> {
//         let url_ = this.baseUrl + "/api/identity/link-user/generate-link-token";
//         url_ = url_.replace(/[?&]$/, "");
//
//         let options_ : any = {
//             observe: "response",
//             responseType: "blob",
//             headers: new HttpHeaders({
//                 "Accept": "text/plain"
//             })
//         };
//
//         return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
//             return this.processGenerateLinkToken(response_);
//         })).pipe(_observableCatch((response_: any) => {
//             if (response_ instanceof HttpResponseBase) {
//                 try {
//                     return this.processGenerateLinkToken(<any>response_);
//                 } catch (e) {
//                     return <Observable<string>><any>_observableThrow(e);
//                 }
//             } else
//                 return <Observable<string>><any>_observableThrow(response_);
//         }));
//     }
//
//     protected processGenerateLinkToken(response: HttpResponseBase): Observable<string> {
//         const status = response.status;
//         const responseBlob =
//             response instanceof HttpResponse ? response.body :
//             (<any>response).error instanceof Blob ? (<any>response).error : undefined;
//
//         let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
//         if (status === 200) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result200: any = null;
//             let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result200 = resultData200 !== undefined ? resultData200 : <any>null;
//             return _observableOf(result200);
//             }));
//         } else if (status === 403) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result403: any = null;
//             let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result403 = RemoteServiceErrorResponse.fromJS(resultData403);
//             return throwException("Forbidden", status, _responseText, _headers, result403);
//             }));
//         } else if (status === 401) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result401: any = null;
//             let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result401 = RemoteServiceErrorResponse.fromJS(resultData401);
//             return throwException("Unauthorized", status, _responseText, _headers, result401);
//             }));
//         } else if (status === 400) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result400: any = null;
//             let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result400 = RemoteServiceErrorResponse.fromJS(resultData400);
//             return throwException("Bad Request", status, _responseText, _headers, result400);
//             }));
//         } else if (status === 404) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result404: any = null;
//             let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result404 = RemoteServiceErrorResponse.fromJS(resultData404);
//             return throwException("Not Found", status, _responseText, _headers, result404);
//             }));
//         } else if (status === 501) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result501: any = null;
//             let resultData501 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result501 = RemoteServiceErrorResponse.fromJS(resultData501);
//             return throwException("Server Error", status, _responseText, _headers, result501);
//             }));
//         } else if (status === 500) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result500: any = null;
//             let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result500 = RemoteServiceErrorResponse.fromJS(resultData500);
//             return throwException("Server Error", status, _responseText, _headers, result500);
//             }));
//         } else if (status !== 200 && status !== 204) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             return throwException("An unexpected server error occurred.", status, _responseText, _headers);
//             }));
//         }
//         return _observableOf<string>(<any>null);
//     }
//
//     /**
//      * @param body (optional)
//      * @return Success
//      */
//     verifyLinkToken(body: VerifyLinkTokenInput | undefined): Observable<boolean> {
//         let url_ = this.baseUrl + "/api/identity/link-user/verify-link-token";
//         url_ = url_.replace(/[?&]$/, "");
//
//         const content_ = JSON.stringify(body);
//
//         let options_ : any = {
//             body: content_,
//             observe: "response",
//             responseType: "blob",
//             headers: new HttpHeaders({
//                 "Content-Type": "application/json",
//                 "Accept": "text/plain"
//             })
//         };
//
//         return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
//             return this.processVerifyLinkToken(response_);
//         })).pipe(_observableCatch((response_: any) => {
//             if (response_ instanceof HttpResponseBase) {
//                 try {
//                     return this.processVerifyLinkToken(<any>response_);
//                 } catch (e) {
//                     return <Observable<boolean>><any>_observableThrow(e);
//                 }
//             } else
//                 return <Observable<boolean>><any>_observableThrow(response_);
//         }));
//     }
//
//     protected processVerifyLinkToken(response: HttpResponseBase): Observable<boolean> {
//         const status = response.status;
//         const responseBlob =
//             response instanceof HttpResponse ? response.body :
//             (<any>response).error instanceof Blob ? (<any>response).error : undefined;
//
//         let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
//         if (status === 200) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result200: any = null;
//             let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result200 = resultData200 !== undefined ? resultData200 : <any>null;
//             return _observableOf(result200);
//             }));
//         } else if (status === 403) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result403: any = null;
//             let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result403 = RemoteServiceErrorResponse.fromJS(resultData403);
//             return throwException("Forbidden", status, _responseText, _headers, result403);
//             }));
//         } else if (status === 401) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result401: any = null;
//             let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result401 = RemoteServiceErrorResponse.fromJS(resultData401);
//             return throwException("Unauthorized", status, _responseText, _headers, result401);
//             }));
//         } else if (status === 400) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result400: any = null;
//             let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result400 = RemoteServiceErrorResponse.fromJS(resultData400);
//             return throwException("Bad Request", status, _responseText, _headers, result400);
//             }));
//         } else if (status === 404) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result404: any = null;
//             let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result404 = RemoteServiceErrorResponse.fromJS(resultData404);
//             return throwException("Not Found", status, _responseText, _headers, result404);
//             }));
//         } else if (status === 501) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result501: any = null;
//             let resultData501 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result501 = RemoteServiceErrorResponse.fromJS(resultData501);
//             return throwException("Server Error", status, _responseText, _headers, result501);
//             }));
//         } else if (status === 500) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result500: any = null;
//             let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result500 = RemoteServiceErrorResponse.fromJS(resultData500);
//             return throwException("Server Error", status, _responseText, _headers, result500);
//             }));
//         } else if (status !== 200 && status !== 204) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             return throwException("An unexpected server error occurred.", status, _responseText, _headers);
//             }));
//         }
//         return _observableOf<boolean>(<any>null);
//     }
// }
//
// @Injectable({providedIn: 'root'})
// export class UsersServiceProxy {
//     private http: HttpClient;
//     private baseUrl: string;
//     protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;
//
//     constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
//         this.http = http;
//         this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
//     }
//
//     /**
//      * @return Success
//      */
//     rolesGet(id: string): Observable<ListResultDto_1OfOfIdentityRoleDtoAndContractsAnd_0AndCulture_neutralAndPublicKeyToken_null> {
//         let url_ = this.baseUrl + "/api/identity/users/{id}/roles";
//         if (id === undefined || id === null)
//             throw new Error("The parameter 'id' must be defined.");
//         url_ = url_.replace("{id}", encodeURIComponent("" + id));
//         url_ = url_.replace(/[?&]$/, "");
//
//         let options_ : any = {
//             observe: "response",
//             responseType: "blob",
//             headers: new HttpHeaders({
//                 "Accept": "text/plain"
//             })
//         };
//
//         return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
//             return this.processRolesGet(response_);
//         })).pipe(_observableCatch((response_: any) => {
//             if (response_ instanceof HttpResponseBase) {
//                 try {
//                     return this.processRolesGet(<any>response_);
//                 } catch (e) {
//                     return <Observable<ListResultDto_1OfOfIdentityRoleDtoAndContractsAnd_0AndCulture_neutralAndPublicKeyToken_null>><any>_observableThrow(e);
//                 }
//             } else
//                 return <Observable<ListResultDto_1OfOfIdentityRoleDtoAndContractsAnd_0AndCulture_neutralAndPublicKeyToken_null>><any>_observableThrow(response_);
//         }));
//     }
//
//     protected processRolesGet(response: HttpResponseBase): Observable<ListResultDto_1OfOfIdentityRoleDtoAndContractsAnd_0AndCulture_neutralAndPublicKeyToken_null> {
//         const status = response.status;
//         const responseBlob =
//             response instanceof HttpResponse ? response.body :
//             (<any>response).error instanceof Blob ? (<any>response).error : undefined;
//
//         let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
//         if (status === 200) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result200: any = null;
//             let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result200 = ListResultDto_1OfOfIdentityRoleDtoAndContractsAnd_0AndCulture_neutralAndPublicKeyToken_null.fromJS(resultData200);
//             return _observableOf(result200);
//             }));
//         } else if (status === 403) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result403: any = null;
//             let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result403 = RemoteServiceErrorResponse.fromJS(resultData403);
//             return throwException("Forbidden", status, _responseText, _headers, result403);
//             }));
//         } else if (status === 401) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result401: any = null;
//             let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result401 = RemoteServiceErrorResponse.fromJS(resultData401);
//             return throwException("Unauthorized", status, _responseText, _headers, result401);
//             }));
//         } else if (status === 400) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result400: any = null;
//             let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result400 = RemoteServiceErrorResponse.fromJS(resultData400);
//             return throwException("Bad Request", status, _responseText, _headers, result400);
//             }));
//         } else if (status === 404) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result404: any = null;
//             let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result404 = RemoteServiceErrorResponse.fromJS(resultData404);
//             return throwException("Not Found", status, _responseText, _headers, result404);
//             }));
//         } else if (status === 501) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result501: any = null;
//             let resultData501 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result501 = RemoteServiceErrorResponse.fromJS(resultData501);
//             return throwException("Server Error", status, _responseText, _headers, result501);
//             }));
//         } else if (status === 500) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result500: any = null;
//             let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result500 = RemoteServiceErrorResponse.fromJS(resultData500);
//             return throwException("Server Error", status, _responseText, _headers, result500);
//             }));
//         } else if (status !== 200 && status !== 204) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             return throwException("An unexpected server error occurred.", status, _responseText, _headers);
//             }));
//         }
//         return _observableOf<ListResultDto_1OfOfIdentityRoleDtoAndContractsAnd_0AndCulture_neutralAndPublicKeyToken_null>(<any>null);
//     }
//
//     /**
//      * @param body (optional)
//      * @return Success
//      */
//     rolesPut(id: string, body: IdentityUserUpdateRolesDto | undefined): Observable<void> {
//         let url_ = this.baseUrl + "/api/identity/users/{id}/roles";
//         if (id === undefined || id === null)
//             throw new Error("The parameter 'id' must be defined.");
//         url_ = url_.replace("{id}", encodeURIComponent("" + id));
//         url_ = url_.replace(/[?&]$/, "");
//
//         const content_ = JSON.stringify(body);
//
//         let options_ : any = {
//             body: content_,
//             observe: "response",
//             responseType: "blob",
//             headers: new HttpHeaders({
//                 "Content-Type": "application/json",
//             })
//         };
//
//         return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
//             return this.processRolesPut(response_);
//         })).pipe(_observableCatch((response_: any) => {
//             if (response_ instanceof HttpResponseBase) {
//                 try {
//                     return this.processRolesPut(<any>response_);
//                 } catch (e) {
//                     return <Observable<void>><any>_observableThrow(e);
//                 }
//             } else
//                 return <Observable<void>><any>_observableThrow(response_);
//         }));
//     }
//
//     protected processRolesPut(response: HttpResponseBase): Observable<void> {
//         const status = response.status;
//         const responseBlob =
//             response instanceof HttpResponse ? response.body :
//             (<any>response).error instanceof Blob ? (<any>response).error : undefined;
//
//         let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
//         if (status === 200) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             return _observableOf<void>(<any>null);
//             }));
//         } else if (status === 403) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result403: any = null;
//             let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result403 = RemoteServiceErrorResponse.fromJS(resultData403);
//             return throwException("Forbidden", status, _responseText, _headers, result403);
//             }));
//         } else if (status === 401) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result401: any = null;
//             let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result401 = RemoteServiceErrorResponse.fromJS(resultData401);
//             return throwException("Unauthorized", status, _responseText, _headers, result401);
//             }));
//         } else if (status === 400) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result400: any = null;
//             let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result400 = RemoteServiceErrorResponse.fromJS(resultData400);
//             return throwException("Bad Request", status, _responseText, _headers, result400);
//             }));
//         } else if (status === 404) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result404: any = null;
//             let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result404 = RemoteServiceErrorResponse.fromJS(resultData404);
//             return throwException("Not Found", status, _responseText, _headers, result404);
//             }));
//         } else if (status === 501) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result501: any = null;
//             let resultData501 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result501 = RemoteServiceErrorResponse.fromJS(resultData501);
//             return throwException("Server Error", status, _responseText, _headers, result501);
//             }));
//         } else if (status === 500) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result500: any = null;
//             let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result500 = RemoteServiceErrorResponse.fromJS(resultData500);
//             return throwException("Server Error", status, _responseText, _headers, result500);
//             }));
//         } else if (status !== 200 && status !== 204) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             return throwException("An unexpected server error occurred.", status, _responseText, _headers);
//             }));
//         }
//         return _observableOf<void>(<any>null);
//     }
//
//     /**
//      * @return Success
//      */
//     assignableRoles(): Observable<ListResultDto_1OfOfIdentityRoleDtoAndContractsAnd_0AndCulture_neutralAndPublicKeyToken_null> {
//         let url_ = this.baseUrl + "/api/identity/users/assignable-roles";
//         url_ = url_.replace(/[?&]$/, "");
//
//         let options_ : any = {
//             observe: "response",
//             responseType: "blob",
//             headers: new HttpHeaders({
//                 "Accept": "text/plain"
//             })
//         };
//
//         return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
//             return this.processAssignableRoles(response_);
//         })).pipe(_observableCatch((response_: any) => {
//             if (response_ instanceof HttpResponseBase) {
//                 try {
//                     return this.processAssignableRoles(<any>response_);
//                 } catch (e) {
//                     return <Observable<ListResultDto_1OfOfIdentityRoleDtoAndContractsAnd_0AndCulture_neutralAndPublicKeyToken_null>><any>_observableThrow(e);
//                 }
//             } else
//                 return <Observable<ListResultDto_1OfOfIdentityRoleDtoAndContractsAnd_0AndCulture_neutralAndPublicKeyToken_null>><any>_observableThrow(response_);
//         }));
//     }
//
//     protected processAssignableRoles(response: HttpResponseBase): Observable<ListResultDto_1OfOfIdentityRoleDtoAndContractsAnd_0AndCulture_neutralAndPublicKeyToken_null> {
//         const status = response.status;
//         const responseBlob =
//             response instanceof HttpResponse ? response.body :
//             (<any>response).error instanceof Blob ? (<any>response).error : undefined;
//
//         let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
//         if (status === 200) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result200: any = null;
//             let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result200 = ListResultDto_1OfOfIdentityRoleDtoAndContractsAnd_0AndCulture_neutralAndPublicKeyToken_null.fromJS(resultData200);
//             return _observableOf(result200);
//             }));
//         } else if (status === 403) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result403: any = null;
//             let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result403 = RemoteServiceErrorResponse.fromJS(resultData403);
//             return throwException("Forbidden", status, _responseText, _headers, result403);
//             }));
//         } else if (status === 401) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result401: any = null;
//             let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result401 = RemoteServiceErrorResponse.fromJS(resultData401);
//             return throwException("Unauthorized", status, _responseText, _headers, result401);
//             }));
//         } else if (status === 400) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result400: any = null;
//             let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result400 = RemoteServiceErrorResponse.fromJS(resultData400);
//             return throwException("Bad Request", status, _responseText, _headers, result400);
//             }));
//         } else if (status === 404) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result404: any = null;
//             let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result404 = RemoteServiceErrorResponse.fromJS(resultData404);
//             return throwException("Not Found", status, _responseText, _headers, result404);
//             }));
//         } else if (status === 501) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result501: any = null;
//             let resultData501 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result501 = RemoteServiceErrorResponse.fromJS(resultData501);
//             return throwException("Server Error", status, _responseText, _headers, result501);
//             }));
//         } else if (status === 500) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result500: any = null;
//             let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result500 = RemoteServiceErrorResponse.fromJS(resultData500);
//             return throwException("Server Error", status, _responseText, _headers, result500);
//             }));
//         } else if (status !== 200 && status !== 204) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             return throwException("An unexpected server error occurred.", status, _responseText, _headers);
//             }));
//         }
//         return _observableOf<ListResultDto_1OfOfIdentityRoleDtoAndContractsAnd_0AndCulture_neutralAndPublicKeyToken_null>(<any>null);
//     }
//
//     /**
//      * @return Success
//      */
//     availableOrganizationUnits(): Observable<ListResultDto_1OfOfOrganizationUnitWithDetailsDtoAndContractsAnd_0AndCulture_neutralAndPublicKeyToken_null> {
//         let url_ = this.baseUrl + "/api/identity/users/available-organization-units";
//         url_ = url_.replace(/[?&]$/, "");
//
//         let options_ : any = {
//             observe: "response",
//             responseType: "blob",
//             headers: new HttpHeaders({
//                 "Accept": "text/plain"
//             })
//         };
//
//         return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
//             return this.processAvailableOrganizationUnits(response_);
//         })).pipe(_observableCatch((response_: any) => {
//             if (response_ instanceof HttpResponseBase) {
//                 try {
//                     return this.processAvailableOrganizationUnits(<any>response_);
//                 } catch (e) {
//                     return <Observable<ListResultDto_1OfOfOrganizationUnitWithDetailsDtoAndContractsAnd_0AndCulture_neutralAndPublicKeyToken_null>><any>_observableThrow(e);
//                 }
//             } else
//                 return <Observable<ListResultDto_1OfOfOrganizationUnitWithDetailsDtoAndContractsAnd_0AndCulture_neutralAndPublicKeyToken_null>><any>_observableThrow(response_);
//         }));
//     }
//
//     protected processAvailableOrganizationUnits(response: HttpResponseBase): Observable<ListResultDto_1OfOfOrganizationUnitWithDetailsDtoAndContractsAnd_0AndCulture_neutralAndPublicKeyToken_null> {
//         const status = response.status;
//         const responseBlob =
//             response instanceof HttpResponse ? response.body :
//             (<any>response).error instanceof Blob ? (<any>response).error : undefined;
//
//         let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
//         if (status === 200) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result200: any = null;
//             let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result200 = ListResultDto_1OfOfOrganizationUnitWithDetailsDtoAndContractsAnd_0AndCulture_neutralAndPublicKeyToken_null.fromJS(resultData200);
//             return _observableOf(result200);
//             }));
//         } else if (status === 403) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result403: any = null;
//             let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result403 = RemoteServiceErrorResponse.fromJS(resultData403);
//             return throwException("Forbidden", status, _responseText, _headers, result403);
//             }));
//         } else if (status === 401) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result401: any = null;
//             let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result401 = RemoteServiceErrorResponse.fromJS(resultData401);
//             return throwException("Unauthorized", status, _responseText, _headers, result401);
//             }));
//         } else if (status === 400) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result400: any = null;
//             let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result400 = RemoteServiceErrorResponse.fromJS(resultData400);
//             return throwException("Bad Request", status, _responseText, _headers, result400);
//             }));
//         } else if (status === 404) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result404: any = null;
//             let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result404 = RemoteServiceErrorResponse.fromJS(resultData404);
//             return throwException("Not Found", status, _responseText, _headers, result404);
//             }));
//         } else if (status === 501) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result501: any = null;
//             let resultData501 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result501 = RemoteServiceErrorResponse.fromJS(resultData501);
//             return throwException("Server Error", status, _responseText, _headers, result501);
//             }));
//         } else if (status === 500) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result500: any = null;
//             let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result500 = RemoteServiceErrorResponse.fromJS(resultData500);
//             return throwException("Server Error", status, _responseText, _headers, result500);
//             }));
//         } else if (status !== 200 && status !== 204) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             return throwException("An unexpected server error occurred.", status, _responseText, _headers);
//             }));
//         }
//         return _observableOf<ListResultDto_1OfOfOrganizationUnitWithDetailsDtoAndContractsAnd_0AndCulture_neutralAndPublicKeyToken_null>(<any>null);
//     }
//
//     /**
//      * @return Success
//      */
//     allClaimTypes(): Observable<ClaimTypeDto[]> {
//         let url_ = this.baseUrl + "/api/identity/users/all-claim-types";
//         url_ = url_.replace(/[?&]$/, "");
//
//         let options_ : any = {
//             observe: "response",
//             responseType: "blob",
//             headers: new HttpHeaders({
//                 "Accept": "text/plain"
//             })
//         };
//
//         return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
//             return this.processAllClaimTypes(response_);
//         })).pipe(_observableCatch((response_: any) => {
//             if (response_ instanceof HttpResponseBase) {
//                 try {
//                     return this.processAllClaimTypes(<any>response_);
//                 } catch (e) {
//                     return <Observable<ClaimTypeDto[]>><any>_observableThrow(e);
//                 }
//             } else
//                 return <Observable<ClaimTypeDto[]>><any>_observableThrow(response_);
//         }));
//     }
//
//     protected processAllClaimTypes(response: HttpResponseBase): Observable<ClaimTypeDto[]> {
//         const status = response.status;
//         const responseBlob =
//             response instanceof HttpResponse ? response.body :
//             (<any>response).error instanceof Blob ? (<any>response).error : undefined;
//
//         let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
//         if (status === 200) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result200: any = null;
//             let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             if (Array.isArray(resultData200)) {
//                 result200 = [] as any;
//                 for (let item of resultData200)
//                     result200!.push(ClaimTypeDto.fromJS(item));
//             }
//             else {
//                 result200 = <any>null;
//             }
//             return _observableOf(result200);
//             }));
//         } else if (status === 403) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result403: any = null;
//             let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result403 = RemoteServiceErrorResponse.fromJS(resultData403);
//             return throwException("Forbidden", status, _responseText, _headers, result403);
//             }));
//         } else if (status === 401) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result401: any = null;
//             let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result401 = RemoteServiceErrorResponse.fromJS(resultData401);
//             return throwException("Unauthorized", status, _responseText, _headers, result401);
//             }));
//         } else if (status === 400) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result400: any = null;
//             let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result400 = RemoteServiceErrorResponse.fromJS(resultData400);
//             return throwException("Bad Request", status, _responseText, _headers, result400);
//             }));
//         } else if (status === 404) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result404: any = null;
//             let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result404 = RemoteServiceErrorResponse.fromJS(resultData404);
//             return throwException("Not Found", status, _responseText, _headers, result404);
//             }));
//         } else if (status === 501) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result501: any = null;
//             let resultData501 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result501 = RemoteServiceErrorResponse.fromJS(resultData501);
//             return throwException("Server Error", status, _responseText, _headers, result501);
//             }));
//         } else if (status === 500) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result500: any = null;
//             let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result500 = RemoteServiceErrorResponse.fromJS(resultData500);
//             return throwException("Server Error", status, _responseText, _headers, result500);
//             }));
//         } else if (status !== 200 && status !== 204) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             return throwException("An unexpected server error occurred.", status, _responseText, _headers);
//             }));
//         }
//         return _observableOf<ClaimTypeDto[]>(<any>null);
//     }
//
//     /**
//      * @return Success
//      */
//     claimsGet(id: string): Observable<IdentityUserClaimDto[]> {
//         let url_ = this.baseUrl + "/api/identity/users/{id}/claims";
//         if (id === undefined || id === null)
//             throw new Error("The parameter 'id' must be defined.");
//         url_ = url_.replace("{id}", encodeURIComponent("" + id));
//         url_ = url_.replace(/[?&]$/, "");
//
//         let options_ : any = {
//             observe: "response",
//             responseType: "blob",
//             headers: new HttpHeaders({
//                 "Accept": "text/plain"
//             })
//         };
//
//         return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
//             return this.processClaimsGet(response_);
//         })).pipe(_observableCatch((response_: any) => {
//             if (response_ instanceof HttpResponseBase) {
//                 try {
//                     return this.processClaimsGet(<any>response_);
//                 } catch (e) {
//                     return <Observable<IdentityUserClaimDto[]>><any>_observableThrow(e);
//                 }
//             } else
//                 return <Observable<IdentityUserClaimDto[]>><any>_observableThrow(response_);
//         }));
//     }
//
//     protected processClaimsGet(response: HttpResponseBase): Observable<IdentityUserClaimDto[]> {
//         const status = response.status;
//         const responseBlob =
//             response instanceof HttpResponse ? response.body :
//             (<any>response).error instanceof Blob ? (<any>response).error : undefined;
//
//         let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
//         if (status === 200) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result200: any = null;
//             let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             if (Array.isArray(resultData200)) {
//                 result200 = [] as any;
//                 for (let item of resultData200)
//                     result200!.push(IdentityUserClaimDto.fromJS(item));
//             }
//             else {
//                 result200 = <any>null;
//             }
//             return _observableOf(result200);
//             }));
//         } else if (status === 403) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result403: any = null;
//             let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result403 = RemoteServiceErrorResponse.fromJS(resultData403);
//             return throwException("Forbidden", status, _responseText, _headers, result403);
//             }));
//         } else if (status === 401) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result401: any = null;
//             let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result401 = RemoteServiceErrorResponse.fromJS(resultData401);
//             return throwException("Unauthorized", status, _responseText, _headers, result401);
//             }));
//         } else if (status === 400) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result400: any = null;
//             let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result400 = RemoteServiceErrorResponse.fromJS(resultData400);
//             return throwException("Bad Request", status, _responseText, _headers, result400);
//             }));
//         } else if (status === 404) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result404: any = null;
//             let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result404 = RemoteServiceErrorResponse.fromJS(resultData404);
//             return throwException("Not Found", status, _responseText, _headers, result404);
//             }));
//         } else if (status === 501) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result501: any = null;
//             let resultData501 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result501 = RemoteServiceErrorResponse.fromJS(resultData501);
//             return throwException("Server Error", status, _responseText, _headers, result501);
//             }));
//         } else if (status === 500) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result500: any = null;
//             let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result500 = RemoteServiceErrorResponse.fromJS(resultData500);
//             return throwException("Server Error", status, _responseText, _headers, result500);
//             }));
//         } else if (status !== 200 && status !== 204) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             return throwException("An unexpected server error occurred.", status, _responseText, _headers);
//             }));
//         }
//         return _observableOf<IdentityUserClaimDto[]>(<any>null);
//     }
//
//     /**
//      * @param body (optional)
//      * @return Success
//      */
//     claimsPut(id: string, body: IdentityUserClaimDto[] | undefined): Observable<void> {
//         let url_ = this.baseUrl + "/api/identity/users/{id}/claims";
//         if (id === undefined || id === null)
//             throw new Error("The parameter 'id' must be defined.");
//         url_ = url_.replace("{id}", encodeURIComponent("" + id));
//         url_ = url_.replace(/[?&]$/, "");
//
//         const content_ = JSON.stringify(body);
//
//         let options_ : any = {
//             body: content_,
//             observe: "response",
//             responseType: "blob",
//             headers: new HttpHeaders({
//                 "Content-Type": "application/json",
//             })
//         };
//
//         return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
//             return this.processClaimsPut(response_);
//         })).pipe(_observableCatch((response_: any) => {
//             if (response_ instanceof HttpResponseBase) {
//                 try {
//                     return this.processClaimsPut(<any>response_);
//                 } catch (e) {
//                     return <Observable<void>><any>_observableThrow(e);
//                 }
//             } else
//                 return <Observable<void>><any>_observableThrow(response_);
//         }));
//     }
//
//     protected processClaimsPut(response: HttpResponseBase): Observable<void> {
//         const status = response.status;
//         const responseBlob =
//             response instanceof HttpResponse ? response.body :
//             (<any>response).error instanceof Blob ? (<any>response).error : undefined;
//
//         let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
//         if (status === 200) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             return _observableOf<void>(<any>null);
//             }));
//         } else if (status === 403) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result403: any = null;
//             let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result403 = RemoteServiceErrorResponse.fromJS(resultData403);
//             return throwException("Forbidden", status, _responseText, _headers, result403);
//             }));
//         } else if (status === 401) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result401: any = null;
//             let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result401 = RemoteServiceErrorResponse.fromJS(resultData401);
//             return throwException("Unauthorized", status, _responseText, _headers, result401);
//             }));
//         } else if (status === 400) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result400: any = null;
//             let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result400 = RemoteServiceErrorResponse.fromJS(resultData400);
//             return throwException("Bad Request", status, _responseText, _headers, result400);
//             }));
//         } else if (status === 404) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result404: any = null;
//             let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result404 = RemoteServiceErrorResponse.fromJS(resultData404);
//             return throwException("Not Found", status, _responseText, _headers, result404);
//             }));
//         } else if (status === 501) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result501: any = null;
//             let resultData501 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result501 = RemoteServiceErrorResponse.fromJS(resultData501);
//             return throwException("Server Error", status, _responseText, _headers, result501);
//             }));
//         } else if (status === 500) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result500: any = null;
//             let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result500 = RemoteServiceErrorResponse.fromJS(resultData500);
//             return throwException("Server Error", status, _responseText, _headers, result500);
//             }));
//         } else if (status !== 200 && status !== 204) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             return throwException("An unexpected server error occurred.", status, _responseText, _headers);
//             }));
//         }
//         return _observableOf<void>(<any>null);
//     }
//
//     /**
//      * @return Success
//      */
//     organizationUnits(id: string): Observable<OrganizationUnitDto[]> {
//         let url_ = this.baseUrl + "/api/identity/users/{id}/organization-units";
//         if (id === undefined || id === null)
//             throw new Error("The parameter 'id' must be defined.");
//         url_ = url_.replace("{id}", encodeURIComponent("" + id));
//         url_ = url_.replace(/[?&]$/, "");
//
//         let options_ : any = {
//             observe: "response",
//             responseType: "blob",
//             headers: new HttpHeaders({
//                 "Accept": "text/plain"
//             })
//         };
//
//         return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
//             return this.processOrganizationUnits(response_);
//         })).pipe(_observableCatch((response_: any) => {
//             if (response_ instanceof HttpResponseBase) {
//                 try {
//                     return this.processOrganizationUnits(<any>response_);
//                 } catch (e) {
//                     return <Observable<OrganizationUnitDto[]>><any>_observableThrow(e);
//                 }
//             } else
//                 return <Observable<OrganizationUnitDto[]>><any>_observableThrow(response_);
//         }));
//     }
//
//     protected processOrganizationUnits(response: HttpResponseBase): Observable<OrganizationUnitDto[]> {
//         const status = response.status;
//         const responseBlob =
//             response instanceof HttpResponse ? response.body :
//             (<any>response).error instanceof Blob ? (<any>response).error : undefined;
//
//         let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
//         if (status === 200) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result200: any = null;
//             let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             if (Array.isArray(resultData200)) {
//                 result200 = [] as any;
//                 for (let item of resultData200)
//                     result200!.push(OrganizationUnitDto.fromJS(item));
//             }
//             else {
//                 result200 = <any>null;
//             }
//             return _observableOf(result200);
//             }));
//         } else if (status === 403) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result403: any = null;
//             let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result403 = RemoteServiceErrorResponse.fromJS(resultData403);
//             return throwException("Forbidden", status, _responseText, _headers, result403);
//             }));
//         } else if (status === 401) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result401: any = null;
//             let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result401 = RemoteServiceErrorResponse.fromJS(resultData401);
//             return throwException("Unauthorized", status, _responseText, _headers, result401);
//             }));
//         } else if (status === 400) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result400: any = null;
//             let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result400 = RemoteServiceErrorResponse.fromJS(resultData400);
//             return throwException("Bad Request", status, _responseText, _headers, result400);
//             }));
//         } else if (status === 404) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result404: any = null;
//             let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result404 = RemoteServiceErrorResponse.fromJS(resultData404);
//             return throwException("Not Found", status, _responseText, _headers, result404);
//             }));
//         } else if (status === 501) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result501: any = null;
//             let resultData501 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result501 = RemoteServiceErrorResponse.fromJS(resultData501);
//             return throwException("Server Error", status, _responseText, _headers, result501);
//             }));
//         } else if (status === 500) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result500: any = null;
//             let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result500 = RemoteServiceErrorResponse.fromJS(resultData500);
//             return throwException("Server Error", status, _responseText, _headers, result500);
//             }));
//         } else if (status !== 200 && status !== 204) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             return throwException("An unexpected server error occurred.", status, _responseText, _headers);
//             }));
//         }
//         return _observableOf<OrganizationUnitDto[]>(<any>null);
//     }
//
//     /**
//      * @return Success
//      */
//     lock(id: string, lockoutDuration: number): Observable<void> {
//         let url_ = this.baseUrl + "/api/identity/users/{id}/lock/{lockoutDuration}";
//         if (id === undefined || id === null)
//             throw new Error("The parameter 'id' must be defined.");
//         url_ = url_.replace("{id}", encodeURIComponent("" + id));
//         if (lockoutDuration === undefined || lockoutDuration === null)
//             throw new Error("The parameter 'lockoutDuration' must be defined.");
//         url_ = url_.replace("{lockoutDuration}", encodeURIComponent("" + lockoutDuration));
//         url_ = url_.replace(/[?&]$/, "");
//
//         let options_ : any = {
//             observe: "response",
//             responseType: "blob",
//             headers: new HttpHeaders({
//             })
//         };
//
//         return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
//             return this.processLock(response_);
//         })).pipe(_observableCatch((response_: any) => {
//             if (response_ instanceof HttpResponseBase) {
//                 try {
//                     return this.processLock(<any>response_);
//                 } catch (e) {
//                     return <Observable<void>><any>_observableThrow(e);
//                 }
//             } else
//                 return <Observable<void>><any>_observableThrow(response_);
//         }));
//     }
//
//     protected processLock(response: HttpResponseBase): Observable<void> {
//         const status = response.status;
//         const responseBlob =
//             response instanceof HttpResponse ? response.body :
//             (<any>response).error instanceof Blob ? (<any>response).error : undefined;
//
//         let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
//         if (status === 200) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             return _observableOf<void>(<any>null);
//             }));
//         } else if (status === 403) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result403: any = null;
//             let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result403 = RemoteServiceErrorResponse.fromJS(resultData403);
//             return throwException("Forbidden", status, _responseText, _headers, result403);
//             }));
//         } else if (status === 401) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result401: any = null;
//             let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result401 = RemoteServiceErrorResponse.fromJS(resultData401);
//             return throwException("Unauthorized", status, _responseText, _headers, result401);
//             }));
//         } else if (status === 400) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result400: any = null;
//             let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result400 = RemoteServiceErrorResponse.fromJS(resultData400);
//             return throwException("Bad Request", status, _responseText, _headers, result400);
//             }));
//         } else if (status === 404) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result404: any = null;
//             let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result404 = RemoteServiceErrorResponse.fromJS(resultData404);
//             return throwException("Not Found", status, _responseText, _headers, result404);
//             }));
//         } else if (status === 501) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result501: any = null;
//             let resultData501 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result501 = RemoteServiceErrorResponse.fromJS(resultData501);
//             return throwException("Server Error", status, _responseText, _headers, result501);
//             }));
//         } else if (status === 500) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result500: any = null;
//             let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result500 = RemoteServiceErrorResponse.fromJS(resultData500);
//             return throwException("Server Error", status, _responseText, _headers, result500);
//             }));
//         } else if (status !== 200 && status !== 204) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             return throwException("An unexpected server error occurred.", status, _responseText, _headers);
//             }));
//         }
//         return _observableOf<void>(<any>null);
//     }
//
//     /**
//      * @return Success
//      */
//     unlock(id: string): Observable<void> {
//         let url_ = this.baseUrl + "/api/identity/users/{id}/unlock";
//         if (id === undefined || id === null)
//             throw new Error("The parameter 'id' must be defined.");
//         url_ = url_.replace("{id}", encodeURIComponent("" + id));
//         url_ = url_.replace(/[?&]$/, "");
//
//         let options_ : any = {
//             observe: "response",
//             responseType: "blob",
//             headers: new HttpHeaders({
//             })
//         };
//
//         return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
//             return this.processUnlock(response_);
//         })).pipe(_observableCatch((response_: any) => {
//             if (response_ instanceof HttpResponseBase) {
//                 try {
//                     return this.processUnlock(<any>response_);
//                 } catch (e) {
//                     return <Observable<void>><any>_observableThrow(e);
//                 }
//             } else
//                 return <Observable<void>><any>_observableThrow(response_);
//         }));
//     }
//
//     protected processUnlock(response: HttpResponseBase): Observable<void> {
//         const status = response.status;
//         const responseBlob =
//             response instanceof HttpResponse ? response.body :
//             (<any>response).error instanceof Blob ? (<any>response).error : undefined;
//
//         let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
//         if (status === 200) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             return _observableOf<void>(<any>null);
//             }));
//         } else if (status === 403) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result403: any = null;
//             let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result403 = RemoteServiceErrorResponse.fromJS(resultData403);
//             return throwException("Forbidden", status, _responseText, _headers, result403);
//             }));
//         } else if (status === 401) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result401: any = null;
//             let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result401 = RemoteServiceErrorResponse.fromJS(resultData401);
//             return throwException("Unauthorized", status, _responseText, _headers, result401);
//             }));
//         } else if (status === 400) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result400: any = null;
//             let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result400 = RemoteServiceErrorResponse.fromJS(resultData400);
//             return throwException("Bad Request", status, _responseText, _headers, result400);
//             }));
//         } else if (status === 404) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result404: any = null;
//             let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result404 = RemoteServiceErrorResponse.fromJS(resultData404);
//             return throwException("Not Found", status, _responseText, _headers, result404);
//             }));
//         } else if (status === 501) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result501: any = null;
//             let resultData501 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result501 = RemoteServiceErrorResponse.fromJS(resultData501);
//             return throwException("Server Error", status, _responseText, _headers, result501);
//             }));
//         } else if (status === 500) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result500: any = null;
//             let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result500 = RemoteServiceErrorResponse.fromJS(resultData500);
//             return throwException("Server Error", status, _responseText, _headers, result500);
//             }));
//         } else if (status !== 200 && status !== 204) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             return throwException("An unexpected server error occurred.", status, _responseText, _headers);
//             }));
//         }
//         return _observableOf<void>(<any>null);
//     }
//
//     /**
//      * @return Success
//      */
//     byUsername(username: string): Observable<IdentityUserDto> {
//         let url_ = this.baseUrl + "/api/identity/users/by-username/{username}";
//         if (username === undefined || username === null)
//             throw new Error("The parameter 'username' must be defined.");
//         url_ = url_.replace("{username}", encodeURIComponent("" + username));
//         url_ = url_.replace(/[?&]$/, "");
//
//         let options_ : any = {
//             observe: "response",
//             responseType: "blob",
//             headers: new HttpHeaders({
//                 "Accept": "text/plain"
//             })
//         };
//
//         return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
//             return this.processByUsername(response_);
//         })).pipe(_observableCatch((response_: any) => {
//             if (response_ instanceof HttpResponseBase) {
//                 try {
//                     return this.processByUsername(<any>response_);
//                 } catch (e) {
//                     return <Observable<IdentityUserDto>><any>_observableThrow(e);
//                 }
//             } else
//                 return <Observable<IdentityUserDto>><any>_observableThrow(response_);
//         }));
//     }
//
//     protected processByUsername(response: HttpResponseBase): Observable<IdentityUserDto> {
//         const status = response.status;
//         const responseBlob =
//             response instanceof HttpResponse ? response.body :
//             (<any>response).error instanceof Blob ? (<any>response).error : undefined;
//
//         let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
//         if (status === 200) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result200: any = null;
//             let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result200 = IdentityUserDto.fromJS(resultData200);
//             return _observableOf(result200);
//             }));
//         } else if (status === 403) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result403: any = null;
//             let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result403 = RemoteServiceErrorResponse.fromJS(resultData403);
//             return throwException("Forbidden", status, _responseText, _headers, result403);
//             }));
//         } else if (status === 401) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result401: any = null;
//             let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result401 = RemoteServiceErrorResponse.fromJS(resultData401);
//             return throwException("Unauthorized", status, _responseText, _headers, result401);
//             }));
//         } else if (status === 400) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result400: any = null;
//             let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result400 = RemoteServiceErrorResponse.fromJS(resultData400);
//             return throwException("Bad Request", status, _responseText, _headers, result400);
//             }));
//         } else if (status === 404) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result404: any = null;
//             let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result404 = RemoteServiceErrorResponse.fromJS(resultData404);
//             return throwException("Not Found", status, _responseText, _headers, result404);
//             }));
//         } else if (status === 501) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result501: any = null;
//             let resultData501 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result501 = RemoteServiceErrorResponse.fromJS(resultData501);
//             return throwException("Server Error", status, _responseText, _headers, result501);
//             }));
//         } else if (status === 500) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result500: any = null;
//             let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result500 = RemoteServiceErrorResponse.fromJS(resultData500);
//             return throwException("Server Error", status, _responseText, _headers, result500);
//             }));
//         } else if (status !== 200 && status !== 204) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             return throwException("An unexpected server error occurred.", status, _responseText, _headers);
//             }));
//         }
//         return _observableOf<IdentityUserDto>(<any>null);
//     }
//
//     /**
//      * @return Success
//      */
//     byEmail(email: string): Observable<IdentityUserDto> {
//         let url_ = this.baseUrl + "/api/identity/users/by-email/{email}";
//         if (email === undefined || email === null)
//             throw new Error("The parameter 'email' must be defined.");
//         url_ = url_.replace("{email}", encodeURIComponent("" + email));
//         url_ = url_.replace(/[?&]$/, "");
//
//         let options_ : any = {
//             observe: "response",
//             responseType: "blob",
//             headers: new HttpHeaders({
//                 "Accept": "text/plain"
//             })
//         };
//
//         return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
//             return this.processByEmail(response_);
//         })).pipe(_observableCatch((response_: any) => {
//             if (response_ instanceof HttpResponseBase) {
//                 try {
//                     return this.processByEmail(<any>response_);
//                 } catch (e) {
//                     return <Observable<IdentityUserDto>><any>_observableThrow(e);
//                 }
//             } else
//                 return <Observable<IdentityUserDto>><any>_observableThrow(response_);
//         }));
//     }
//
//     protected processByEmail(response: HttpResponseBase): Observable<IdentityUserDto> {
//         const status = response.status;
//         const responseBlob =
//             response instanceof HttpResponse ? response.body :
//             (<any>response).error instanceof Blob ? (<any>response).error : undefined;
//
//         let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
//         if (status === 200) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result200: any = null;
//             let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result200 = IdentityUserDto.fromJS(resultData200);
//             return _observableOf(result200);
//             }));
//         } else if (status === 403) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result403: any = null;
//             let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result403 = RemoteServiceErrorResponse.fromJS(resultData403);
//             return throwException("Forbidden", status, _responseText, _headers, result403);
//             }));
//         } else if (status === 401) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result401: any = null;
//             let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result401 = RemoteServiceErrorResponse.fromJS(resultData401);
//             return throwException("Unauthorized", status, _responseText, _headers, result401);
//             }));
//         } else if (status === 400) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result400: any = null;
//             let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result400 = RemoteServiceErrorResponse.fromJS(resultData400);
//             return throwException("Bad Request", status, _responseText, _headers, result400);
//             }));
//         } else if (status === 404) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result404: any = null;
//             let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result404 = RemoteServiceErrorResponse.fromJS(resultData404);
//             return throwException("Not Found", status, _responseText, _headers, result404);
//             }));
//         } else if (status === 501) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result501: any = null;
//             let resultData501 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result501 = RemoteServiceErrorResponse.fromJS(resultData501);
//             return throwException("Server Error", status, _responseText, _headers, result501);
//             }));
//         } else if (status === 500) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result500: any = null;
//             let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result500 = RemoteServiceErrorResponse.fromJS(resultData500);
//             return throwException("Server Error", status, _responseText, _headers, result500);
//             }));
//         } else if (status !== 200 && status !== 204) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             return throwException("An unexpected server error occurred.", status, _responseText, _headers);
//             }));
//         }
//         return _observableOf<IdentityUserDto>(<any>null);
//     }
//
//     /**
//      * @return Success
//      */
//     twoFactorEnabled(id: string): Observable<boolean> {
//         let url_ = this.baseUrl + "/api/identity/users/{id}/two-factor-enabled";
//         if (id === undefined || id === null)
//             throw new Error("The parameter 'id' must be defined.");
//         url_ = url_.replace("{id}", encodeURIComponent("" + id));
//         url_ = url_.replace(/[?&]$/, "");
//
//         let options_ : any = {
//             observe: "response",
//             responseType: "blob",
//             headers: new HttpHeaders({
//                 "Accept": "text/plain"
//             })
//         };
//
//         return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
//             return this.processTwoFactorEnabled(response_);
//         })).pipe(_observableCatch((response_: any) => {
//             if (response_ instanceof HttpResponseBase) {
//                 try {
//                     return this.processTwoFactorEnabled(<any>response_);
//                 } catch (e) {
//                     return <Observable<boolean>><any>_observableThrow(e);
//                 }
//             } else
//                 return <Observable<boolean>><any>_observableThrow(response_);
//         }));
//     }
//
//     protected processTwoFactorEnabled(response: HttpResponseBase): Observable<boolean> {
//         const status = response.status;
//         const responseBlob =
//             response instanceof HttpResponse ? response.body :
//             (<any>response).error instanceof Blob ? (<any>response).error : undefined;
//
//         let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
//         if (status === 200) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result200: any = null;
//             let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result200 = resultData200 !== undefined ? resultData200 : <any>null;
//             return _observableOf(result200);
//             }));
//         } else if (status === 403) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result403: any = null;
//             let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result403 = RemoteServiceErrorResponse.fromJS(resultData403);
//             return throwException("Forbidden", status, _responseText, _headers, result403);
//             }));
//         } else if (status === 401) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result401: any = null;
//             let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result401 = RemoteServiceErrorResponse.fromJS(resultData401);
//             return throwException("Unauthorized", status, _responseText, _headers, result401);
//             }));
//         } else if (status === 400) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result400: any = null;
//             let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result400 = RemoteServiceErrorResponse.fromJS(resultData400);
//             return throwException("Bad Request", status, _responseText, _headers, result400);
//             }));
//         } else if (status === 404) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result404: any = null;
//             let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result404 = RemoteServiceErrorResponse.fromJS(resultData404);
//             return throwException("Not Found", status, _responseText, _headers, result404);
//             }));
//         } else if (status === 501) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result501: any = null;
//             let resultData501 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result501 = RemoteServiceErrorResponse.fromJS(resultData501);
//             return throwException("Server Error", status, _responseText, _headers, result501);
//             }));
//         } else if (status === 500) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result500: any = null;
//             let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result500 = RemoteServiceErrorResponse.fromJS(resultData500);
//             return throwException("Server Error", status, _responseText, _headers, result500);
//             }));
//         } else if (status !== 200 && status !== 204) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             return throwException("An unexpected server error occurred.", status, _responseText, _headers);
//             }));
//         }
//         return _observableOf<boolean>(<any>null);
//     }
//
//     /**
//      * @return Success
//      */
//     twoFactor(id: string, enabled: boolean): Observable<void> {
//         let url_ = this.baseUrl + "/api/identity/users/{id}/two-factor/{enabled}";
//         if (id === undefined || id === null)
//             throw new Error("The parameter 'id' must be defined.");
//         url_ = url_.replace("{id}", encodeURIComponent("" + id));
//         if (enabled === undefined || enabled === null)
//             throw new Error("The parameter 'enabled' must be defined.");
//         url_ = url_.replace("{enabled}", encodeURIComponent("" + enabled));
//         url_ = url_.replace(/[?&]$/, "");
//
//         let options_ : any = {
//             observe: "response",
//             responseType: "blob",
//             headers: new HttpHeaders({
//             })
//         };
//
//         return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
//             return this.processTwoFactor(response_);
//         })).pipe(_observableCatch((response_: any) => {
//             if (response_ instanceof HttpResponseBase) {
//                 try {
//                     return this.processTwoFactor(<any>response_);
//                 } catch (e) {
//                     return <Observable<void>><any>_observableThrow(e);
//                 }
//             } else
//                 return <Observable<void>><any>_observableThrow(response_);
//         }));
//     }
//
//     protected processTwoFactor(response: HttpResponseBase): Observable<void> {
//         const status = response.status;
//         const responseBlob =
//             response instanceof HttpResponse ? response.body :
//             (<any>response).error instanceof Blob ? (<any>response).error : undefined;
//
//         let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
//         if (status === 200) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             return _observableOf<void>(<any>null);
//             }));
//         } else if (status === 403) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result403: any = null;
//             let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result403 = RemoteServiceErrorResponse.fromJS(resultData403);
//             return throwException("Forbidden", status, _responseText, _headers, result403);
//             }));
//         } else if (status === 401) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result401: any = null;
//             let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result401 = RemoteServiceErrorResponse.fromJS(resultData401);
//             return throwException("Unauthorized", status, _responseText, _headers, result401);
//             }));
//         } else if (status === 400) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result400: any = null;
//             let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result400 = RemoteServiceErrorResponse.fromJS(resultData400);
//             return throwException("Bad Request", status, _responseText, _headers, result400);
//             }));
//         } else if (status === 404) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result404: any = null;
//             let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result404 = RemoteServiceErrorResponse.fromJS(resultData404);
//             return throwException("Not Found", status, _responseText, _headers, result404);
//             }));
//         } else if (status === 501) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result501: any = null;
//             let resultData501 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result501 = RemoteServiceErrorResponse.fromJS(resultData501);
//             return throwException("Server Error", status, _responseText, _headers, result501);
//             }));
//         } else if (status === 500) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result500: any = null;
//             let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result500 = RemoteServiceErrorResponse.fromJS(resultData500);
//             return throwException("Server Error", status, _responseText, _headers, result500);
//             }));
//         } else if (status !== 200 && status !== 204) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             return throwException("An unexpected server error occurred.", status, _responseText, _headers);
//             }));
//         }
//         return _observableOf<void>(<any>null);
//     }
//
//     /**
//      * @param body (optional)
//      * @return Success
//      */
//     changePassword(id: string, body: IdentityUserUpdatePasswordInput | undefined): Observable<void> {
//         let url_ = this.baseUrl + "/api/identity/users/{id}/change-password";
//         if (id === undefined || id === null)
//             throw new Error("The parameter 'id' must be defined.");
//         url_ = url_.replace("{id}", encodeURIComponent("" + id));
//         url_ = url_.replace(/[?&]$/, "");
//
//         const content_ = JSON.stringify(body);
//
//         let options_ : any = {
//             body: content_,
//             observe: "response",
//             responseType: "blob",
//             headers: new HttpHeaders({
//                 "Content-Type": "application/json",
//             })
//         };
//
//         return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
//             return this.processChangePassword(response_);
//         })).pipe(_observableCatch((response_: any) => {
//             if (response_ instanceof HttpResponseBase) {
//                 try {
//                     return this.processChangePassword(<any>response_);
//                 } catch (e) {
//                     return <Observable<void>><any>_observableThrow(e);
//                 }
//             } else
//                 return <Observable<void>><any>_observableThrow(response_);
//         }));
//     }
//
//     protected processChangePassword(response: HttpResponseBase): Observable<void> {
//         const status = response.status;
//         const responseBlob =
//             response instanceof HttpResponse ? response.body :
//             (<any>response).error instanceof Blob ? (<any>response).error : undefined;
//
//         let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
//         if (status === 200) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             return _observableOf<void>(<any>null);
//             }));
//         } else if (status === 403) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result403: any = null;
//             let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result403 = RemoteServiceErrorResponse.fromJS(resultData403);
//             return throwException("Forbidden", status, _responseText, _headers, result403);
//             }));
//         } else if (status === 401) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result401: any = null;
//             let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result401 = RemoteServiceErrorResponse.fromJS(resultData401);
//             return throwException("Unauthorized", status, _responseText, _headers, result401);
//             }));
//         } else if (status === 400) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result400: any = null;
//             let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result400 = RemoteServiceErrorResponse.fromJS(resultData400);
//             return throwException("Bad Request", status, _responseText, _headers, result400);
//             }));
//         } else if (status === 404) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result404: any = null;
//             let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result404 = RemoteServiceErrorResponse.fromJS(resultData404);
//             return throwException("Not Found", status, _responseText, _headers, result404);
//             }));
//         } else if (status === 501) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result501: any = null;
//             let resultData501 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result501 = RemoteServiceErrorResponse.fromJS(resultData501);
//             return throwException("Server Error", status, _responseText, _headers, result501);
//             }));
//         } else if (status === 500) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result500: any = null;
//             let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result500 = RemoteServiceErrorResponse.fromJS(resultData500);
//             return throwException("Server Error", status, _responseText, _headers, result500);
//             }));
//         } else if (status !== 200 && status !== 204) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             return throwException("An unexpected server error occurred.", status, _responseText, _headers);
//             }));
//         }
//         return _observableOf<void>(<any>null);
//     }
//
//     /**
//      * @return Success
//      */
//     lookup(id: string): Observable<UserData> {
//         let url_ = this.baseUrl + "/api/identity/users/lookup/{id}";
//         if (id === undefined || id === null)
//             throw new Error("The parameter 'id' must be defined.");
//         url_ = url_.replace("{id}", encodeURIComponent("" + id));
//         url_ = url_.replace(/[?&]$/, "");
//
//         let options_ : any = {
//             observe: "response",
//             responseType: "blob",
//             headers: new HttpHeaders({
//                 "Accept": "text/plain"
//             })
//         };
//
//         return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
//             return this.processLookup(response_);
//         })).pipe(_observableCatch((response_: any) => {
//             if (response_ instanceof HttpResponseBase) {
//                 try {
//                     return this.processLookup(<any>response_);
//                 } catch (e) {
//                     return <Observable<UserData>><any>_observableThrow(e);
//                 }
//             } else
//                 return <Observable<UserData>><any>_observableThrow(response_);
//         }));
//     }
//
//     protected processLookup(response: HttpResponseBase): Observable<UserData> {
//         const status = response.status;
//         const responseBlob =
//             response instanceof HttpResponse ? response.body :
//             (<any>response).error instanceof Blob ? (<any>response).error : undefined;
//
//         let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
//         if (status === 200) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result200: any = null;
//             let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result200 = UserData.fromJS(resultData200);
//             return _observableOf(result200);
//             }));
//         } else if (status === 403) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result403: any = null;
//             let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result403 = RemoteServiceErrorResponse.fromJS(resultData403);
//             return throwException("Forbidden", status, _responseText, _headers, result403);
//             }));
//         } else if (status === 401) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result401: any = null;
//             let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result401 = RemoteServiceErrorResponse.fromJS(resultData401);
//             return throwException("Unauthorized", status, _responseText, _headers, result401);
//             }));
//         } else if (status === 400) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result400: any = null;
//             let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result400 = RemoteServiceErrorResponse.fromJS(resultData400);
//             return throwException("Bad Request", status, _responseText, _headers, result400);
//             }));
//         } else if (status === 404) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result404: any = null;
//             let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result404 = RemoteServiceErrorResponse.fromJS(resultData404);
//             return throwException("Not Found", status, _responseText, _headers, result404);
//             }));
//         } else if (status === 501) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result501: any = null;
//             let resultData501 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result501 = RemoteServiceErrorResponse.fromJS(resultData501);
//             return throwException("Server Error", status, _responseText, _headers, result501);
//             }));
//         } else if (status === 500) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result500: any = null;
//             let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result500 = RemoteServiceErrorResponse.fromJS(resultData500);
//             return throwException("Server Error", status, _responseText, _headers, result500);
//             }));
//         } else if (status !== 200 && status !== 204) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             return throwException("An unexpected server error occurred.", status, _responseText, _headers);
//             }));
//         }
//         return _observableOf<UserData>(<any>null);
//     }
// }
//
// @Injectable({providedIn: 'root'})
// export class LookupServiceProxy {
//     private http: HttpClient;
//     private baseUrl: string;
//     protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;
//
//     constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
//         this.http = http;
//         this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
//     }
//
//     /**
//      * @return Success
//      */
//     byUsername(userName: string): Observable<UserData> {
//         let url_ = this.baseUrl + "/api/identity/users/lookup/by-username/{userName}";
//         if (userName === undefined || userName === null)
//             throw new Error("The parameter 'userName' must be defined.");
//         url_ = url_.replace("{userName}", encodeURIComponent("" + userName));
//         url_ = url_.replace(/[?&]$/, "");
//
//         let options_ : any = {
//             observe: "response",
//             responseType: "blob",
//             headers: new HttpHeaders({
//                 "Accept": "text/plain"
//             })
//         };
//
//         return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
//             return this.processByUsername(response_);
//         })).pipe(_observableCatch((response_: any) => {
//             if (response_ instanceof HttpResponseBase) {
//                 try {
//                     return this.processByUsername(<any>response_);
//                 } catch (e) {
//                     return <Observable<UserData>><any>_observableThrow(e);
//                 }
//             } else
//                 return <Observable<UserData>><any>_observableThrow(response_);
//         }));
//     }
//
//     protected processByUsername(response: HttpResponseBase): Observable<UserData> {
//         const status = response.status;
//         const responseBlob =
//             response instanceof HttpResponse ? response.body :
//             (<any>response).error instanceof Blob ? (<any>response).error : undefined;
//
//         let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
//         if (status === 200) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result200: any = null;
//             let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result200 = UserData.fromJS(resultData200);
//             return _observableOf(result200);
//             }));
//         } else if (status === 403) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result403: any = null;
//             let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result403 = RemoteServiceErrorResponse.fromJS(resultData403);
//             return throwException("Forbidden", status, _responseText, _headers, result403);
//             }));
//         } else if (status === 401) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result401: any = null;
//             let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result401 = RemoteServiceErrorResponse.fromJS(resultData401);
//             return throwException("Unauthorized", status, _responseText, _headers, result401);
//             }));
//         } else if (status === 400) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result400: any = null;
//             let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result400 = RemoteServiceErrorResponse.fromJS(resultData400);
//             return throwException("Bad Request", status, _responseText, _headers, result400);
//             }));
//         } else if (status === 404) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result404: any = null;
//             let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result404 = RemoteServiceErrorResponse.fromJS(resultData404);
//             return throwException("Not Found", status, _responseText, _headers, result404);
//             }));
//         } else if (status === 501) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result501: any = null;
//             let resultData501 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result501 = RemoteServiceErrorResponse.fromJS(resultData501);
//             return throwException("Server Error", status, _responseText, _headers, result501);
//             }));
//         } else if (status === 500) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result500: any = null;
//             let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result500 = RemoteServiceErrorResponse.fromJS(resultData500);
//             return throwException("Server Error", status, _responseText, _headers, result500);
//             }));
//         } else if (status !== 200 && status !== 204) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             return throwException("An unexpected server error occurred.", status, _responseText, _headers);
//             }));
//         }
//         return _observableOf<UserData>(<any>null);
//     }
//
//     /**
//      * @param sorting (optional)
//      * @param filter (optional)
//      * @param skipCount (optional)
//      * @param maxResultCount (optional)
//      * @return Success
//      */
//     search(sorting: string | undefined, filter: string | undefined, skipCount: number | undefined, maxResultCount: number | undefined): Observable<ListResultDto_1OfOfUserDataAndAbstractionsAnd_0AndCulture_neutralAndPublicKeyToken_null> {
//         let url_ = this.baseUrl + "/api/identity/users/lookup/search?";
//         if (sorting === null)
//             throw new Error("The parameter 'sorting' cannot be null.");
//         else if (sorting !== undefined)
//             url_ += "Sorting=" + encodeURIComponent("" + sorting) + "&";
//         if (filter === null)
//             throw new Error("The parameter 'filter' cannot be null.");
//         else if (filter !== undefined)
//             url_ += "Filter=" + encodeURIComponent("" + filter) + "&";
//         if (skipCount === null)
//             throw new Error("The parameter 'skipCount' cannot be null.");
//         else if (skipCount !== undefined)
//             url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&";
//         if (maxResultCount === null)
//             throw new Error("The parameter 'maxResultCount' cannot be null.");
//         else if (maxResultCount !== undefined)
//             url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&";
//         url_ = url_.replace(/[?&]$/, "");
//
//         let options_ : any = {
//             observe: "response",
//             responseType: "blob",
//             headers: new HttpHeaders({
//                 "Accept": "text/plain"
//             })
//         };
//
//         return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
//             return this.processSearch(response_);
//         })).pipe(_observableCatch((response_: any) => {
//             if (response_ instanceof HttpResponseBase) {
//                 try {
//                     return this.processSearch(<any>response_);
//                 } catch (e) {
//                     return <Observable<ListResultDto_1OfOfUserDataAndAbstractionsAnd_0AndCulture_neutralAndPublicKeyToken_null>><any>_observableThrow(e);
//                 }
//             } else
//                 return <Observable<ListResultDto_1OfOfUserDataAndAbstractionsAnd_0AndCulture_neutralAndPublicKeyToken_null>><any>_observableThrow(response_);
//         }));
//     }
//
//     protected processSearch(response: HttpResponseBase): Observable<ListResultDto_1OfOfUserDataAndAbstractionsAnd_0AndCulture_neutralAndPublicKeyToken_null> {
//         const status = response.status;
//         const responseBlob =
//             response instanceof HttpResponse ? response.body :
//             (<any>response).error instanceof Blob ? (<any>response).error : undefined;
//
//         let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
//         if (status === 200) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result200: any = null;
//             let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result200 = ListResultDto_1OfOfUserDataAndAbstractionsAnd_0AndCulture_neutralAndPublicKeyToken_null.fromJS(resultData200);
//             return _observableOf(result200);
//             }));
//         } else if (status === 403) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result403: any = null;
//             let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result403 = RemoteServiceErrorResponse.fromJS(resultData403);
//             return throwException("Forbidden", status, _responseText, _headers, result403);
//             }));
//         } else if (status === 401) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result401: any = null;
//             let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result401 = RemoteServiceErrorResponse.fromJS(resultData401);
//             return throwException("Unauthorized", status, _responseText, _headers, result401);
//             }));
//         } else if (status === 400) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result400: any = null;
//             let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result400 = RemoteServiceErrorResponse.fromJS(resultData400);
//             return throwException("Bad Request", status, _responseText, _headers, result400);
//             }));
//         } else if (status === 404) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result404: any = null;
//             let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result404 = RemoteServiceErrorResponse.fromJS(resultData404);
//             return throwException("Not Found", status, _responseText, _headers, result404);
//             }));
//         } else if (status === 501) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result501: any = null;
//             let resultData501 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result501 = RemoteServiceErrorResponse.fromJS(resultData501);
//             return throwException("Server Error", status, _responseText, _headers, result501);
//             }));
//         } else if (status === 500) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result500: any = null;
//             let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result500 = RemoteServiceErrorResponse.fromJS(resultData500);
//             return throwException("Server Error", status, _responseText, _headers, result500);
//             }));
//         } else if (status !== 200 && status !== 204) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             return throwException("An unexpected server error occurred.", status, _responseText, _headers);
//             }));
//         }
//         return _observableOf<ListResultDto_1OfOfUserDataAndAbstractionsAnd_0AndCulture_neutralAndPublicKeyToken_null>(<any>null);
//     }
//
//     /**
//      * @param filter (optional)
//      * @return Success
//      */
//     count(filter: string | undefined): Observable<number> {
//         let url_ = this.baseUrl + "/api/identity/users/lookup/count?";
//         if (filter === null)
//             throw new Error("The parameter 'filter' cannot be null.");
//         else if (filter !== undefined)
//             url_ += "Filter=" + encodeURIComponent("" + filter) + "&";
//         url_ = url_.replace(/[?&]$/, "");
//
//         let options_ : any = {
//             observe: "response",
//             responseType: "blob",
//             headers: new HttpHeaders({
//                 "Accept": "text/plain"
//             })
//         };
//
//         return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
//             return this.processCount(response_);
//         })).pipe(_observableCatch((response_: any) => {
//             if (response_ instanceof HttpResponseBase) {
//                 try {
//                     return this.processCount(<any>response_);
//                 } catch (e) {
//                     return <Observable<number>><any>_observableThrow(e);
//                 }
//             } else
//                 return <Observable<number>><any>_observableThrow(response_);
//         }));
//     }
//
//     protected processCount(response: HttpResponseBase): Observable<number> {
//         const status = response.status;
//         const responseBlob =
//             response instanceof HttpResponse ? response.body :
//             (<any>response).error instanceof Blob ? (<any>response).error : undefined;
//
//         let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
//         if (status === 200) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result200: any = null;
//             let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result200 = resultData200 !== undefined ? resultData200 : <any>null;
//             return _observableOf(result200);
//             }));
//         } else if (status === 403) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result403: any = null;
//             let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result403 = RemoteServiceErrorResponse.fromJS(resultData403);
//             return throwException("Forbidden", status, _responseText, _headers, result403);
//             }));
//         } else if (status === 401) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result401: any = null;
//             let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result401 = RemoteServiceErrorResponse.fromJS(resultData401);
//             return throwException("Unauthorized", status, _responseText, _headers, result401);
//             }));
//         } else if (status === 400) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result400: any = null;
//             let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result400 = RemoteServiceErrorResponse.fromJS(resultData400);
//             return throwException("Bad Request", status, _responseText, _headers, result400);
//             }));
//         } else if (status === 404) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result404: any = null;
//             let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result404 = RemoteServiceErrorResponse.fromJS(resultData404);
//             return throwException("Not Found", status, _responseText, _headers, result404);
//             }));
//         } else if (status === 501) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result501: any = null;
//             let resultData501 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result501 = RemoteServiceErrorResponse.fromJS(resultData501);
//             return throwException("Server Error", status, _responseText, _headers, result501);
//             }));
//         } else if (status === 500) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result500: any = null;
//             let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result500 = RemoteServiceErrorResponse.fromJS(resultData500);
//             return throwException("Server Error", status, _responseText, _headers, result500);
//             }));
//         } else if (status !== 200 && status !== 204) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             return throwException("An unexpected server error occurred.", status, _responseText, _headers);
//             }));
//         }
//         return _observableOf<number>(<any>null);
//     }
// }
//
// export enum HttpStatusCode {
//     _100 = 100,
//     _101 = 101,
//     _102 = 102,
//     _103 = 103,
//     _200 = 200,
//     _201 = 201,
//     _202 = 202,
//     _203 = 203,
//     _204 = 204,
//     _205 = 205,
//     _206 = 206,
//     _207 = 207,
//     _208 = 208,
//     _226 = 226,
//     _300 = 300,
//     _301 = 301,
//     _302 = 302,
//     _303 = 303,
//     _304 = 304,
//     _305 = 305,
//     _306 = 306,
//     _307 = 307,
//     _308 = 308,
//     _400 = 400,
//     _401 = 401,
//     _402 = 402,
//     _403 = 403,
//     _404 = 404,
//     _405 = 405,
//     _406 = 406,
//     _407 = 407,
//     _408 = 408,
//     _409 = 409,
//     _410 = 410,
//     _411 = 411,
//     _412 = 412,
//     _413 = 413,
//     _414 = 414,
//     _415 = 415,
//     _416 = 416,
//     _417 = 417,
//     _421 = 421,
//     _422 = 422,
//     _423 = 423,
//     _424 = 424,
//     _426 = 426,
//     _428 = 428,
//     _429 = 429,
//     _431 = 431,
//     _451 = 451,
//     _500 = 500,
//     _501 = 501,
//     _502 = 502,
//     _503 = 503,
//     _504 = 504,
//     _505 = 505,
//     _506 = 506,
//     _507 = 507,
//     _508 = 508,
//     _510 = 510,
//     _511 = 511,
// }
//
// export class AccountExternalProviderSettingsDto implements IAccountExternalProviderSettingsDto {
//     settings!: ExternalProviderSettings[] | undefined;
//
//     constructor(data?: IAccountExternalProviderSettingsDto) {
//         if (data) {
//             for (var property in data) {
//                 if (data.hasOwnProperty(property))
//                     (<any>this)[property] = (<any>data)[property];
//             }
//         }
//     }
//
//     init(_data?: any) {
//         if (_data) {
//             if (Array.isArray(_data["settings"])) {
//                 this.settings = [] as any;
//                 for (let item of _data["settings"])
//                     this.settings!.push(ExternalProviderSettings.fromJS(item));
//             }
//         }
//     }
//
//     static fromJS(data: any): AccountExternalProviderSettingsDto {
//         data = typeof data === 'object' ? data : {};
//         let result = new AccountExternalProviderSettingsDto();
//         result.init(data);
//         return result;
//     }
//
//     toJSON(data?: any) {
//         data = typeof data === 'object' ? data : {};
//         if (Array.isArray(this.settings)) {
//             data["settings"] = [];
//             for (let item of this.settings)
//                 data["settings"].push(item.toJSON());
//         }
//         return data;
//     }
// }
//
// export interface IAccountExternalProviderSettingsDto {
//     settings: ExternalProviderSettings[] | undefined;
// }
//
// export class AccountLdapSettingsDto implements IAccountLdapSettingsDto {
//     enableLdapLogin!: boolean;
//     ldapServerHost!: string | undefined;
//     ldapServerPort!: string | undefined;
//     ldapBaseDc!: string | undefined;
//     ldapUserName!: string | undefined;
//     ldapPassword!: string | undefined;
//
//     constructor(data?: IAccountLdapSettingsDto) {
//         if (data) {
//             for (var property in data) {
//                 if (data.hasOwnProperty(property))
//                     (<any>this)[property] = (<any>data)[property];
//             }
//         }
//     }
//
//     init(_data?: any) {
//         if (_data) {
//             this.enableLdapLogin = _data["enableLdapLogin"];
//             this.ldapServerHost = _data["ldapServerHost"];
//             this.ldapServerPort = _data["ldapServerPort"];
//             this.ldapBaseDc = _data["ldapBaseDc"];
//             this.ldapUserName = _data["ldapUserName"];
//             this.ldapPassword = _data["ldapPassword"];
//         }
//     }
//
//     static fromJS(data: any): AccountLdapSettingsDto {
//         data = typeof data === 'object' ? data : {};
//         let result = new AccountLdapSettingsDto();
//         result.init(data);
//         return result;
//     }
//
//     toJSON(data?: any) {
//         data = typeof data === 'object' ? data : {};
//         data["enableLdapLogin"] = this.enableLdapLogin;
//         data["ldapServerHost"] = this.ldapServerHost;
//         data["ldapServerPort"] = this.ldapServerPort;
//         data["ldapBaseDc"] = this.ldapBaseDc;
//         data["ldapUserName"] = this.ldapUserName;
//         data["ldapPassword"] = this.ldapPassword;
//         return data;
//     }
// }
//
// export interface IAccountLdapSettingsDto {
//     enableLdapLogin: boolean;
//     ldapServerHost: string | undefined;
//     ldapServerPort: string | undefined;
//     ldapBaseDc: string | undefined;
//     ldapUserName: string | undefined;
//     ldapPassword: string | undefined;
// }
//
// export class AccountRecaptchaSettingsDto implements IAccountRecaptchaSettingsDto {
//     useCaptchaOnLogin!: boolean;
//     useCaptchaOnRegistration!: boolean;
//     verifyBaseUrl!: string | undefined;
//     siteKey!: string | undefined;
//     siteSecret!: string | undefined;
//     version!: number;
//     score!: number;
//
//     constructor(data?: IAccountRecaptchaSettingsDto) {
//         if (data) {
//             for (var property in data) {
//                 if (data.hasOwnProperty(property))
//                     (<any>this)[property] = (<any>data)[property];
//             }
//         }
//     }
//
//     init(_data?: any) {
//         if (_data) {
//             this.useCaptchaOnLogin = _data["useCaptchaOnLogin"];
//             this.useCaptchaOnRegistration = _data["useCaptchaOnRegistration"];
//             this.verifyBaseUrl = _data["verifyBaseUrl"];
//             this.siteKey = _data["siteKey"];
//             this.siteSecret = _data["siteSecret"];
//             this.version = _data["version"];
//             this.score = _data["score"];
//         }
//     }
//
//     static fromJS(data: any): AccountRecaptchaSettingsDto {
//         data = typeof data === 'object' ? data : {};
//         let result = new AccountRecaptchaSettingsDto();
//         result.init(data);
//         return result;
//     }
//
//     toJSON(data?: any) {
//         data = typeof data === 'object' ? data : {};
//         data["useCaptchaOnLogin"] = this.useCaptchaOnLogin;
//         data["useCaptchaOnRegistration"] = this.useCaptchaOnRegistration;
//         data["verifyBaseUrl"] = this.verifyBaseUrl;
//         data["siteKey"] = this.siteKey;
//         data["siteSecret"] = this.siteSecret;
//         data["version"] = this.version;
//         data["score"] = this.score;
//         return data;
//     }
// }
//
// export interface IAccountRecaptchaSettingsDto {
//     useCaptchaOnLogin: boolean;
//     useCaptchaOnRegistration: boolean;
//     verifyBaseUrl: string | undefined;
//     siteKey: string | undefined;
//     siteSecret: string | undefined;
//     version: number;
//     score: number;
// }
//
// export class AccountSettingsDto implements IAccountSettingsDto {
//     isSelfRegistrationEnabled!: boolean;
//     enableLocalLogin!: boolean;
//
//     constructor(data?: IAccountSettingsDto) {
//         if (data) {
//             for (var property in data) {
//                 if (data.hasOwnProperty(property))
//                     (<any>this)[property] = (<any>data)[property];
//             }
//         }
//     }
//
//     init(_data?: any) {
//         if (_data) {
//             this.isSelfRegistrationEnabled = _data["isSelfRegistrationEnabled"];
//             this.enableLocalLogin = _data["enableLocalLogin"];
//         }
//     }
//
//     static fromJS(data: any): AccountSettingsDto {
//         data = typeof data === 'object' ? data : {};
//         let result = new AccountSettingsDto();
//         result.init(data);
//         return result;
//     }
//
//     toJSON(data?: any) {
//         data = typeof data === 'object' ? data : {};
//         data["isSelfRegistrationEnabled"] = this.isSelfRegistrationEnabled;
//         data["enableLocalLogin"] = this.enableLocalLogin;
//         return data;
//     }
// }
//
// export interface IAccountSettingsDto {
//     isSelfRegistrationEnabled: boolean;
//     enableLocalLogin: boolean;
// }
//
// export class AccountTwoFactorSettingsDto implements IAccountTwoFactorSettingsDto {
//     twoFactorBehaviour!: IdentityProTwoFactorBehaviour;
//     isRememberBrowserEnabled!: boolean;
//     usersCanChange!: boolean;
//
//     constructor(data?: IAccountTwoFactorSettingsDto) {
//         if (data) {
//             for (var property in data) {
//                 if (data.hasOwnProperty(property))
//                     (<any>this)[property] = (<any>data)[property];
//             }
//         }
//     }
//
//     init(_data?: any) {
//         if (_data) {
//             this.twoFactorBehaviour = _data["twoFactorBehaviour"];
//             this.isRememberBrowserEnabled = _data["isRememberBrowserEnabled"];
//             this.usersCanChange = _data["usersCanChange"];
//         }
//     }
//
//     static fromJS(data: any): AccountTwoFactorSettingsDto {
//         data = typeof data === 'object' ? data : {};
//         let result = new AccountTwoFactorSettingsDto();
//         result.init(data);
//         return result;
//     }
//
//     toJSON(data?: any) {
//         data = typeof data === 'object' ? data : {};
//         data["twoFactorBehaviour"] = this.twoFactorBehaviour;
//         data["isRememberBrowserEnabled"] = this.isRememberBrowserEnabled;
//         data["usersCanChange"] = this.usersCanChange;
//         return data;
//     }
// }
//
// export interface IAccountTwoFactorSettingsDto {
//     twoFactorBehaviour: IdentityProTwoFactorBehaviour;
//     isRememberBrowserEnabled: boolean;
//     usersCanChange: boolean;
// }
//
// export class ConfirmEmailInput implements IConfirmEmailInput {
//     userId!: string;
//     token!: string;
//
//     constructor(data?: IConfirmEmailInput) {
//         if (data) {
//             for (var property in data) {
//                 if (data.hasOwnProperty(property))
//                     (<any>this)[property] = (<any>data)[property];
//             }
//         }
//     }
//
//     init(_data?: any) {
//         if (_data) {
//             this.userId = _data["userId"];
//             this.token = _data["token"];
//         }
//     }
//
//     static fromJS(data: any): ConfirmEmailInput {
//         data = typeof data === 'object' ? data : {};
//         let result = new ConfirmEmailInput();
//         result.init(data);
//         return result;
//     }
//
//     toJSON(data?: any) {
//         data = typeof data === 'object' ? data : {};
//         data["userId"] = this.userId;
//         data["token"] = this.token;
//         return data;
//     }
// }
//
// export interface IConfirmEmailInput {
//     userId: string;
//     token: string;
// }
//
// export class ConfirmPhoneNumberInput implements IConfirmPhoneNumberInput {
//     userId!: string;
//     token!: string;
//
//     constructor(data?: IConfirmPhoneNumberInput) {
//         if (data) {
//             for (var property in data) {
//                 if (data.hasOwnProperty(property))
//                     (<any>this)[property] = (<any>data)[property];
//             }
//         }
//     }
//
//     init(_data?: any) {
//         if (_data) {
//             this.userId = _data["userId"];
//             this.token = _data["token"];
//         }
//     }
//
//     static fromJS(data: any): ConfirmPhoneNumberInput {
//         data = typeof data === 'object' ? data : {};
//         let result = new ConfirmPhoneNumberInput();
//         result.init(data);
//         return result;
//     }
//
//     toJSON(data?: any) {
//         data = typeof data === 'object' ? data : {};
//         data["userId"] = this.userId;
//         data["token"] = this.token;
//         return data;
//     }
// }
//
// export interface IConfirmPhoneNumberInput {
//     userId: string;
//     token: string;
// }
//
// export class ExternalProviderDto implements IExternalProviderDto {
//     providers!: ExternalProviderItemDto[] | undefined;
//
//     constructor(data?: IExternalProviderDto) {
//         if (data) {
//             for (var property in data) {
//                 if (data.hasOwnProperty(property))
//                     (<any>this)[property] = (<any>data)[property];
//             }
//         }
//     }
//
//     init(_data?: any) {
//         if (_data) {
//             if (Array.isArray(_data["providers"])) {
//                 this.providers = [] as any;
//                 for (let item of _data["providers"])
//                     this.providers!.push(ExternalProviderItemDto.fromJS(item));
//             }
//         }
//     }
//
//     static fromJS(data: any): ExternalProviderDto {
//         data = typeof data === 'object' ? data : {};
//         let result = new ExternalProviderDto();
//         result.init(data);
//         return result;
//     }
//
//     toJSON(data?: any) {
//         data = typeof data === 'object' ? data : {};
//         if (Array.isArray(this.providers)) {
//             data["providers"] = [];
//             for (let item of this.providers)
//                 data["providers"].push(item.toJSON());
//         }
//         return data;
//     }
// }
//
// export interface IExternalProviderDto {
//     providers: ExternalProviderItemDto[] | undefined;
// }
//
// export class ExternalProviderItemDto implements IExternalProviderItemDto {
//     name!: string | undefined;
//     enabled!: boolean;
//     properties!: ExternalProviderSettingsProperty[] | undefined;
//
//     constructor(data?: IExternalProviderItemDto) {
//         if (data) {
//             for (var property in data) {
//                 if (data.hasOwnProperty(property))
//                     (<any>this)[property] = (<any>data)[property];
//             }
//         }
//     }
//
//     init(_data?: any) {
//         if (_data) {
//             this.name = _data["name"];
//             this.enabled = _data["enabled"];
//             if (Array.isArray(_data["properties"])) {
//                 this.properties = [] as any;
//                 for (let item of _data["properties"])
//                     this.properties!.push(ExternalProviderSettingsProperty.fromJS(item));
//             }
//         }
//     }
//
//     static fromJS(data: any): ExternalProviderItemDto {
//         data = typeof data === 'object' ? data : {};
//         let result = new ExternalProviderItemDto();
//         result.init(data);
//         return result;
//     }
//
//     toJSON(data?: any) {
//         data = typeof data === 'object' ? data : {};
//         data["name"] = this.name;
//         data["enabled"] = this.enabled;
//         if (Array.isArray(this.properties)) {
//             data["properties"] = [];
//             for (let item of this.properties)
//                 data["properties"].push(item.toJSON());
//         }
//         return data;
//     }
// }
//
// export interface IExternalProviderItemDto {
//     name: string | undefined;
//     enabled: boolean;
//     properties: ExternalProviderSettingsProperty[] | undefined;
// }
//
// export class ExternalProviderItemWithSecretDto implements IExternalProviderItemWithSecretDto {
//     success!: boolean;
//     name!: string | undefined;
//     enabled!: boolean;
//     properties!: ExternalProviderSettingsProperty[] | undefined;
//     secretProperties!: ExternalProviderSettingsProperty[] | undefined;
//
//     constructor(data?: IExternalProviderItemWithSecretDto) {
//         if (data) {
//             for (var property in data) {
//                 if (data.hasOwnProperty(property))
//                     (<any>this)[property] = (<any>data)[property];
//             }
//         }
//     }
//
//     init(_data?: any) {
//         if (_data) {
//             this.success = _data["success"];
//             this.name = _data["name"];
//             this.enabled = _data["enabled"];
//             if (Array.isArray(_data["properties"])) {
//                 this.properties = [] as any;
//                 for (let item of _data["properties"])
//                     this.properties!.push(ExternalProviderSettingsProperty.fromJS(item));
//             }
//             if (Array.isArray(_data["secretProperties"])) {
//                 this.secretProperties = [] as any;
//                 for (let item of _data["secretProperties"])
//                     this.secretProperties!.push(ExternalProviderSettingsProperty.fromJS(item));
//             }
//         }
//     }
//
//     static fromJS(data: any): ExternalProviderItemWithSecretDto {
//         data = typeof data === 'object' ? data : {};
//         let result = new ExternalProviderItemWithSecretDto();
//         result.init(data);
//         return result;
//     }
//
//     toJSON(data?: any) {
//         data = typeof data === 'object' ? data : {};
//         data["success"] = this.success;
//         data["name"] = this.name;
//         data["enabled"] = this.enabled;
//         if (Array.isArray(this.properties)) {
//             data["properties"] = [];
//             for (let item of this.properties)
//                 data["properties"].push(item.toJSON());
//         }
//         if (Array.isArray(this.secretProperties)) {
//             data["secretProperties"] = [];
//             for (let item of this.secretProperties)
//                 data["secretProperties"].push(item.toJSON());
//         }
//         return data;
//     }
// }
//
// export interface IExternalProviderItemWithSecretDto {
//     success: boolean;
//     name: string | undefined;
//     enabled: boolean;
//     properties: ExternalProviderSettingsProperty[] | undefined;
//     secretProperties: ExternalProviderSettingsProperty[] | undefined;
// }
//
// export class ExternalProviderSettings implements IExternalProviderSettings {
//     name!: string | undefined;
//     enabled!: boolean;
//     properties!: ExternalProviderSettingsProperty[] | undefined;
//     secretProperties!: ExternalProviderSettingsProperty[] | undefined;
//
//     constructor(data?: IExternalProviderSettings) {
//         if (data) {
//             for (var property in data) {
//                 if (data.hasOwnProperty(property))
//                     (<any>this)[property] = (<any>data)[property];
//             }
//         }
//     }
//
//     init(_data?: any) {
//         if (_data) {
//             this.name = _data["name"];
//             this.enabled = _data["enabled"];
//             if (Array.isArray(_data["properties"])) {
//                 this.properties = [] as any;
//                 for (let item of _data["properties"])
//                     this.properties!.push(ExternalProviderSettingsProperty.fromJS(item));
//             }
//             if (Array.isArray(_data["secretProperties"])) {
//                 this.secretProperties = [] as any;
//                 for (let item of _data["secretProperties"])
//                     this.secretProperties!.push(ExternalProviderSettingsProperty.fromJS(item));
//             }
//         }
//     }
//
//     static fromJS(data: any): ExternalProviderSettings {
//         data = typeof data === 'object' ? data : {};
//         let result = new ExternalProviderSettings();
//         result.init(data);
//         return result;
//     }
//
//     toJSON(data?: any) {
//         data = typeof data === 'object' ? data : {};
//         data["name"] = this.name;
//         data["enabled"] = this.enabled;
//         if (Array.isArray(this.properties)) {
//             data["properties"] = [];
//             for (let item of this.properties)
//                 data["properties"].push(item.toJSON());
//         }
//         if (Array.isArray(this.secretProperties)) {
//             data["secretProperties"] = [];
//             for (let item of this.secretProperties)
//                 data["secretProperties"].push(item.toJSON());
//         }
//         return data;
//     }
// }
//
// export interface IExternalProviderSettings {
//     name: string | undefined;
//     enabled: boolean;
//     properties: ExternalProviderSettingsProperty[] | undefined;
//     secretProperties: ExternalProviderSettingsProperty[] | undefined;
// }
//
// export class ExternalProviderSettingsProperty implements IExternalProviderSettingsProperty {
//     name!: string | undefined;
//     value!: string | undefined;
//
//     constructor(data?: IExternalProviderSettingsProperty) {
//         if (data) {
//             for (var property in data) {
//                 if (data.hasOwnProperty(property))
//                     (<any>this)[property] = (<any>data)[property];
//             }
//         }
//     }
//
//     init(_data?: any) {
//         if (_data) {
//             this.name = _data["name"];
//             this.value = _data["value"];
//         }
//     }
//
//     static fromJS(data: any): ExternalProviderSettingsProperty {
//         data = typeof data === 'object' ? data : {};
//         let result = new ExternalProviderSettingsProperty();
//         result.init(data);
//         return result;
//     }
//
//     toJSON(data?: any) {
//         data = typeof data === 'object' ? data : {};
//         data["name"] = this.name;
//         data["value"] = this.value;
//         return data;
//     }
// }
//
// export interface IExternalProviderSettingsProperty {
//     name: string | undefined;
//     value: string | undefined;
// }
//
// export class IdentityUserConfirmationStateDto implements IIdentityUserConfirmationStateDto {
//     emailConfirmed!: boolean;
//     phoneNumberConfirmed!: boolean;
//
//     constructor(data?: IIdentityUserConfirmationStateDto) {
//         if (data) {
//             for (var property in data) {
//                 if (data.hasOwnProperty(property))
//                     (<any>this)[property] = (<any>data)[property];
//             }
//         }
//     }
//
//     init(_data?: any) {
//         if (_data) {
//             this.emailConfirmed = _data["emailConfirmed"];
//             this.phoneNumberConfirmed = _data["phoneNumberConfirmed"];
//         }
//     }
//
//     static fromJS(data: any): IdentityUserConfirmationStateDto {
//         data = typeof data === 'object' ? data : {};
//         let result = new IdentityUserConfirmationStateDto();
//         result.init(data);
//         return result;
//     }
//
//     toJSON(data?: any) {
//         data = typeof data === 'object' ? data : {};
//         data["emailConfirmed"] = this.emailConfirmed;
//         data["phoneNumberConfirmed"] = this.phoneNumberConfirmed;
//         return data;
//     }
// }
//
// export interface IIdentityUserConfirmationStateDto {
//     emailConfirmed: boolean;
//     phoneNumberConfirmed: boolean;
// }
//
// export class ProfilePictureInput implements IProfilePictureInput {
//     type!: ProfilePictureType;
//     imageContent!: string | undefined;
//
//     constructor(data?: IProfilePictureInput) {
//         if (data) {
//             for (var property in data) {
//                 if (data.hasOwnProperty(property))
//                     (<any>this)[property] = (<any>data)[property];
//             }
//         }
//     }
//
//     init(_data?: any) {
//         if (_data) {
//             this.type = _data["type"];
//             this.imageContent = _data["imageContent"];
//         }
//     }
//
//     static fromJS(data: any): ProfilePictureInput {
//         data = typeof data === 'object' ? data : {};
//         let result = new ProfilePictureInput();
//         result.init(data);
//         return result;
//     }
//
//     toJSON(data?: any) {
//         data = typeof data === 'object' ? data : {};
//         data["type"] = this.type;
//         data["imageContent"] = this.imageContent;
//         return data;
//     }
// }
//
// export interface IProfilePictureInput {
//     type: ProfilePictureType;
//     imageContent: string | undefined;
// }
//
// export class ProfilePictureSourceDto implements IProfilePictureSourceDto {
//     type!: ProfilePictureType;
//     source!: string | undefined;
//     fileContent!: string | undefined;
//
//     constructor(data?: IProfilePictureSourceDto) {
//         if (data) {
//             for (var property in data) {
//                 if (data.hasOwnProperty(property))
//                     (<any>this)[property] = (<any>data)[property];
//             }
//         }
//     }
//
//     init(_data?: any) {
//         if (_data) {
//             this.type = _data["type"];
//             this.source = _data["source"];
//             this.fileContent = _data["fileContent"];
//         }
//     }
//
//     static fromJS(data: any): ProfilePictureSourceDto {
//         data = typeof data === 'object' ? data : {};
//         let result = new ProfilePictureSourceDto();
//         result.init(data);
//         return result;
//     }
//
//     toJSON(data?: any) {
//         data = typeof data === 'object' ? data : {};
//         data["type"] = this.type;
//         data["source"] = this.source;
//         data["fileContent"] = this.fileContent;
//         return data;
//     }
// }
//
// export interface IProfilePictureSourceDto {
//     type: ProfilePictureType;
//     source: string | undefined;
//     fileContent: string | undefined;
// }
//
// export enum ProfilePictureType {
//     _0 = 0,
//     _1 = 1,
//     _2 = 2,
// }
//
// export class AbpLoginResult implements IAbpLoginResult {
//     result!: LoginResultType;
//     readonly description!: string | undefined;
//
//     constructor(data?: IAbpLoginResult) {
//         if (data) {
//             for (var property in data) {
//                 if (data.hasOwnProperty(property))
//                     (<any>this)[property] = (<any>data)[property];
//             }
//         }
//     }
//
//     init(_data?: any) {
//         if (_data) {
//             this.result = _data["result"];
//             (<any>this).description = _data["description"];
//         }
//     }
//
//     static fromJS(data: any): AbpLoginResult {
//         data = typeof data === 'object' ? data : {};
//         let result = new AbpLoginResult();
//         result.init(data);
//         return result;
//     }
//
//     toJSON(data?: any) {
//         data = typeof data === 'object' ? data : {};
//         data["result"] = this.result;
//         data["description"] = this.description;
//         return data;
//     }
// }
//
// export interface IAbpLoginResult {
//     result: LoginResultType;
//     description: string | undefined;
// }
//
// export class LinkUserLoginInfo implements ILinkUserLoginInfo {
//     linkUserId!: string;
//     linkTenantId!: string | undefined;
//
//     constructor(data?: ILinkUserLoginInfo) {
//         if (data) {
//             for (var property in data) {
//                 if (data.hasOwnProperty(property))
//                     (<any>this)[property] = (<any>data)[property];
//             }
//         }
//     }
//
//     init(_data?: any) {
//         if (_data) {
//             this.linkUserId = _data["linkUserId"];
//             this.linkTenantId = _data["linkTenantId"];
//         }
//     }
//
//     static fromJS(data: any): LinkUserLoginInfo {
//         data = typeof data === 'object' ? data : {};
//         let result = new LinkUserLoginInfo();
//         result.init(data);
//         return result;
//     }
//
//     toJSON(data?: any) {
//         data = typeof data === 'object' ? data : {};
//         data["linkUserId"] = this.linkUserId;
//         data["linkTenantId"] = this.linkTenantId;
//         return data;
//     }
// }
//
// export interface ILinkUserLoginInfo {
//     linkUserId: string;
//     linkTenantId: string | undefined;
// }
//
// export enum LoginResultType {
//     _1 = 1,
//     _2 = 2,
//     _3 = 3,
//     _4 = 4,
//     _5 = 5,
//     _6 = 6,
// }
//
// export class UserLoginInfo implements IUserLoginInfo {
//     userNameOrEmailAddress!: string;
//     password!: string;
//     rememberMe!: boolean;
//     tenanId!: string | undefined;
//
//     constructor(data?: IUserLoginInfo) {
//         if (data) {
//             for (var property in data) {
//                 if (data.hasOwnProperty(property))
//                     (<any>this)[property] = (<any>data)[property];
//             }
//         }
//     }
//
//     init(_data?: any) {
//         if (_data) {
//             this.userNameOrEmailAddress = _data["userNameOrEmailAddress"];
//             this.password = _data["password"];
//             this.rememberMe = _data["rememberMe"];
//             this.tenanId = _data["tenanId"];
//         }
//     }
//
//     static fromJS(data: any): UserLoginInfo {
//         data = typeof data === 'object' ? data : {};
//         let result = new UserLoginInfo();
//         result.init(data);
//         return result;
//     }
//
//     toJSON(data?: any) {
//         data = typeof data === 'object' ? data : {};
//         data["userNameOrEmailAddress"] = this.userNameOrEmailAddress;
//         data["password"] = this.password;
//         data["rememberMe"] = this.rememberMe;
//         data["tenanId"] = this.tenanId;
//         return data;
//     }
// }
//
// export interface IUserLoginInfo {
//     userNameOrEmailAddress: string;
//     password: string;
//     rememberMe: boolean;
//     tenanId: string | undefined;
// }
//
// export class RegisterDto implements IRegisterDto {
//     readonly extraProperties!: { [key: string]: any; } | undefined;
//     userName!: string;
//     emailAddress!: string;
//     password!: string;
//     appName!: string;
//     returnUrl!: string | undefined;
//     returnUrlHash!: string | undefined;
//     captchaResponse!: string | undefined;
//
//     constructor(data?: IRegisterDto) {
//         if (data) {
//             for (var property in data) {
//                 if (data.hasOwnProperty(property))
//                     (<any>this)[property] = (<any>data)[property];
//             }
//         }
//     }
//
//     init(_data?: any) {
//         if (_data) {
//             if (_data["extraProperties"]) {
//                 (<any>this).extraProperties = {} as any;
//                 for (let key in _data["extraProperties"]) {
//                     if (_data["extraProperties"].hasOwnProperty(key))
//                         (<any>(<any>this).extraProperties)![key] = _data["extraProperties"][key];
//                 }
//             }
//             this.userName = _data["userName"];
//             this.emailAddress = _data["emailAddress"];
//             this.password = _data["password"];
//             this.appName = _data["appName"];
//             this.returnUrl = _data["returnUrl"];
//             this.returnUrlHash = _data["returnUrlHash"];
//             this.captchaResponse = _data["captchaResponse"];
//         }
//     }
//
//     static fromJS(data: any): RegisterDto {
//         data = typeof data === 'object' ? data : {};
//         let result = new RegisterDto();
//         result.init(data);
//         return result;
//     }
//
//     toJSON(data?: any) {
//         data = typeof data === 'object' ? data : {};
//         if (this.extraProperties) {
//             data["extraProperties"] = {};
//             for (let key in this.extraProperties) {
//                 if (this.extraProperties.hasOwnProperty(key))
//                     (<any>data["extraProperties"])[key] = this.extraProperties[key];
//             }
//         }
//         data["userName"] = this.userName;
//         data["emailAddress"] = this.emailAddress;
//         data["password"] = this.password;
//         data["appName"] = this.appName;
//         data["returnUrl"] = this.returnUrl;
//         data["returnUrlHash"] = this.returnUrlHash;
//         data["captchaResponse"] = this.captchaResponse;
//         return data;
//     }
// }
//
// export interface IRegisterDto {
//     extraProperties: { [key: string]: any; } | undefined;
//     userName: string;
//     emailAddress: string;
//     password: string;
//     appName: string;
//     returnUrl: string | undefined;
//     returnUrlHash: string | undefined;
//     captchaResponse: string | undefined;
// }
//
// export class ResetPasswordDto implements IResetPasswordDto {
//     userId!: string;
//     resetToken!: string;
//     password!: string;
//
//     constructor(data?: IResetPasswordDto) {
//         if (data) {
//             for (var property in data) {
//                 if (data.hasOwnProperty(property))
//                     (<any>this)[property] = (<any>data)[property];
//             }
//         }
//     }
//
//     init(_data?: any) {
//         if (_data) {
//             this.userId = _data["userId"];
//             this.resetToken = _data["resetToken"];
//             this.password = _data["password"];
//         }
//     }
//
//     static fromJS(data: any): ResetPasswordDto {
//         data = typeof data === 'object' ? data : {};
//         let result = new ResetPasswordDto();
//         result.init(data);
//         return result;
//     }
//
//     toJSON(data?: any) {
//         data = typeof data === 'object' ? data : {};
//         data["userId"] = this.userId;
//         data["resetToken"] = this.resetToken;
//         data["password"] = this.password;
//         return data;
//     }
// }
//
// export interface IResetPasswordDto {
//     userId: string;
//     resetToken: string;
//     password: string;
// }
//
// export class SendEmailConfirmationTokenDto implements ISendEmailConfirmationTokenDto {
//     appName!: string;
//     userId!: string;
//     returnUrl!: string | undefined;
//     returnUrlHash!: string | undefined;
//
//     constructor(data?: ISendEmailConfirmationTokenDto) {
//         if (data) {
//             for (var property in data) {
//                 if (data.hasOwnProperty(property))
//                     (<any>this)[property] = (<any>data)[property];
//             }
//         }
//     }
//
//     init(_data?: any) {
//         if (_data) {
//             this.appName = _data["appName"];
//             this.userId = _data["userId"];
//             this.returnUrl = _data["returnUrl"];
//             this.returnUrlHash = _data["returnUrlHash"];
//         }
//     }
//
//     static fromJS(data: any): SendEmailConfirmationTokenDto {
//         data = typeof data === 'object' ? data : {};
//         let result = new SendEmailConfirmationTokenDto();
//         result.init(data);
//         return result;
//     }
//
//     toJSON(data?: any) {
//         data = typeof data === 'object' ? data : {};
//         data["appName"] = this.appName;
//         data["userId"] = this.userId;
//         data["returnUrl"] = this.returnUrl;
//         data["returnUrlHash"] = this.returnUrlHash;
//         return data;
//     }
// }
//
// export interface ISendEmailConfirmationTokenDto {
//     appName: string;
//     userId: string;
//     returnUrl: string | undefined;
//     returnUrlHash: string | undefined;
// }
//
// export class SendEmailSecurityCodeDto implements ISendEmailSecurityCodeDto {
//     userId!: string;
//
//     constructor(data?: ISendEmailSecurityCodeDto) {
//         if (data) {
//             for (var property in data) {
//                 if (data.hasOwnProperty(property))
//                     (<any>this)[property] = (<any>data)[property];
//             }
//         }
//     }
//
//     init(_data?: any) {
//         if (_data) {
//             this.userId = _data["userId"];
//         }
//     }
//
//     static fromJS(data: any): SendEmailSecurityCodeDto {
//         data = typeof data === 'object' ? data : {};
//         let result = new SendEmailSecurityCodeDto();
//         result.init(data);
//         return result;
//     }
//
//     toJSON(data?: any) {
//         data = typeof data === 'object' ? data : {};
//         data["userId"] = this.userId;
//         return data;
//     }
// }
//
// export interface ISendEmailSecurityCodeDto {
//     userId: string;
// }
//
// export class SendPasswordResetCodeDto implements ISendPasswordResetCodeDto {
//     email!: string;
//     appName!: string;
//     returnUrl!: string | undefined;
//     returnUrlHash!: string | undefined;
//
//     constructor(data?: ISendPasswordResetCodeDto) {
//         if (data) {
//             for (var property in data) {
//                 if (data.hasOwnProperty(property))
//                     (<any>this)[property] = (<any>data)[property];
//             }
//         }
//     }
//
//     init(_data?: any) {
//         if (_data) {
//             this.email = _data["email"];
//             this.appName = _data["appName"];
//             this.returnUrl = _data["returnUrl"];
//             this.returnUrlHash = _data["returnUrlHash"];
//         }
//     }
//
//     static fromJS(data: any): SendPasswordResetCodeDto {
//         data = typeof data === 'object' ? data : {};
//         let result = new SendPasswordResetCodeDto();
//         result.init(data);
//         return result;
//     }
//
//     toJSON(data?: any) {
//         data = typeof data === 'object' ? data : {};
//         data["email"] = this.email;
//         data["appName"] = this.appName;
//         data["returnUrl"] = this.returnUrl;
//         data["returnUrlHash"] = this.returnUrlHash;
//         return data;
//     }
// }
//
// export interface ISendPasswordResetCodeDto {
//     email: string;
//     appName: string;
//     returnUrl: string | undefined;
//     returnUrlHash: string | undefined;
// }
//
// export class SendPhoneNumberConfirmationTokenDto implements ISendPhoneNumberConfirmationTokenDto {
//     userId!: string;
//     phoneNumber!: string | undefined;
//
//     constructor(data?: ISendPhoneNumberConfirmationTokenDto) {
//         if (data) {
//             for (var property in data) {
//                 if (data.hasOwnProperty(property))
//                     (<any>this)[property] = (<any>data)[property];
//             }
//         }
//     }
//
//     init(_data?: any) {
//         if (_data) {
//             this.userId = _data["userId"];
//             this.phoneNumber = _data["phoneNumber"];
//         }
//     }
//
//     static fromJS(data: any): SendPhoneNumberConfirmationTokenDto {
//         data = typeof data === 'object' ? data : {};
//         let result = new SendPhoneNumberConfirmationTokenDto();
//         result.init(data);
//         return result;
//     }
//
//     toJSON(data?: any) {
//         data = typeof data === 'object' ? data : {};
//         data["userId"] = this.userId;
//         data["phoneNumber"] = this.phoneNumber;
//         return data;
//     }
// }
//
// export interface ISendPhoneNumberConfirmationTokenDto {
//     userId: string;
//     phoneNumber: string | undefined;
// }
//
// export class SendPhoneSecurityCodeDto implements ISendPhoneSecurityCodeDto {
//     userId!: string;
//
//     constructor(data?: ISendPhoneSecurityCodeDto) {
//         if (data) {
//             for (var property in data) {
//                 if (data.hasOwnProperty(property))
//                     (<any>this)[property] = (<any>data)[property];
//             }
//         }
//     }
//
//     init(_data?: any) {
//         if (_data) {
//             this.userId = _data["userId"];
//         }
//     }
//
//     static fromJS(data: any): SendPhoneSecurityCodeDto {
//         data = typeof data === 'object' ? data : {};
//         let result = new SendPhoneSecurityCodeDto();
//         result.init(data);
//         return result;
//     }
//
//     toJSON(data?: any) {
//         data = typeof data === 'object' ? data : {};
//         data["userId"] = this.userId;
//         return data;
//     }
// }
//
// export interface ISendPhoneSecurityCodeDto {
//     userId: string;
// }
//
// export class UpdateExternalProviderDto implements IUpdateExternalProviderDto {
//     name!: string | undefined;
//     enabled!: boolean;
//     properties!: ExternalProviderSettingsProperty[] | undefined;
//     secretProperties!: ExternalProviderSettingsProperty[] | undefined;
//
//     constructor(data?: IUpdateExternalProviderDto) {
//         if (data) {
//             for (var property in data) {
//                 if (data.hasOwnProperty(property))
//                     (<any>this)[property] = (<any>data)[property];
//             }
//         }
//     }
//
//     init(_data?: any) {
//         if (_data) {
//             this.name = _data["name"];
//             this.enabled = _data["enabled"];
//             if (Array.isArray(_data["properties"])) {
//                 this.properties = [] as any;
//                 for (let item of _data["properties"])
//                     this.properties!.push(ExternalProviderSettingsProperty.fromJS(item));
//             }
//             if (Array.isArray(_data["secretProperties"])) {
//                 this.secretProperties = [] as any;
//                 for (let item of _data["secretProperties"])
//                     this.secretProperties!.push(ExternalProviderSettingsProperty.fromJS(item));
//             }
//         }
//     }
//
//     static fromJS(data: any): UpdateExternalProviderDto {
//         data = typeof data === 'object' ? data : {};
//         let result = new UpdateExternalProviderDto();
//         result.init(data);
//         return result;
//     }
//
//     toJSON(data?: any) {
//         data = typeof data === 'object' ? data : {};
//         data["name"] = this.name;
//         data["enabled"] = this.enabled;
//         if (Array.isArray(this.properties)) {
//             data["properties"] = [];
//             for (let item of this.properties)
//                 data["properties"].push(item.toJSON());
//         }
//         if (Array.isArray(this.secretProperties)) {
//             data["secretProperties"] = [];
//             for (let item of this.secretProperties)
//                 data["secretProperties"].push(item.toJSON());
//         }
//         return data;
//     }
// }
//
// export interface IUpdateExternalProviderDto {
//     name: string | undefined;
//     enabled: boolean;
//     properties: ExternalProviderSettingsProperty[] | undefined;
//     secretProperties: ExternalProviderSettingsProperty[] | undefined;
// }
//
// export class ListResultDto_1OfOfIdentityRoleDtoAndContractsAnd_0AndCulture_neutralAndPublicKeyToken_null implements IListResultDto_1OfOfIdentityRoleDtoAndContractsAnd_0AndCulture_neutralAndPublicKeyToken_null {
//     items!: IdentityRoleDto[] | undefined;
//
//     constructor(data?: IListResultDto_1OfOfIdentityRoleDtoAndContractsAnd_0AndCulture_neutralAndPublicKeyToken_null) {
//         if (data) {
//             for (var property in data) {
//                 if (data.hasOwnProperty(property))
//                     (<any>this)[property] = (<any>data)[property];
//             }
//         }
//     }
//
//     init(_data?: any) {
//         if (_data) {
//             if (Array.isArray(_data["items"])) {
//                 this.items = [] as any;
//                 for (let item of _data["items"])
//                     this.items!.push(IdentityRoleDto.fromJS(item));
//             }
//         }
//     }
//
//     static fromJS(data: any): ListResultDto_1OfOfIdentityRoleDtoAndContractsAnd_0AndCulture_neutralAndPublicKeyToken_null {
//         data = typeof data === 'object' ? data : {};
//         let result = new ListResultDto_1OfOfIdentityRoleDtoAndContractsAnd_0AndCulture_neutralAndPublicKeyToken_null();
//         result.init(data);
//         return result;
//     }
//
//     toJSON(data?: any) {
//         data = typeof data === 'object' ? data : {};
//         if (Array.isArray(this.items)) {
//             data["items"] = [];
//             for (let item of this.items)
//                 data["items"].push(item.toJSON());
//         }
//         return data;
//     }
// }
//
// export interface IListResultDto_1OfOfIdentityRoleDtoAndContractsAnd_0AndCulture_neutralAndPublicKeyToken_null {
//     items: IdentityRoleDto[] | undefined;
// }
//
// export class ListResultDto_1OfOfLinkUserDtoAndContractsAnd_0AndCulture_neutralAndPublicKeyToken_null implements IListResultDto_1OfOfLinkUserDtoAndContractsAnd_0AndCulture_neutralAndPublicKeyToken_null {
//     items!: LinkUserDto[] | undefined;
//
//     constructor(data?: IListResultDto_1OfOfLinkUserDtoAndContractsAnd_0AndCulture_neutralAndPublicKeyToken_null) {
//         if (data) {
//             for (var property in data) {
//                 if (data.hasOwnProperty(property))
//                     (<any>this)[property] = (<any>data)[property];
//             }
//         }
//     }
//
//     init(_data?: any) {
//         if (_data) {
//             if (Array.isArray(_data["items"])) {
//                 this.items = [] as any;
//                 for (let item of _data["items"])
//                     this.items!.push(LinkUserDto.fromJS(item));
//             }
//         }
//     }
//
//     static fromJS(data: any): ListResultDto_1OfOfLinkUserDtoAndContractsAnd_0AndCulture_neutralAndPublicKeyToken_null {
//         data = typeof data === 'object' ? data : {};
//         let result = new ListResultDto_1OfOfLinkUserDtoAndContractsAnd_0AndCulture_neutralAndPublicKeyToken_null();
//         result.init(data);
//         return result;
//     }
//
//     toJSON(data?: any) {
//         data = typeof data === 'object' ? data : {};
//         if (Array.isArray(this.items)) {
//             data["items"] = [];
//             for (let item of this.items)
//                 data["items"].push(item.toJSON());
//         }
//         return data;
//     }
// }
//
// export interface IListResultDto_1OfOfLinkUserDtoAndContractsAnd_0AndCulture_neutralAndPublicKeyToken_null {
//     items: LinkUserDto[] | undefined;
// }
//
// export class ListResultDto_1OfOfOrganizationUnitWithDetailsDtoAndContractsAnd_0AndCulture_neutralAndPublicKeyToken_null implements IListResultDto_1OfOfOrganizationUnitWithDetailsDtoAndContractsAnd_0AndCulture_neutralAndPublicKeyToken_null {
//     items!: OrganizationUnitWithDetailsDto[] | undefined;
//
//     constructor(data?: IListResultDto_1OfOfOrganizationUnitWithDetailsDtoAndContractsAnd_0AndCulture_neutralAndPublicKeyToken_null) {
//         if (data) {
//             for (var property in data) {
//                 if (data.hasOwnProperty(property))
//                     (<any>this)[property] = (<any>data)[property];
//             }
//         }
//     }
//
//     init(_data?: any) {
//         if (_data) {
//             if (Array.isArray(_data["items"])) {
//                 this.items = [] as any;
//                 for (let item of _data["items"])
//                     this.items!.push(OrganizationUnitWithDetailsDto.fromJS(item));
//             }
//         }
//     }
//
//     static fromJS(data: any): ListResultDto_1OfOfOrganizationUnitWithDetailsDtoAndContractsAnd_0AndCulture_neutralAndPublicKeyToken_null {
//         data = typeof data === 'object' ? data : {};
//         let result = new ListResultDto_1OfOfOrganizationUnitWithDetailsDtoAndContractsAnd_0AndCulture_neutralAndPublicKeyToken_null();
//         result.init(data);
//         return result;
//     }
//
//     toJSON(data?: any) {
//         data = typeof data === 'object' ? data : {};
//         if (Array.isArray(this.items)) {
//             data["items"] = [];
//             for (let item of this.items)
//                 data["items"].push(item.toJSON());
//         }
//         return data;
//     }
// }
//
// export interface IListResultDto_1OfOfOrganizationUnitWithDetailsDtoAndContractsAnd_0AndCulture_neutralAndPublicKeyToken_null {
//     items: OrganizationUnitWithDetailsDto[] | undefined;
// }
//
// export class ListResultDto_1OfOfLanguageDtoAndContractsAnd_0AndCulture_neutralAndPublicKeyToken_null implements IListResultDto_1OfOfLanguageDtoAndContractsAnd_0AndCulture_neutralAndPublicKeyToken_null {
//     items!: LanguageDto[] | undefined;
//
//     constructor(data?: IListResultDto_1OfOfLanguageDtoAndContractsAnd_0AndCulture_neutralAndPublicKeyToken_null) {
//         if (data) {
//             for (var property in data) {
//                 if (data.hasOwnProperty(property))
//                     (<any>this)[property] = (<any>data)[property];
//             }
//         }
//     }
//
//     init(_data?: any) {
//         if (_data) {
//             if (Array.isArray(_data["items"])) {
//                 this.items = [] as any;
//                 for (let item of _data["items"])
//                     this.items!.push(LanguageDto.fromJS(item));
//             }
//         }
//     }
//
//     static fromJS(data: any): ListResultDto_1OfOfLanguageDtoAndContractsAnd_0AndCulture_neutralAndPublicKeyToken_null {
//         data = typeof data === 'object' ? data : {};
//         let result = new ListResultDto_1OfOfLanguageDtoAndContractsAnd_0AndCulture_neutralAndPublicKeyToken_null();
//         result.init(data);
//         return result;
//     }
//
//     toJSON(data?: any) {
//         data = typeof data === 'object' ? data : {};
//         if (Array.isArray(this.items)) {
//             data["items"] = [];
//             for (let item of this.items)
//                 data["items"].push(item.toJSON());
//         }
//         return data;
//     }
// }
//
// export interface IListResultDto_1OfOfLanguageDtoAndContractsAnd_0AndCulture_neutralAndPublicKeyToken_null {
//     items: LanguageDto[] | undefined;
// }
//
// export class ListResultDto_1OfOfUserDataAndAbstractionsAnd_0AndCulture_neutralAndPublicKeyToken_null implements IListResultDto_1OfOfUserDataAndAbstractionsAnd_0AndCulture_neutralAndPublicKeyToken_null {
//     items!: UserData[] | undefined;
//
//     constructor(data?: IListResultDto_1OfOfUserDataAndAbstractionsAnd_0AndCulture_neutralAndPublicKeyToken_null) {
//         if (data) {
//             for (var property in data) {
//                 if (data.hasOwnProperty(property))
//                     (<any>this)[property] = (<any>data)[property];
//             }
//         }
//     }
//
//     init(_data?: any) {
//         if (_data) {
//             if (Array.isArray(_data["items"])) {
//                 this.items = [] as any;
//                 for (let item of _data["items"])
//                     this.items!.push(UserData.fromJS(item));
//             }
//         }
//     }
//
//     static fromJS(data: any): ListResultDto_1OfOfUserDataAndAbstractionsAnd_0AndCulture_neutralAndPublicKeyToken_null {
//         data = typeof data === 'object' ? data : {};
//         let result = new ListResultDto_1OfOfUserDataAndAbstractionsAnd_0AndCulture_neutralAndPublicKeyToken_null();
//         result.init(data);
//         return result;
//     }
//
//     toJSON(data?: any) {
//         data = typeof data === 'object' ? data : {};
//         if (Array.isArray(this.items)) {
//             data["items"] = [];
//             for (let item of this.items)
//                 data["items"].push(item.toJSON());
//         }
//         return data;
//     }
// }
//
// export interface IListResultDto_1OfOfUserDataAndAbstractionsAnd_0AndCulture_neutralAndPublicKeyToken_null {
//     items: UserData[] | undefined;
// }
//
// export class ListResultDto_1OfOfDirectoryDescriptorInfoDtoAndContractsAnd_0AndCulture_neutralAndPublicKeyToken_null implements IListResultDto_1OfOfDirectoryDescriptorInfoDtoAndContractsAnd_0AndCulture_neutralAndPublicKeyToken_null {
//     items!: DirectoryDescriptorInfoDto[] | undefined;
//
//     constructor(data?: IListResultDto_1OfOfDirectoryDescriptorInfoDtoAndContractsAnd_0AndCulture_neutralAndPublicKeyToken_null) {
//         if (data) {
//             for (var property in data) {
//                 if (data.hasOwnProperty(property))
//                     (<any>this)[property] = (<any>data)[property];
//             }
//         }
//     }
//
//     init(_data?: any) {
//         if (_data) {
//             if (Array.isArray(_data["items"])) {
//                 this.items = [] as any;
//                 for (let item of _data["items"])
//                     this.items!.push(DirectoryDescriptorInfoDto.fromJS(item));
//             }
//         }
//     }
//
//     static fromJS(data: any): ListResultDto_1OfOfDirectoryDescriptorInfoDtoAndContractsAnd_0AndCulture_neutralAndPublicKeyToken_null {
//         data = typeof data === 'object' ? data : {};
//         let result = new ListResultDto_1OfOfDirectoryDescriptorInfoDtoAndContractsAnd_0AndCulture_neutralAndPublicKeyToken_null();
//         result.init(data);
//         return result;
//     }
//
//     toJSON(data?: any) {
//         data = typeof data === 'object' ? data : {};
//         if (Array.isArray(this.items)) {
//             data["items"] = [];
//             for (let item of this.items)
//                 data["items"].push(item.toJSON());
//         }
//         return data;
//     }
// }
//
// export interface IListResultDto_1OfOfDirectoryDescriptorInfoDtoAndContractsAnd_0AndCulture_neutralAndPublicKeyToken_null {
//     items: DirectoryDescriptorInfoDto[] | undefined;
// }
//
// export class ListResultDto_1OfOfFileDescriptorDtoAndContractsAnd_0AndCulture_neutralAndPublicKeyToken_null implements IListResultDto_1OfOfFileDescriptorDtoAndContractsAnd_0AndCulture_neutralAndPublicKeyToken_null {
//     items!: FileDescriptorDto[] | undefined;
//
//     constructor(data?: IListResultDto_1OfOfFileDescriptorDtoAndContractsAnd_0AndCulture_neutralAndPublicKeyToken_null) {
//         if (data) {
//             for (var property in data) {
//                 if (data.hasOwnProperty(property))
//                     (<any>this)[property] = (<any>data)[property];
//             }
//         }
//     }
//
//     init(_data?: any) {
//         if (_data) {
//             if (Array.isArray(_data["items"])) {
//                 this.items = [] as any;
//                 for (let item of _data["items"])
//                     this.items!.push(FileDescriptorDto.fromJS(item));
//             }
//         }
//     }
//
//     static fromJS(data: any): ListResultDto_1OfOfFileDescriptorDtoAndContractsAnd_0AndCulture_neutralAndPublicKeyToken_null {
//         data = typeof data === 'object' ? data : {};
//         let result = new ListResultDto_1OfOfFileDescriptorDtoAndContractsAnd_0AndCulture_neutralAndPublicKeyToken_null();
//         result.init(data);
//         return result;
//     }
//
//     toJSON(data?: any) {
//         data = typeof data === 'object' ? data : {};
//         if (Array.isArray(this.items)) {
//             data["items"] = [];
//             for (let item of this.items)
//                 data["items"].push(item.toJSON());
//         }
//         return data;
//     }
// }
//
// export interface IListResultDto_1OfOfFileDescriptorDtoAndContractsAnd_0AndCulture_neutralAndPublicKeyToken_null {
//     items: FileDescriptorDto[] | undefined;
// }
//
// export class PagedResultDto_1OfOfAuditLogDtoAndContractsAnd_0AndCulture_neutralAndPublicKeyToken_null implements IPagedResultDto_1OfOfAuditLogDtoAndContractsAnd_0AndCulture_neutralAndPublicKeyToken_null {
//     items!: AuditLogDto[] | undefined;
//     totalCount!: number;
//
//     constructor(data?: IPagedResultDto_1OfOfAuditLogDtoAndContractsAnd_0AndCulture_neutralAndPublicKeyToken_null) {
//         if (data) {
//             for (var property in data) {
//                 if (data.hasOwnProperty(property))
//                     (<any>this)[property] = (<any>data)[property];
//             }
//         }
//     }
//
//     init(_data?: any) {
//         if (_data) {
//             if (Array.isArray(_data["items"])) {
//                 this.items = [] as any;
//                 for (let item of _data["items"])
//                     this.items!.push(AuditLogDto.fromJS(item));
//             }
//             this.totalCount = _data["totalCount"];
//         }
//     }
//
//     static fromJS(data: any): PagedResultDto_1OfOfAuditLogDtoAndContractsAnd_0AndCulture_neutralAndPublicKeyToken_null {
//         data = typeof data === 'object' ? data : {};
//         let result = new PagedResultDto_1OfOfAuditLogDtoAndContractsAnd_0AndCulture_neutralAndPublicKeyToken_null();
//         result.init(data);
//         return result;
//     }
//
//     toJSON(data?: any) {
//         data = typeof data === 'object' ? data : {};
//         if (Array.isArray(this.items)) {
//             data["items"] = [];
//             for (let item of this.items)
//                 data["items"].push(item.toJSON());
//         }
//         data["totalCount"] = this.totalCount;
//         return data;
//     }
// }
//
// export interface IPagedResultDto_1OfOfAuditLogDtoAndContractsAnd_0AndCulture_neutralAndPublicKeyToken_null {
//     items: AuditLogDto[] | undefined;
//     totalCount: number;
// }
//
// export class PagedResultDto_1OfOfEntityChangeDtoAndContractsAnd_0AndCulture_neutralAndPublicKeyToken_null implements IPagedResultDto_1OfOfEntityChangeDtoAndContractsAnd_0AndCulture_neutralAndPublicKeyToken_null {
//     items!: EntityChangeDto[] | undefined;
//     totalCount!: number;
//
//     constructor(data?: IPagedResultDto_1OfOfEntityChangeDtoAndContractsAnd_0AndCulture_neutralAndPublicKeyToken_null) {
//         if (data) {
//             for (var property in data) {
//                 if (data.hasOwnProperty(property))
//                     (<any>this)[property] = (<any>data)[property];
//             }
//         }
//     }
//
//     init(_data?: any) {
//         if (_data) {
//             if (Array.isArray(_data["items"])) {
//                 this.items = [] as any;
//                 for (let item of _data["items"])
//                     this.items!.push(EntityChangeDto.fromJS(item));
//             }
//             this.totalCount = _data["totalCount"];
//         }
//     }
//
//     static fromJS(data: any): PagedResultDto_1OfOfEntityChangeDtoAndContractsAnd_0AndCulture_neutralAndPublicKeyToken_null {
//         data = typeof data === 'object' ? data : {};
//         let result = new PagedResultDto_1OfOfEntityChangeDtoAndContractsAnd_0AndCulture_neutralAndPublicKeyToken_null();
//         result.init(data);
//         return result;
//     }
//
//     toJSON(data?: any) {
//         data = typeof data === 'object' ? data : {};
//         if (Array.isArray(this.items)) {
//             data["items"] = [];
//             for (let item of this.items)
//                 data["items"].push(item.toJSON());
//         }
//         data["totalCount"] = this.totalCount;
//         return data;
//     }
// }
//
// export interface IPagedResultDto_1OfOfEntityChangeDtoAndContractsAnd_0AndCulture_neutralAndPublicKeyToken_null {
//     items: EntityChangeDto[] | undefined;
//     totalCount: number;
// }
//
// export class PagedResultDto_1OfOfClaimTypeDtoAndContractsAnd_0AndCulture_neutralAndPublicKeyToken_null implements IPagedResultDto_1OfOfClaimTypeDtoAndContractsAnd_0AndCulture_neutralAndPublicKeyToken_null {
//     items!: ClaimTypeDto[] | undefined;
//     totalCount!: number;
//
//     constructor(data?: IPagedResultDto_1OfOfClaimTypeDtoAndContractsAnd_0AndCulture_neutralAndPublicKeyToken_null) {
//         if (data) {
//             for (var property in data) {
//                 if (data.hasOwnProperty(property))
//                     (<any>this)[property] = (<any>data)[property];
//             }
//         }
//     }
//
//     init(_data?: any) {
//         if (_data) {
//             if (Array.isArray(_data["items"])) {
//                 this.items = [] as any;
//                 for (let item of _data["items"])
//                     this.items!.push(ClaimTypeDto.fromJS(item));
//             }
//             this.totalCount = _data["totalCount"];
//         }
//     }
//
//     static fromJS(data: any): PagedResultDto_1OfOfClaimTypeDtoAndContractsAnd_0AndCulture_neutralAndPublicKeyToken_null {
//         data = typeof data === 'object' ? data : {};
//         let result = new PagedResultDto_1OfOfClaimTypeDtoAndContractsAnd_0AndCulture_neutralAndPublicKeyToken_null();
//         result.init(data);
//         return result;
//     }
//
//     toJSON(data?: any) {
//         data = typeof data === 'object' ? data : {};
//         if (Array.isArray(this.items)) {
//             data["items"] = [];
//             for (let item of this.items)
//                 data["items"].push(item.toJSON());
//         }
//         data["totalCount"] = this.totalCount;
//         return data;
//     }
// }
//
// export interface IPagedResultDto_1OfOfClaimTypeDtoAndContractsAnd_0AndCulture_neutralAndPublicKeyToken_null {
//     items: ClaimTypeDto[] | undefined;
//     totalCount: number;
// }
//
// export class PagedResultDto_1OfOfIdentityRoleDtoAndContractsAnd_0AndCulture_neutralAndPublicKeyToken_null implements IPagedResultDto_1OfOfIdentityRoleDtoAndContractsAnd_0AndCulture_neutralAndPublicKeyToken_null {
//     items!: IdentityRoleDto[] | undefined;
//     totalCount!: number;
//
//     constructor(data?: IPagedResultDto_1OfOfIdentityRoleDtoAndContractsAnd_0AndCulture_neutralAndPublicKeyToken_null) {
//         if (data) {
//             for (var property in data) {
//                 if (data.hasOwnProperty(property))
//                     (<any>this)[property] = (<any>data)[property];
//             }
//         }
//     }
//
//     init(_data?: any) {
//         if (_data) {
//             if (Array.isArray(_data["items"])) {
//                 this.items = [] as any;
//                 for (let item of _data["items"])
//                     this.items!.push(IdentityRoleDto.fromJS(item));
//             }
//             this.totalCount = _data["totalCount"];
//         }
//     }
//
//     static fromJS(data: any): PagedResultDto_1OfOfIdentityRoleDtoAndContractsAnd_0AndCulture_neutralAndPublicKeyToken_null {
//         data = typeof data === 'object' ? data : {};
//         let result = new PagedResultDto_1OfOfIdentityRoleDtoAndContractsAnd_0AndCulture_neutralAndPublicKeyToken_null();
//         result.init(data);
//         return result;
//     }
//
//     toJSON(data?: any) {
//         data = typeof data === 'object' ? data : {};
//         if (Array.isArray(this.items)) {
//             data["items"] = [];
//             for (let item of this.items)
//                 data["items"].push(item.toJSON());
//         }
//         data["totalCount"] = this.totalCount;
//         return data;
//     }
// }
//
// export interface IPagedResultDto_1OfOfIdentityRoleDtoAndContractsAnd_0AndCulture_neutralAndPublicKeyToken_null {
//     items: IdentityRoleDto[] | undefined;
//     totalCount: number;
// }
//
// export class PagedResultDto_1OfOfIdentitySecurityLogDtoAndContractsAnd_0AndCulture_neutralAndPublicKeyToken_null implements IPagedResultDto_1OfOfIdentitySecurityLogDtoAndContractsAnd_0AndCulture_neutralAndPublicKeyToken_null {
//     items!: IdentitySecurityLogDto[] | undefined;
//     totalCount!: number;
//
//     constructor(data?: IPagedResultDto_1OfOfIdentitySecurityLogDtoAndContractsAnd_0AndCulture_neutralAndPublicKeyToken_null) {
//         if (data) {
//             for (var property in data) {
//                 if (data.hasOwnProperty(property))
//                     (<any>this)[property] = (<any>data)[property];
//             }
//         }
//     }
//
//     init(_data?: any) {
//         if (_data) {
//             if (Array.isArray(_data["items"])) {
//                 this.items = [] as any;
//                 for (let item of _data["items"])
//                     this.items!.push(IdentitySecurityLogDto.fromJS(item));
//             }
//             this.totalCount = _data["totalCount"];
//         }
//     }
//
//     static fromJS(data: any): PagedResultDto_1OfOfIdentitySecurityLogDtoAndContractsAnd_0AndCulture_neutralAndPublicKeyToken_null {
//         data = typeof data === 'object' ? data : {};
//         let result = new PagedResultDto_1OfOfIdentitySecurityLogDtoAndContractsAnd_0AndCulture_neutralAndPublicKeyToken_null();
//         result.init(data);
//         return result;
//     }
//
//     toJSON(data?: any) {
//         data = typeof data === 'object' ? data : {};
//         if (Array.isArray(this.items)) {
//             data["items"] = [];
//             for (let item of this.items)
//                 data["items"].push(item.toJSON());
//         }
//         data["totalCount"] = this.totalCount;
//         return data;
//     }
// }
//
// export interface IPagedResultDto_1OfOfIdentitySecurityLogDtoAndContractsAnd_0AndCulture_neutralAndPublicKeyToken_null {
//     items: IdentitySecurityLogDto[] | undefined;
//     totalCount: number;
// }
//
// export class PagedResultDto_1OfOfIdentityUserDtoAndContractsAnd_0AndCulture_neutralAndPublicKeyToken_null implements IPagedResultDto_1OfOfIdentityUserDtoAndContractsAnd_0AndCulture_neutralAndPublicKeyToken_null {
//     items!: IdentityUserDto[] | undefined;
//     totalCount!: number;
//
//     constructor(data?: IPagedResultDto_1OfOfIdentityUserDtoAndContractsAnd_0AndCulture_neutralAndPublicKeyToken_null) {
//         if (data) {
//             for (var property in data) {
//                 if (data.hasOwnProperty(property))
//                     (<any>this)[property] = (<any>data)[property];
//             }
//         }
//     }
//
//     init(_data?: any) {
//         if (_data) {
//             if (Array.isArray(_data["items"])) {
//                 this.items = [] as any;
//                 for (let item of _data["items"])
//                     this.items!.push(IdentityUserDto.fromJS(item));
//             }
//             this.totalCount = _data["totalCount"];
//         }
//     }
//
//     static fromJS(data: any): PagedResultDto_1OfOfIdentityUserDtoAndContractsAnd_0AndCulture_neutralAndPublicKeyToken_null {
//         data = typeof data === 'object' ? data : {};
//         let result = new PagedResultDto_1OfOfIdentityUserDtoAndContractsAnd_0AndCulture_neutralAndPublicKeyToken_null();
//         result.init(data);
//         return result;
//     }
//
//     toJSON(data?: any) {
//         data = typeof data === 'object' ? data : {};
//         if (Array.isArray(this.items)) {
//             data["items"] = [];
//             for (let item of this.items)
//                 data["items"].push(item.toJSON());
//         }
//         data["totalCount"] = this.totalCount;
//         return data;
//     }
// }
//
// export interface IPagedResultDto_1OfOfIdentityUserDtoAndContractsAnd_0AndCulture_neutralAndPublicKeyToken_null {
//     items: IdentityUserDto[] | undefined;
//     totalCount: number;
// }
//
// export class PagedResultDto_1OfOfOrganizationUnitWithDetailsDtoAndContractsAnd_0AndCulture_neutralAndPublicKeyToken_null implements IPagedResultDto_1OfOfOrganizationUnitWithDetailsDtoAndContractsAnd_0AndCulture_neutralAndPublicKeyToken_null {
//     items!: OrganizationUnitWithDetailsDto[] | undefined;
//     totalCount!: number;
//
//     constructor(data?: IPagedResultDto_1OfOfOrganizationUnitWithDetailsDtoAndContractsAnd_0AndCulture_neutralAndPublicKeyToken_null) {
//         if (data) {
//             for (var property in data) {
//                 if (data.hasOwnProperty(property))
//                     (<any>this)[property] = (<any>data)[property];
//             }
//         }
//     }
//
//     init(_data?: any) {
//         if (_data) {
//             if (Array.isArray(_data["items"])) {
//                 this.items = [] as any;
//                 for (let item of _data["items"])
//                     this.items!.push(OrganizationUnitWithDetailsDto.fromJS(item));
//             }
//             this.totalCount = _data["totalCount"];
//         }
//     }
//
//     static fromJS(data: any): PagedResultDto_1OfOfOrganizationUnitWithDetailsDtoAndContractsAnd_0AndCulture_neutralAndPublicKeyToken_null {
//         data = typeof data === 'object' ? data : {};
//         let result = new PagedResultDto_1OfOfOrganizationUnitWithDetailsDtoAndContractsAnd_0AndCulture_neutralAndPublicKeyToken_null();
//         result.init(data);
//         return result;
//     }
//
//     toJSON(data?: any) {
//         data = typeof data === 'object' ? data : {};
//         if (Array.isArray(this.items)) {
//             data["items"] = [];
//             for (let item of this.items)
//                 data["items"].push(item.toJSON());
//         }
//         data["totalCount"] = this.totalCount;
//         return data;
//     }
// }
//
// export interface IPagedResultDto_1OfOfOrganizationUnitWithDetailsDtoAndContractsAnd_0AndCulture_neutralAndPublicKeyToken_null {
//     items: OrganizationUnitWithDetailsDto[] | undefined;
//     totalCount: number;
// }
//
// export class PagedResultDto_1OfOfApiResourceWithDetailsDtoAndContractsAnd_0AndCulture_neutralAndPublicKeyToken_null implements IPagedResultDto_1OfOfApiResourceWithDetailsDtoAndContractsAnd_0AndCulture_neutralAndPublicKeyToken_null {
//     items!: ApiResourceWithDetailsDto[] | undefined;
//     totalCount!: number;
//
//     constructor(data?: IPagedResultDto_1OfOfApiResourceWithDetailsDtoAndContractsAnd_0AndCulture_neutralAndPublicKeyToken_null) {
//         if (data) {
//             for (var property in data) {
//                 if (data.hasOwnProperty(property))
//                     (<any>this)[property] = (<any>data)[property];
//             }
//         }
//     }
//
//     init(_data?: any) {
//         if (_data) {
//             if (Array.isArray(_data["items"])) {
//                 this.items = [] as any;
//                 for (let item of _data["items"])
//                     this.items!.push(ApiResourceWithDetailsDto.fromJS(item));
//             }
//             this.totalCount = _data["totalCount"];
//         }
//     }
//
//     static fromJS(data: any): PagedResultDto_1OfOfApiResourceWithDetailsDtoAndContractsAnd_0AndCulture_neutralAndPublicKeyToken_null {
//         data = typeof data === 'object' ? data : {};
//         let result = new PagedResultDto_1OfOfApiResourceWithDetailsDtoAndContractsAnd_0AndCulture_neutralAndPublicKeyToken_null();
//         result.init(data);
//         return result;
//     }
//
//     toJSON(data?: any) {
//         data = typeof data === 'object' ? data : {};
//         if (Array.isArray(this.items)) {
//             data["items"] = [];
//             for (let item of this.items)
//                 data["items"].push(item.toJSON());
//         }
//         data["totalCount"] = this.totalCount;
//         return data;
//     }
// }
//
// export interface IPagedResultDto_1OfOfApiResourceWithDetailsDtoAndContractsAnd_0AndCulture_neutralAndPublicKeyToken_null {
//     items: ApiResourceWithDetailsDto[] | undefined;
//     totalCount: number;
// }
//
// export class PagedResultDto_1OfOfApiScopeWithDetailsDtoAndContractsAnd_0AndCulture_neutralAndPublicKeyToken_null implements IPagedResultDto_1OfOfApiScopeWithDetailsDtoAndContractsAnd_0AndCulture_neutralAndPublicKeyToken_null {
//     items!: ApiScopeWithDetailsDto[] | undefined;
//     totalCount!: number;
//
//     constructor(data?: IPagedResultDto_1OfOfApiScopeWithDetailsDtoAndContractsAnd_0AndCulture_neutralAndPublicKeyToken_null) {
//         if (data) {
//             for (var property in data) {
//                 if (data.hasOwnProperty(property))
//                     (<any>this)[property] = (<any>data)[property];
//             }
//         }
//     }
//
//     init(_data?: any) {
//         if (_data) {
//             if (Array.isArray(_data["items"])) {
//                 this.items = [] as any;
//                 for (let item of _data["items"])
//                     this.items!.push(ApiScopeWithDetailsDto.fromJS(item));
//             }
//             this.totalCount = _data["totalCount"];
//         }
//     }
//
//     static fromJS(data: any): PagedResultDto_1OfOfApiScopeWithDetailsDtoAndContractsAnd_0AndCulture_neutralAndPublicKeyToken_null {
//         data = typeof data === 'object' ? data : {};
//         let result = new PagedResultDto_1OfOfApiScopeWithDetailsDtoAndContractsAnd_0AndCulture_neutralAndPublicKeyToken_null();
//         result.init(data);
//         return result;
//     }
//
//     toJSON(data?: any) {
//         data = typeof data === 'object' ? data : {};
//         if (Array.isArray(this.items)) {
//             data["items"] = [];
//             for (let item of this.items)
//                 data["items"].push(item.toJSON());
//         }
//         data["totalCount"] = this.totalCount;
//         return data;
//     }
// }
//
// export interface IPagedResultDto_1OfOfApiScopeWithDetailsDtoAndContractsAnd_0AndCulture_neutralAndPublicKeyToken_null {
//     items: ApiScopeWithDetailsDto[] | undefined;
//     totalCount: number;
// }
//
// export class PagedResultDto_1OfOfClientWithDetailsDtoAndContractsAnd_0AndCulture_neutralAndPublicKeyToken_null implements IPagedResultDto_1OfOfClientWithDetailsDtoAndContractsAnd_0AndCulture_neutralAndPublicKeyToken_null {
//     items!: ClientWithDetailsDto[] | undefined;
//     totalCount!: number;
//
//     constructor(data?: IPagedResultDto_1OfOfClientWithDetailsDtoAndContractsAnd_0AndCulture_neutralAndPublicKeyToken_null) {
//         if (data) {
//             for (var property in data) {
//                 if (data.hasOwnProperty(property))
//                     (<any>this)[property] = (<any>data)[property];
//             }
//         }
//     }
//
//     init(_data?: any) {
//         if (_data) {
//             if (Array.isArray(_data["items"])) {
//                 this.items = [] as any;
//                 for (let item of _data["items"])
//                     this.items!.push(ClientWithDetailsDto.fromJS(item));
//             }
//             this.totalCount = _data["totalCount"];
//         }
//     }
//
//     static fromJS(data: any): PagedResultDto_1OfOfClientWithDetailsDtoAndContractsAnd_0AndCulture_neutralAndPublicKeyToken_null {
//         data = typeof data === 'object' ? data : {};
//         let result = new PagedResultDto_1OfOfClientWithDetailsDtoAndContractsAnd_0AndCulture_neutralAndPublicKeyToken_null();
//         result.init(data);
//         return result;
//     }
//
//     toJSON(data?: any) {
//         data = typeof data === 'object' ? data : {};
//         if (Array.isArray(this.items)) {
//             data["items"] = [];
//             for (let item of this.items)
//                 data["items"].push(item.toJSON());
//         }
//         data["totalCount"] = this.totalCount;
//         return data;
//     }
// }
//
// export interface IPagedResultDto_1OfOfClientWithDetailsDtoAndContractsAnd_0AndCulture_neutralAndPublicKeyToken_null {
//     items: ClientWithDetailsDto[] | undefined;
//     totalCount: number;
// }
//
// export class PagedResultDto_1OfOfIdentityResourceWithDetailsDtoAndContractsAnd_0AndCulture_neutralAndPublicKeyToken_null implements IPagedResultDto_1OfOfIdentityResourceWithDetailsDtoAndContractsAnd_0AndCulture_neutralAndPublicKeyToken_null {
//     items!: IdentityResourceWithDetailsDto[] | undefined;
//     totalCount!: number;
//
//     constructor(data?: IPagedResultDto_1OfOfIdentityResourceWithDetailsDtoAndContractsAnd_0AndCulture_neutralAndPublicKeyToken_null) {
//         if (data) {
//             for (var property in data) {
//                 if (data.hasOwnProperty(property))
//                     (<any>this)[property] = (<any>data)[property];
//             }
//         }
//     }
//
//     init(_data?: any) {
//         if (_data) {
//             if (Array.isArray(_data["items"])) {
//                 this.items = [] as any;
//                 for (let item of _data["items"])
//                     this.items!.push(IdentityResourceWithDetailsDto.fromJS(item));
//             }
//             this.totalCount = _data["totalCount"];
//         }
//     }
//
//     static fromJS(data: any): PagedResultDto_1OfOfIdentityResourceWithDetailsDtoAndContractsAnd_0AndCulture_neutralAndPublicKeyToken_null {
//         data = typeof data === 'object' ? data : {};
//         let result = new PagedResultDto_1OfOfIdentityResourceWithDetailsDtoAndContractsAnd_0AndCulture_neutralAndPublicKeyToken_null();
//         result.init(data);
//         return result;
//     }
//
//     toJSON(data?: any) {
//         data = typeof data === 'object' ? data : {};
//         if (Array.isArray(this.items)) {
//             data["items"] = [];
//             for (let item of this.items)
//                 data["items"].push(item.toJSON());
//         }
//         data["totalCount"] = this.totalCount;
//         return data;
//     }
// }
//
// export interface IPagedResultDto_1OfOfIdentityResourceWithDetailsDtoAndContractsAnd_0AndCulture_neutralAndPublicKeyToken_null {
//     items: IdentityResourceWithDetailsDto[] | undefined;
//     totalCount: number;
// }
//
// export class PagedResultDto_1OfOfLanguageDtoAndContractsAnd_0AndCulture_neutralAndPublicKeyToken_null implements IPagedResultDto_1OfOfLanguageDtoAndContractsAnd_0AndCulture_neutralAndPublicKeyToken_null {
//     items!: LanguageDto[] | undefined;
//     totalCount!: number;
//
//     constructor(data?: IPagedResultDto_1OfOfLanguageDtoAndContractsAnd_0AndCulture_neutralAndPublicKeyToken_null) {
//         if (data) {
//             for (var property in data) {
//                 if (data.hasOwnProperty(property))
//                     (<any>this)[property] = (<any>data)[property];
//             }
//         }
//     }
//
//     init(_data?: any) {
//         if (_data) {
//             if (Array.isArray(_data["items"])) {
//                 this.items = [] as any;
//                 for (let item of _data["items"])
//                     this.items!.push(LanguageDto.fromJS(item));
//             }
//             this.totalCount = _data["totalCount"];
//         }
//     }
//
//     static fromJS(data: any): PagedResultDto_1OfOfLanguageDtoAndContractsAnd_0AndCulture_neutralAndPublicKeyToken_null {
//         data = typeof data === 'object' ? data : {};
//         let result = new PagedResultDto_1OfOfLanguageDtoAndContractsAnd_0AndCulture_neutralAndPublicKeyToken_null();
//         result.init(data);
//         return result;
//     }
//
//     toJSON(data?: any) {
//         data = typeof data === 'object' ? data : {};
//         if (Array.isArray(this.items)) {
//             data["items"] = [];
//             for (let item of this.items)
//                 data["items"].push(item.toJSON());
//         }
//         data["totalCount"] = this.totalCount;
//         return data;
//     }
// }
//
// export interface IPagedResultDto_1OfOfLanguageDtoAndContractsAnd_0AndCulture_neutralAndPublicKeyToken_null {
//     items: LanguageDto[] | undefined;
//     totalCount: number;
// }
//
// export class PagedResultDto_1OfOfLanguageTextDtoAndContractsAnd_0AndCulture_neutralAndPublicKeyToken_null implements IPagedResultDto_1OfOfLanguageTextDtoAndContractsAnd_0AndCulture_neutralAndPublicKeyToken_null {
//     items!: LanguageTextDto[] | undefined;
//     totalCount!: number;
//
//     constructor(data?: IPagedResultDto_1OfOfLanguageTextDtoAndContractsAnd_0AndCulture_neutralAndPublicKeyToken_null) {
//         if (data) {
//             for (var property in data) {
//                 if (data.hasOwnProperty(property))
//                     (<any>this)[property] = (<any>data)[property];
//             }
//         }
//     }
//
//     init(_data?: any) {
//         if (_data) {
//             if (Array.isArray(_data["items"])) {
//                 this.items = [] as any;
//                 for (let item of _data["items"])
//                     this.items!.push(LanguageTextDto.fromJS(item));
//             }
//             this.totalCount = _data["totalCount"];
//         }
//     }
//
//     static fromJS(data: any): PagedResultDto_1OfOfLanguageTextDtoAndContractsAnd_0AndCulture_neutralAndPublicKeyToken_null {
//         data = typeof data === 'object' ? data : {};
//         let result = new PagedResultDto_1OfOfLanguageTextDtoAndContractsAnd_0AndCulture_neutralAndPublicKeyToken_null();
//         result.init(data);
//         return result;
//     }
//
//     toJSON(data?: any) {
//         data = typeof data === 'object' ? data : {};
//         if (Array.isArray(this.items)) {
//             data["items"] = [];
//             for (let item of this.items)
//                 data["items"].push(item.toJSON());
//         }
//         data["totalCount"] = this.totalCount;
//         return data;
//     }
// }
//
// export interface IPagedResultDto_1OfOfLanguageTextDtoAndContractsAnd_0AndCulture_neutralAndPublicKeyToken_null {
//     items: LanguageTextDto[] | undefined;
//     totalCount: number;
// }
//
// export class PagedResultDto_1OfOfTemplateDefinitionDtoAndContractsAnd_0AndCulture_neutralAndPublicKeyToken_null implements IPagedResultDto_1OfOfTemplateDefinitionDtoAndContractsAnd_0AndCulture_neutralAndPublicKeyToken_null {
//     items!: TemplateDefinitionDto[] | undefined;
//     totalCount!: number;
//
//     constructor(data?: IPagedResultDto_1OfOfTemplateDefinitionDtoAndContractsAnd_0AndCulture_neutralAndPublicKeyToken_null) {
//         if (data) {
//             for (var property in data) {
//                 if (data.hasOwnProperty(property))
//                     (<any>this)[property] = (<any>data)[property];
//             }
//         }
//     }
//
//     init(_data?: any) {
//         if (_data) {
//             if (Array.isArray(_data["items"])) {
//                 this.items = [] as any;
//                 for (let item of _data["items"])
//                     this.items!.push(TemplateDefinitionDto.fromJS(item));
//             }
//             this.totalCount = _data["totalCount"];
//         }
//     }
//
//     static fromJS(data: any): PagedResultDto_1OfOfTemplateDefinitionDtoAndContractsAnd_0AndCulture_neutralAndPublicKeyToken_null {
//         data = typeof data === 'object' ? data : {};
//         let result = new PagedResultDto_1OfOfTemplateDefinitionDtoAndContractsAnd_0AndCulture_neutralAndPublicKeyToken_null();
//         result.init(data);
//         return result;
//     }
//
//     toJSON(data?: any) {
//         data = typeof data === 'object' ? data : {};
//         if (Array.isArray(this.items)) {
//             data["items"] = [];
//             for (let item of this.items)
//                 data["items"].push(item.toJSON());
//         }
//         data["totalCount"] = this.totalCount;
//         return data;
//     }
// }
//
// export interface IPagedResultDto_1OfOfTemplateDefinitionDtoAndContractsAnd_0AndCulture_neutralAndPublicKeyToken_null {
//     items: TemplateDefinitionDto[] | undefined;
//     totalCount: number;
// }
//
// export class PagedResultDto_1OfOfDirectoryContentDtoAndContractsAnd_0AndCulture_neutralAndPublicKeyToken_null implements IPagedResultDto_1OfOfDirectoryContentDtoAndContractsAnd_0AndCulture_neutralAndPublicKeyToken_null {
//     items!: DirectoryContentDto[] | undefined;
//     totalCount!: number;
//
//     constructor(data?: IPagedResultDto_1OfOfDirectoryContentDtoAndContractsAnd_0AndCulture_neutralAndPublicKeyToken_null) {
//         if (data) {
//             for (var property in data) {
//                 if (data.hasOwnProperty(property))
//                     (<any>this)[property] = (<any>data)[property];
//             }
//         }
//     }
//
//     init(_data?: any) {
//         if (_data) {
//             if (Array.isArray(_data["items"])) {
//                 this.items = [] as any;
//                 for (let item of _data["items"])
//                     this.items!.push(DirectoryContentDto.fromJS(item));
//             }
//             this.totalCount = _data["totalCount"];
//         }
//     }
//
//     static fromJS(data: any): PagedResultDto_1OfOfDirectoryContentDtoAndContractsAnd_0AndCulture_neutralAndPublicKeyToken_null {
//         data = typeof data === 'object' ? data : {};
//         let result = new PagedResultDto_1OfOfDirectoryContentDtoAndContractsAnd_0AndCulture_neutralAndPublicKeyToken_null();
//         result.init(data);
//         return result;
//     }
//
//     toJSON(data?: any) {
//         data = typeof data === 'object' ? data : {};
//         if (Array.isArray(this.items)) {
//             data["items"] = [];
//             for (let item of this.items)
//                 data["items"].push(item.toJSON());
//         }
//         data["totalCount"] = this.totalCount;
//         return data;
//     }
// }
//
// export interface IPagedResultDto_1OfOfDirectoryContentDtoAndContractsAnd_0AndCulture_neutralAndPublicKeyToken_null {
//     items: DirectoryContentDto[] | undefined;
//     totalCount: number;
// }
//
// export class PagedResultDto_1OfOfEditionDtoAndContractsAnd_0AndCulture_neutralAndPublicKeyToken_null implements IPagedResultDto_1OfOfEditionDtoAndContractsAnd_0AndCulture_neutralAndPublicKeyToken_null {
//     items!: EditionDto[] | undefined;
//     totalCount!: number;
//
//     constructor(data?: IPagedResultDto_1OfOfEditionDtoAndContractsAnd_0AndCulture_neutralAndPublicKeyToken_null) {
//         if (data) {
//             for (var property in data) {
//                 if (data.hasOwnProperty(property))
//                     (<any>this)[property] = (<any>data)[property];
//             }
//         }
//     }
//
//     init(_data?: any) {
//         if (_data) {
//             if (Array.isArray(_data["items"])) {
//                 this.items = [] as any;
//                 for (let item of _data["items"])
//                     this.items!.push(EditionDto.fromJS(item));
//             }
//             this.totalCount = _data["totalCount"];
//         }
//     }
//
//     static fromJS(data: any): PagedResultDto_1OfOfEditionDtoAndContractsAnd_0AndCulture_neutralAndPublicKeyToken_null {
//         data = typeof data === 'object' ? data : {};
//         let result = new PagedResultDto_1OfOfEditionDtoAndContractsAnd_0AndCulture_neutralAndPublicKeyToken_null();
//         result.init(data);
//         return result;
//     }
//
//     toJSON(data?: any) {
//         data = typeof data === 'object' ? data : {};
//         if (Array.isArray(this.items)) {
//             data["items"] = [];
//             for (let item of this.items)
//                 data["items"].push(item.toJSON());
//         }
//         data["totalCount"] = this.totalCount;
//         return data;
//     }
// }
//
// export interface IPagedResultDto_1OfOfEditionDtoAndContractsAnd_0AndCulture_neutralAndPublicKeyToken_null {
//     items: EditionDto[] | undefined;
//     totalCount: number;
// }
//
// export class PagedResultDto_1OfOfSaasTenantDtoAndContractsAnd_0AndCulture_neutralAndPublicKeyToken_null implements IPagedResultDto_1OfOfSaasTenantDtoAndContractsAnd_0AndCulture_neutralAndPublicKeyToken_null {
//     items!: SaasTenantDto[] | undefined;
//     totalCount!: number;
//
//     constructor(data?: IPagedResultDto_1OfOfSaasTenantDtoAndContractsAnd_0AndCulture_neutralAndPublicKeyToken_null) {
//         if (data) {
//             for (var property in data) {
//                 if (data.hasOwnProperty(property))
//                     (<any>this)[property] = (<any>data)[property];
//             }
//         }
//     }
//
//     init(_data?: any) {
//         if (_data) {
//             if (Array.isArray(_data["items"])) {
//                 this.items = [] as any;
//                 for (let item of _data["items"])
//                     this.items!.push(SaasTenantDto.fromJS(item));
//             }
//             this.totalCount = _data["totalCount"];
//         }
//     }
//
//     static fromJS(data: any): PagedResultDto_1OfOfSaasTenantDtoAndContractsAnd_0AndCulture_neutralAndPublicKeyToken_null {
//         data = typeof data === 'object' ? data : {};
//         let result = new PagedResultDto_1OfOfSaasTenantDtoAndContractsAnd_0AndCulture_neutralAndPublicKeyToken_null();
//         result.init(data);
//         return result;
//     }
//
//     toJSON(data?: any) {
//         data = typeof data === 'object' ? data : {};
//         if (Array.isArray(this.items)) {
//             data["items"] = [];
//             for (let item of this.items)
//                 data["items"].push(item.toJSON());
//         }
//         data["totalCount"] = this.totalCount;
//         return data;
//     }
// }
//
// export interface IPagedResultDto_1OfOfSaasTenantDtoAndContractsAnd_0AndCulture_neutralAndPublicKeyToken_null {
//     items: SaasTenantDto[] | undefined;
//     totalCount: number;
// }
//
// export class ApplicationAuthConfigurationDto implements IApplicationAuthConfigurationDto {
//     policies!: { [key: string]: boolean; } | undefined;
//     grantedPolicies!: { [key: string]: boolean; } | undefined;
//
//     constructor(data?: IApplicationAuthConfigurationDto) {
//         if (data) {
//             for (var property in data) {
//                 if (data.hasOwnProperty(property))
//                     (<any>this)[property] = (<any>data)[property];
//             }
//         }
//     }
//
//     init(_data?: any) {
//         if (_data) {
//             if (_data["policies"]) {
//                 this.policies = {} as any;
//                 for (let key in _data["policies"]) {
//                     if (_data["policies"].hasOwnProperty(key))
//                         (<any>this.policies)![key] = _data["policies"][key];
//                 }
//             }
//             if (_data["grantedPolicies"]) {
//                 this.grantedPolicies = {} as any;
//                 for (let key in _data["grantedPolicies"]) {
//                     if (_data["grantedPolicies"].hasOwnProperty(key))
//                         (<any>this.grantedPolicies)![key] = _data["grantedPolicies"][key];
//                 }
//             }
//         }
//     }
//
//     static fromJS(data: any): ApplicationAuthConfigurationDto {
//         data = typeof data === 'object' ? data : {};
//         let result = new ApplicationAuthConfigurationDto();
//         result.init(data);
//         return result;
//     }
//
//     toJSON(data?: any) {
//         data = typeof data === 'object' ? data : {};
//         if (this.policies) {
//             data["policies"] = {};
//             for (let key in this.policies) {
//                 if (this.policies.hasOwnProperty(key))
//                     (<any>data["policies"])[key] = this.policies[key];
//             }
//         }
//         if (this.grantedPolicies) {
//             data["grantedPolicies"] = {};
//             for (let key in this.grantedPolicies) {
//                 if (this.grantedPolicies.hasOwnProperty(key))
//                     (<any>data["grantedPolicies"])[key] = this.grantedPolicies[key];
//             }
//         }
//         return data;
//     }
// }
//
// export interface IApplicationAuthConfigurationDto {
//     policies: { [key: string]: boolean; } | undefined;
//     grantedPolicies: { [key: string]: boolean; } | undefined;
// }
//
// export class ApplicationConfigurationDto implements IApplicationConfigurationDto {
//     localization!: ApplicationLocalizationConfigurationDto;
//     auth!: ApplicationAuthConfigurationDto;
//     setting!: ApplicationSettingConfigurationDto;
//     currentUser!: CurrentUserDto;
//     features!: ApplicationFeatureConfigurationDto;
//     multiTenancy!: MultiTenancyInfoDto;
//     currentTenant!: CurrentTenantDto;
//     timing!: TimingDto;
//     clock!: ClockDto;
//     objectExtensions!: ObjectExtensionsDto;
//
//     constructor(data?: IApplicationConfigurationDto) {
//         if (data) {
//             for (var property in data) {
//                 if (data.hasOwnProperty(property))
//                     (<any>this)[property] = (<any>data)[property];
//             }
//         }
//     }
//
//     init(_data?: any) {
//         if (_data) {
//             this.localization = _data["localization"] ? ApplicationLocalizationConfigurationDto.fromJS(_data["localization"]) : <any>undefined;
//             this.auth = _data["auth"] ? ApplicationAuthConfigurationDto.fromJS(_data["auth"]) : <any>undefined;
//             this.setting = _data["setting"] ? ApplicationSettingConfigurationDto.fromJS(_data["setting"]) : <any>undefined;
//             this.currentUser = _data["currentUser"] ? CurrentUserDto.fromJS(_data["currentUser"]) : <any>undefined;
//             this.features = _data["features"] ? ApplicationFeatureConfigurationDto.fromJS(_data["features"]) : <any>undefined;
//             this.multiTenancy = _data["multiTenancy"] ? MultiTenancyInfoDto.fromJS(_data["multiTenancy"]) : <any>undefined;
//             this.currentTenant = _data["currentTenant"] ? CurrentTenantDto.fromJS(_data["currentTenant"]) : <any>undefined;
//             this.timing = _data["timing"] ? TimingDto.fromJS(_data["timing"]) : <any>undefined;
//             this.clock = _data["clock"] ? ClockDto.fromJS(_data["clock"]) : <any>undefined;
//             this.objectExtensions = _data["objectExtensions"] ? ObjectExtensionsDto.fromJS(_data["objectExtensions"]) : <any>undefined;
//         }
//     }
//
//     static fromJS(data: any): ApplicationConfigurationDto {
//         data = typeof data === 'object' ? data : {};
//         let result = new ApplicationConfigurationDto();
//         result.init(data);
//         return result;
//     }
//
//     toJSON(data?: any) {
//         data = typeof data === 'object' ? data : {};
//         data["localization"] = this.localization ? this.localization.toJSON() : <any>undefined;
//         data["auth"] = this.auth ? this.auth.toJSON() : <any>undefined;
//         data["setting"] = this.setting ? this.setting.toJSON() : <any>undefined;
//         data["currentUser"] = this.currentUser ? this.currentUser.toJSON() : <any>undefined;
//         data["features"] = this.features ? this.features.toJSON() : <any>undefined;
//         data["multiTenancy"] = this.multiTenancy ? this.multiTenancy.toJSON() : <any>undefined;
//         data["currentTenant"] = this.currentTenant ? this.currentTenant.toJSON() : <any>undefined;
//         data["timing"] = this.timing ? this.timing.toJSON() : <any>undefined;
//         data["clock"] = this.clock ? this.clock.toJSON() : <any>undefined;
//         data["objectExtensions"] = this.objectExtensions ? this.objectExtensions.toJSON() : <any>undefined;
//         return data;
//     }
// }
//
// export interface IApplicationConfigurationDto {
//     localization: ApplicationLocalizationConfigurationDto;
//     auth: ApplicationAuthConfigurationDto;
//     setting: ApplicationSettingConfigurationDto;
//     currentUser: CurrentUserDto;
//     features: ApplicationFeatureConfigurationDto;
//     multiTenancy: MultiTenancyInfoDto;
//     currentTenant: CurrentTenantDto;
//     timing: TimingDto;
//     clock: ClockDto;
//     objectExtensions: ObjectExtensionsDto;
// }
//
// export class ApplicationFeatureConfigurationDto implements IApplicationFeatureConfigurationDto {
//     values!: { [key: string]: string; } | undefined;
//
//     constructor(data?: IApplicationFeatureConfigurationDto) {
//         if (data) {
//             for (var property in data) {
//                 if (data.hasOwnProperty(property))
//                     (<any>this)[property] = (<any>data)[property];
//             }
//         }
//     }
//
//     init(_data?: any) {
//         if (_data) {
//             if (_data["values"]) {
//                 this.values = {} as any;
//                 for (let key in _data["values"]) {
//                     if (_data["values"].hasOwnProperty(key))
//                         (<any>this.values)![key] = _data["values"][key];
//                 }
//             }
//         }
//     }
//
//     static fromJS(data: any): ApplicationFeatureConfigurationDto {
//         data = typeof data === 'object' ? data : {};
//         let result = new ApplicationFeatureConfigurationDto();
//         result.init(data);
//         return result;
//     }
//
//     toJSON(data?: any) {
//         data = typeof data === 'object' ? data : {};
//         if (this.values) {
//             data["values"] = {};
//             for (let key in this.values) {
//                 if (this.values.hasOwnProperty(key))
//                     (<any>data["values"])[key] = this.values[key];
//             }
//         }
//         return data;
//     }
// }
//
// export interface IApplicationFeatureConfigurationDto {
//     values: { [key: string]: string; } | undefined;
// }
//
// export class ApplicationLocalizationConfigurationDto implements IApplicationLocalizationConfigurationDto {
//     values!: { [key: string]: { [key: string]: string; }; } | undefined;
//     languages!: LanguageInfo[] | undefined;
//     currentCulture!: CurrentCultureDto;
//     defaultResourceName!: string | undefined;
//     languagesMap!: { [key: string]: NameValue[]; } | undefined;
//     languageFilesMap!: { [key: string]: NameValue[]; } | undefined;
//
//     constructor(data?: IApplicationLocalizationConfigurationDto) {
//         if (data) {
//             for (var property in data) {
//                 if (data.hasOwnProperty(property))
//                     (<any>this)[property] = (<any>data)[property];
//             }
//         }
//     }
//
//     init(_data?: any) {
//         if (_data) {
//             if (_data["values"]) {
//                 this.values = {} as any;
//                 for (let key in _data["values"]) {
//                     if (_data["values"].hasOwnProperty(key))
//                         (<any>this.values)![key] = _data["values"][key] !== undefined ? _data["values"][key] : {};
//                 }
//             }
//             if (Array.isArray(_data["languages"])) {
//                 this.languages = [] as any;
//                 for (let item of _data["languages"])
//                     this.languages!.push(LanguageInfo.fromJS(item));
//             }
//             this.currentCulture = _data["currentCulture"] ? CurrentCultureDto.fromJS(_data["currentCulture"]) : <any>undefined;
//             this.defaultResourceName = _data["defaultResourceName"];
//             if (_data["languagesMap"]) {
//                 this.languagesMap = {} as any;
//                 for (let key in _data["languagesMap"]) {
//                     if (_data["languagesMap"].hasOwnProperty(key))
//                         (<any>this.languagesMap)![key] = _data["languagesMap"][key] ? _data["languagesMap"][key].map((i: any) => NameValue.fromJS(i)) : [];
//                 }
//             }
//             if (_data["languageFilesMap"]) {
//                 this.languageFilesMap = {} as any;
//                 for (let key in _data["languageFilesMap"]) {
//                     if (_data["languageFilesMap"].hasOwnProperty(key))
//                         (<any>this.languageFilesMap)![key] = _data["languageFilesMap"][key] ? _data["languageFilesMap"][key].map((i: any) => NameValue.fromJS(i)) : [];
//                 }
//             }
//         }
//     }
//
//     static fromJS(data: any): ApplicationLocalizationConfigurationDto {
//         data = typeof data === 'object' ? data : {};
//         let result = new ApplicationLocalizationConfigurationDto();
//         result.init(data);
//         return result;
//     }
//
//     toJSON(data?: any) {
//         data = typeof data === 'object' ? data : {};
//         if (this.values) {
//             data["values"] = {};
//             for (let key in this.values) {
//                 if (this.values.hasOwnProperty(key))
//                     (<any>data["values"])[key] = this.values[key];
//             }
//         }
//         if (Array.isArray(this.languages)) {
//             data["languages"] = [];
//             for (let item of this.languages)
//                 data["languages"].push(item.toJSON());
//         }
//         data["currentCulture"] = this.currentCulture ? this.currentCulture.toJSON() : <any>undefined;
//         data["defaultResourceName"] = this.defaultResourceName;
//         if (this.languagesMap) {
//             data["languagesMap"] = {};
//             for (let key in this.languagesMap) {
//                 if (this.languagesMap.hasOwnProperty(key))
//                     (<any>data["languagesMap"])[key] = this.languagesMap[key];
//             }
//         }
//         if (this.languageFilesMap) {
//             data["languageFilesMap"] = {};
//             for (let key in this.languageFilesMap) {
//                 if (this.languageFilesMap.hasOwnProperty(key))
//                     (<any>data["languageFilesMap"])[key] = this.languageFilesMap[key];
//             }
//         }
//         return data;
//     }
// }
//
// export interface IApplicationLocalizationConfigurationDto {
//     values: { [key: string]: { [key: string]: string; }; } | undefined;
//     languages: LanguageInfo[] | undefined;
//     currentCulture: CurrentCultureDto;
//     defaultResourceName: string | undefined;
//     languagesMap: { [key: string]: NameValue[]; } | undefined;
//     languageFilesMap: { [key: string]: NameValue[]; } | undefined;
// }
//
// export class ApplicationSettingConfigurationDto implements IApplicationSettingConfigurationDto {
//     values!: { [key: string]: string; } | undefined;
//
//     constructor(data?: IApplicationSettingConfigurationDto) {
//         if (data) {
//             for (var property in data) {
//                 if (data.hasOwnProperty(property))
//                     (<any>this)[property] = (<any>data)[property];
//             }
//         }
//     }
//
//     init(_data?: any) {
//         if (_data) {
//             if (_data["values"]) {
//                 this.values = {} as any;
//                 for (let key in _data["values"]) {
//                     if (_data["values"].hasOwnProperty(key))
//                         (<any>this.values)![key] = _data["values"][key];
//                 }
//             }
//         }
//     }
//
//     static fromJS(data: any): ApplicationSettingConfigurationDto {
//         data = typeof data === 'object' ? data : {};
//         let result = new ApplicationSettingConfigurationDto();
//         result.init(data);
//         return result;
//     }
//
//     toJSON(data?: any) {
//         data = typeof data === 'object' ? data : {};
//         if (this.values) {
//             data["values"] = {};
//             for (let key in this.values) {
//                 if (this.values.hasOwnProperty(key))
//                     (<any>data["values"])[key] = this.values[key];
//             }
//         }
//         return data;
//     }
// }
//
// export interface IApplicationSettingConfigurationDto {
//     values: { [key: string]: string; } | undefined;
// }
//
// export class ClockDto implements IClockDto {
//     kind!: string | undefined;
//
//     constructor(data?: IClockDto) {
//         if (data) {
//             for (var property in data) {
//                 if (data.hasOwnProperty(property))
//                     (<any>this)[property] = (<any>data)[property];
//             }
//         }
//     }
//
//     init(_data?: any) {
//         if (_data) {
//             this.kind = _data["kind"];
//         }
//     }
//
//     static fromJS(data: any): ClockDto {
//         data = typeof data === 'object' ? data : {};
//         let result = new ClockDto();
//         result.init(data);
//         return result;
//     }
//
//     toJSON(data?: any) {
//         data = typeof data === 'object' ? data : {};
//         data["kind"] = this.kind;
//         return data;
//     }
// }
//
// export interface IClockDto {
//     kind: string | undefined;
// }
//
// export class CurrentCultureDto implements ICurrentCultureDto {
//     displayName!: string | undefined;
//     englishName!: string | undefined;
//     threeLetterIsoLanguageName!: string | undefined;
//     twoLetterIsoLanguageName!: string | undefined;
//     isRightToLeft!: boolean;
//     cultureName!: string | undefined;
//     name!: string | undefined;
//     nativeName!: string | undefined;
//     dateTimeFormat!: DateTimeFormatDto;
//
//     constructor(data?: ICurrentCultureDto) {
//         if (data) {
//             for (var property in data) {
//                 if (data.hasOwnProperty(property))
//                     (<any>this)[property] = (<any>data)[property];
//             }
//         }
//     }
//
//     init(_data?: any) {
//         if (_data) {
//             this.displayName = _data["displayName"];
//             this.englishName = _data["englishName"];
//             this.threeLetterIsoLanguageName = _data["threeLetterIsoLanguageName"];
//             this.twoLetterIsoLanguageName = _data["twoLetterIsoLanguageName"];
//             this.isRightToLeft = _data["isRightToLeft"];
//             this.cultureName = _data["cultureName"];
//             this.name = _data["name"];
//             this.nativeName = _data["nativeName"];
//             this.dateTimeFormat = _data["dateTimeFormat"] ? DateTimeFormatDto.fromJS(_data["dateTimeFormat"]) : <any>undefined;
//         }
//     }
//
//     static fromJS(data: any): CurrentCultureDto {
//         data = typeof data === 'object' ? data : {};
//         let result = new CurrentCultureDto();
//         result.init(data);
//         return result;
//     }
//
//     toJSON(data?: any) {
//         data = typeof data === 'object' ? data : {};
//         data["displayName"] = this.displayName;
//         data["englishName"] = this.englishName;
//         data["threeLetterIsoLanguageName"] = this.threeLetterIsoLanguageName;
//         data["twoLetterIsoLanguageName"] = this.twoLetterIsoLanguageName;
//         data["isRightToLeft"] = this.isRightToLeft;
//         data["cultureName"] = this.cultureName;
//         data["name"] = this.name;
//         data["nativeName"] = this.nativeName;
//         data["dateTimeFormat"] = this.dateTimeFormat ? this.dateTimeFormat.toJSON() : <any>undefined;
//         return data;
//     }
// }
//
// export interface ICurrentCultureDto {
//     displayName: string | undefined;
//     englishName: string | undefined;
//     threeLetterIsoLanguageName: string | undefined;
//     twoLetterIsoLanguageName: string | undefined;
//     isRightToLeft: boolean;
//     cultureName: string | undefined;
//     name: string | undefined;
//     nativeName: string | undefined;
//     dateTimeFormat: DateTimeFormatDto;
// }
//
// export class CurrentUserDto implements ICurrentUserDto {
//     isAuthenticated!: boolean;
//     id!: string | undefined;
//     tenantId!: string | undefined;
//     userName!: string | undefined;
//     name!: string | undefined;
//     surName!: string | undefined;
//     email!: string | undefined;
//     emailVerified!: boolean;
//     phoneNumber!: string | undefined;
//     phoneNumberVerified!: boolean;
//     roles!: string[] | undefined;
//
//     constructor(data?: ICurrentUserDto) {
//         if (data) {
//             for (var property in data) {
//                 if (data.hasOwnProperty(property))
//                     (<any>this)[property] = (<any>data)[property];
//             }
//         }
//     }
//
//     init(_data?: any) {
//         if (_data) {
//             this.isAuthenticated = _data["isAuthenticated"];
//             this.id = _data["id"];
//             this.tenantId = _data["tenantId"];
//             this.userName = _data["userName"];
//             this.name = _data["name"];
//             this.surName = _data["surName"];
//             this.email = _data["email"];
//             this.emailVerified = _data["emailVerified"];
//             this.phoneNumber = _data["phoneNumber"];
//             this.phoneNumberVerified = _data["phoneNumberVerified"];
//             if (Array.isArray(_data["roles"])) {
//                 this.roles = [] as any;
//                 for (let item of _data["roles"])
//                     this.roles!.push(item);
//             }
//         }
//     }
//
//     static fromJS(data: any): CurrentUserDto {
//         data = typeof data === 'object' ? data : {};
//         let result = new CurrentUserDto();
//         result.init(data);
//         return result;
//     }
//
//     toJSON(data?: any) {
//         data = typeof data === 'object' ? data : {};
//         data["isAuthenticated"] = this.isAuthenticated;
//         data["id"] = this.id;
//         data["tenantId"] = this.tenantId;
//         data["userName"] = this.userName;
//         data["name"] = this.name;
//         data["surName"] = this.surName;
//         data["email"] = this.email;
//         data["emailVerified"] = this.emailVerified;
//         data["phoneNumber"] = this.phoneNumber;
//         data["phoneNumberVerified"] = this.phoneNumberVerified;
//         if (Array.isArray(this.roles)) {
//             data["roles"] = [];
//             for (let item of this.roles)
//                 data["roles"].push(item);
//         }
//         return data;
//     }
// }
//
// export interface ICurrentUserDto {
//     isAuthenticated: boolean;
//     id: string | undefined;
//     tenantId: string | undefined;
//     userName: string | undefined;
//     name: string | undefined;
//     surName: string | undefined;
//     email: string | undefined;
//     emailVerified: boolean;
//     phoneNumber: string | undefined;
//     phoneNumberVerified: boolean;
//     roles: string[] | undefined;
// }
//
// export class DateTimeFormatDto implements IDateTimeFormatDto {
//     calendarAlgorithmType!: string | undefined;
//     dateTimeFormatLong!: string | undefined;
//     shortDatePattern!: string | undefined;
//     fullDateTimePattern!: string | undefined;
//     dateSeparator!: string | undefined;
//     shortTimePattern!: string | undefined;
//     longTimePattern!: string | undefined;
//
//     constructor(data?: IDateTimeFormatDto) {
//         if (data) {
//             for (var property in data) {
//                 if (data.hasOwnProperty(property))
//                     (<any>this)[property] = (<any>data)[property];
//             }
//         }
//     }
//
//     init(_data?: any) {
//         if (_data) {
//             this.calendarAlgorithmType = _data["calendarAlgorithmType"];
//             this.dateTimeFormatLong = _data["dateTimeFormatLong"];
//             this.shortDatePattern = _data["shortDatePattern"];
//             this.fullDateTimePattern = _data["fullDateTimePattern"];
//             this.dateSeparator = _data["dateSeparator"];
//             this.shortTimePattern = _data["shortTimePattern"];
//             this.longTimePattern = _data["longTimePattern"];
//         }
//     }
//
//     static fromJS(data: any): DateTimeFormatDto {
//         data = typeof data === 'object' ? data : {};
//         let result = new DateTimeFormatDto();
//         result.init(data);
//         return result;
//     }
//
//     toJSON(data?: any) {
//         data = typeof data === 'object' ? data : {};
//         data["calendarAlgorithmType"] = this.calendarAlgorithmType;
//         data["dateTimeFormatLong"] = this.dateTimeFormatLong;
//         data["shortDatePattern"] = this.shortDatePattern;
//         data["fullDateTimePattern"] = this.fullDateTimePattern;
//         data["dateSeparator"] = this.dateSeparator;
//         data["shortTimePattern"] = this.shortTimePattern;
//         data["longTimePattern"] = this.longTimePattern;
//         return data;
//     }
// }
//
// export interface IDateTimeFormatDto {
//     calendarAlgorithmType: string | undefined;
//     dateTimeFormatLong: string | undefined;
//     shortDatePattern: string | undefined;
//     fullDateTimePattern: string | undefined;
//     dateSeparator: string | undefined;
//     shortTimePattern: string | undefined;
//     longTimePattern: string | undefined;
// }
//
// export class IanaTimeZone implements IIanaTimeZone {
//     timeZoneName!: string | undefined;
//
//     constructor(data?: IIanaTimeZone) {
//         if (data) {
//             for (var property in data) {
//                 if (data.hasOwnProperty(property))
//                     (<any>this)[property] = (<any>data)[property];
//             }
//         }
//     }
//
//     init(_data?: any) {
//         if (_data) {
//             this.timeZoneName = _data["timeZoneName"];
//         }
//     }
//
//     static fromJS(data: any): IanaTimeZone {
//         data = typeof data === 'object' ? data : {};
//         let result = new IanaTimeZone();
//         result.init(data);
//         return result;
//     }
//
//     toJSON(data?: any) {
//         data = typeof data === 'object' ? data : {};
//         data["timeZoneName"] = this.timeZoneName;
//         return data;
//     }
// }
//
// export interface IIanaTimeZone {
//     timeZoneName: string | undefined;
// }
//
// export class EntityExtensionDto implements IEntityExtensionDto {
//     properties!: { [key: string]: ExtensionPropertyDto; } | undefined;
//     configuration!: { [key: string]: any; } | undefined;
//
//     constructor(data?: IEntityExtensionDto) {
//         if (data) {
//             for (var property in data) {
//                 if (data.hasOwnProperty(property))
//                     (<any>this)[property] = (<any>data)[property];
//             }
//         }
//     }
//
//     init(_data?: any) {
//         if (_data) {
//             if (_data["properties"]) {
//                 this.properties = {} as any;
//                 for (let key in _data["properties"]) {
//                     if (_data["properties"].hasOwnProperty(key))
//                         (<any>this.properties)![key] = _data["properties"][key] ? ExtensionPropertyDto.fromJS(_data["properties"][key]) : new ExtensionPropertyDto();
//                 }
//             }
//             if (_data["configuration"]) {
//                 this.configuration = {} as any;
//                 for (let key in _data["configuration"]) {
//                     if (_data["configuration"].hasOwnProperty(key))
//                         (<any>this.configuration)![key] = _data["configuration"][key];
//                 }
//             }
//         }
//     }
//
//     static fromJS(data: any): EntityExtensionDto {
//         data = typeof data === 'object' ? data : {};
//         let result = new EntityExtensionDto();
//         result.init(data);
//         return result;
//     }
//
//     toJSON(data?: any) {
//         data = typeof data === 'object' ? data : {};
//         if (this.properties) {
//             data["properties"] = {};
//             for (let key in this.properties) {
//                 if (this.properties.hasOwnProperty(key))
//                     (<any>data["properties"])[key] = this.properties[key] ? this.properties[key].toJSON() : <any>undefined;
//             }
//         }
//         if (this.configuration) {
//             data["configuration"] = {};
//             for (let key in this.configuration) {
//                 if (this.configuration.hasOwnProperty(key))
//                     (<any>data["configuration"])[key] = this.configuration[key];
//             }
//         }
//         return data;
//     }
// }
//
// export interface IEntityExtensionDto {
//     properties: { [key: string]: ExtensionPropertyDto; } | undefined;
//     configuration: { [key: string]: any; } | undefined;
// }
//
// export class ExtensionEnumDto implements IExtensionEnumDto {
//     fields!: ExtensionEnumFieldDto[] | undefined;
//     localizationResource!: string | undefined;
//
//     constructor(data?: IExtensionEnumDto) {
//         if (data) {
//             for (var property in data) {
//                 if (data.hasOwnProperty(property))
//                     (<any>this)[property] = (<any>data)[property];
//             }
//         }
//     }
//
//     init(_data?: any) {
//         if (_data) {
//             if (Array.isArray(_data["fields"])) {
//                 this.fields = [] as any;
//                 for (let item of _data["fields"])
//                     this.fields!.push(ExtensionEnumFieldDto.fromJS(item));
//             }
//             this.localizationResource = _data["localizationResource"];
//         }
//     }
//
//     static fromJS(data: any): ExtensionEnumDto {
//         data = typeof data === 'object' ? data : {};
//         let result = new ExtensionEnumDto();
//         result.init(data);
//         return result;
//     }
//
//     toJSON(data?: any) {
//         data = typeof data === 'object' ? data : {};
//         if (Array.isArray(this.fields)) {
//             data["fields"] = [];
//             for (let item of this.fields)
//                 data["fields"].push(item.toJSON());
//         }
//         data["localizationResource"] = this.localizationResource;
//         return data;
//     }
// }
//
// export interface IExtensionEnumDto {
//     fields: ExtensionEnumFieldDto[] | undefined;
//     localizationResource: string | undefined;
// }
//
// export class ExtensionEnumFieldDto implements IExtensionEnumFieldDto {
//     name!: string | undefined;
//     value!: any | undefined;
//
//     constructor(data?: IExtensionEnumFieldDto) {
//         if (data) {
//             for (var property in data) {
//                 if (data.hasOwnProperty(property))
//                     (<any>this)[property] = (<any>data)[property];
//             }
//         }
//     }
//
//     init(_data?: any) {
//         if (_data) {
//             this.name = _data["name"];
//             this.value = _data["value"];
//         }
//     }
//
//     static fromJS(data: any): ExtensionEnumFieldDto {
//         data = typeof data === 'object' ? data : {};
//         let result = new ExtensionEnumFieldDto();
//         result.init(data);
//         return result;
//     }
//
//     toJSON(data?: any) {
//         data = typeof data === 'object' ? data : {};
//         data["name"] = this.name;
//         data["value"] = this.value;
//         return data;
//     }
// }
//
// export interface IExtensionEnumFieldDto {
//     name: string | undefined;
//     value: any | undefined;
// }
//
// export class ExtensionPropertyApiCreateDto implements IExtensionPropertyApiCreateDto {
//     isAvailable!: boolean;
//
//     constructor(data?: IExtensionPropertyApiCreateDto) {
//         if (data) {
//             for (var property in data) {
//                 if (data.hasOwnProperty(property))
//                     (<any>this)[property] = (<any>data)[property];
//             }
//         }
//     }
//
//     init(_data?: any) {
//         if (_data) {
//             this.isAvailable = _data["isAvailable"];
//         }
//     }
//
//     static fromJS(data: any): ExtensionPropertyApiCreateDto {
//         data = typeof data === 'object' ? data : {};
//         let result = new ExtensionPropertyApiCreateDto();
//         result.init(data);
//         return result;
//     }
//
//     toJSON(data?: any) {
//         data = typeof data === 'object' ? data : {};
//         data["isAvailable"] = this.isAvailable;
//         return data;
//     }
// }
//
// export interface IExtensionPropertyApiCreateDto {
//     isAvailable: boolean;
// }
//
// export class ExtensionPropertyApiDto implements IExtensionPropertyApiDto {
//     onGet!: ExtensionPropertyApiGetDto;
//     onCreate!: ExtensionPropertyApiCreateDto;
//     onUpdate!: ExtensionPropertyApiUpdateDto;
//
//     constructor(data?: IExtensionPropertyApiDto) {
//         if (data) {
//             for (var property in data) {
//                 if (data.hasOwnProperty(property))
//                     (<any>this)[property] = (<any>data)[property];
//             }
//         }
//     }
//
//     init(_data?: any) {
//         if (_data) {
//             this.onGet = _data["onGet"] ? ExtensionPropertyApiGetDto.fromJS(_data["onGet"]) : <any>undefined;
//             this.onCreate = _data["onCreate"] ? ExtensionPropertyApiCreateDto.fromJS(_data["onCreate"]) : <any>undefined;
//             this.onUpdate = _data["onUpdate"] ? ExtensionPropertyApiUpdateDto.fromJS(_data["onUpdate"]) : <any>undefined;
//         }
//     }
//
//     static fromJS(data: any): ExtensionPropertyApiDto {
//         data = typeof data === 'object' ? data : {};
//         let result = new ExtensionPropertyApiDto();
//         result.init(data);
//         return result;
//     }
//
//     toJSON(data?: any) {
//         data = typeof data === 'object' ? data : {};
//         data["onGet"] = this.onGet ? this.onGet.toJSON() : <any>undefined;
//         data["onCreate"] = this.onCreate ? this.onCreate.toJSON() : <any>undefined;
//         data["onUpdate"] = this.onUpdate ? this.onUpdate.toJSON() : <any>undefined;
//         return data;
//     }
// }
//
// export interface IExtensionPropertyApiDto {
//     onGet: ExtensionPropertyApiGetDto;
//     onCreate: ExtensionPropertyApiCreateDto;
//     onUpdate: ExtensionPropertyApiUpdateDto;
// }
//
// export class ExtensionPropertyApiGetDto implements IExtensionPropertyApiGetDto {
//     isAvailable!: boolean;
//
//     constructor(data?: IExtensionPropertyApiGetDto) {
//         if (data) {
//             for (var property in data) {
//                 if (data.hasOwnProperty(property))
//                     (<any>this)[property] = (<any>data)[property];
//             }
//         }
//     }
//
//     init(_data?: any) {
//         if (_data) {
//             this.isAvailable = _data["isAvailable"];
//         }
//     }
//
//     static fromJS(data: any): ExtensionPropertyApiGetDto {
//         data = typeof data === 'object' ? data : {};
//         let result = new ExtensionPropertyApiGetDto();
//         result.init(data);
//         return result;
//     }
//
//     toJSON(data?: any) {
//         data = typeof data === 'object' ? data : {};
//         data["isAvailable"] = this.isAvailable;
//         return data;
//     }
// }
//
// export interface IExtensionPropertyApiGetDto {
//     isAvailable: boolean;
// }
//
// export class ExtensionPropertyApiUpdateDto implements IExtensionPropertyApiUpdateDto {
//     isAvailable!: boolean;
//
//     constructor(data?: IExtensionPropertyApiUpdateDto) {
//         if (data) {
//             for (var property in data) {
//                 if (data.hasOwnProperty(property))
//                     (<any>this)[property] = (<any>data)[property];
//             }
//         }
//     }
//
//     init(_data?: any) {
//         if (_data) {
//             this.isAvailable = _data["isAvailable"];
//         }
//     }
//
//     static fromJS(data: any): ExtensionPropertyApiUpdateDto {
//         data = typeof data === 'object' ? data : {};
//         let result = new ExtensionPropertyApiUpdateDto();
//         result.init(data);
//         return result;
//     }
//
//     toJSON(data?: any) {
//         data = typeof data === 'object' ? data : {};
//         data["isAvailable"] = this.isAvailable;
//         return data;
//     }
// }
//
// export interface IExtensionPropertyApiUpdateDto {
//     isAvailable: boolean;
// }
//
// export class ExtensionPropertyAttributeDto implements IExtensionPropertyAttributeDto {
//     typeSimple!: string | undefined;
//     config!: { [key: string]: any; } | undefined;
//
//     constructor(data?: IExtensionPropertyAttributeDto) {
//         if (data) {
//             for (var property in data) {
//                 if (data.hasOwnProperty(property))
//                     (<any>this)[property] = (<any>data)[property];
//             }
//         }
//     }
//
//     init(_data?: any) {
//         if (_data) {
//             this.typeSimple = _data["typeSimple"];
//             if (_data["config"]) {
//                 this.config = {} as any;
//                 for (let key in _data["config"]) {
//                     if (_data["config"].hasOwnProperty(key))
//                         (<any>this.config)![key] = _data["config"][key];
//                 }
//             }
//         }
//     }
//
//     static fromJS(data: any): ExtensionPropertyAttributeDto {
//         data = typeof data === 'object' ? data : {};
//         let result = new ExtensionPropertyAttributeDto();
//         result.init(data);
//         return result;
//     }
//
//     toJSON(data?: any) {
//         data = typeof data === 'object' ? data : {};
//         data["typeSimple"] = this.typeSimple;
//         if (this.config) {
//             data["config"] = {};
//             for (let key in this.config) {
//                 if (this.config.hasOwnProperty(key))
//                     (<any>data["config"])[key] = this.config[key];
//             }
//         }
//         return data;
//     }
// }
//
// export interface IExtensionPropertyAttributeDto {
//     typeSimple: string | undefined;
//     config: { [key: string]: any; } | undefined;
// }
//
// export class ExtensionPropertyDto implements IExtensionPropertyDto {
//     type!: string | undefined;
//     typeSimple!: string | undefined;
//     displayName!: LocalizableStringDto;
//     api!: ExtensionPropertyApiDto;
//     ui!: ExtensionPropertyUiDto;
//     attributes!: ExtensionPropertyAttributeDto[] | undefined;
//     configuration!: { [key: string]: any; } | undefined;
//     defaultValue!: any | undefined;
//
//     constructor(data?: IExtensionPropertyDto) {
//         if (data) {
//             for (var property in data) {
//                 if (data.hasOwnProperty(property))
//                     (<any>this)[property] = (<any>data)[property];
//             }
//         }
//     }
//
//     init(_data?: any) {
//         if (_data) {
//             this.type = _data["type"];
//             this.typeSimple = _data["typeSimple"];
//             this.displayName = _data["displayName"] ? LocalizableStringDto.fromJS(_data["displayName"]) : <any>undefined;
//             this.api = _data["api"] ? ExtensionPropertyApiDto.fromJS(_data["api"]) : <any>undefined;
//             this.ui = _data["ui"] ? ExtensionPropertyUiDto.fromJS(_data["ui"]) : <any>undefined;
//             if (Array.isArray(_data["attributes"])) {
//                 this.attributes = [] as any;
//                 for (let item of _data["attributes"])
//                     this.attributes!.push(ExtensionPropertyAttributeDto.fromJS(item));
//             }
//             if (_data["configuration"]) {
//                 this.configuration = {} as any;
//                 for (let key in _data["configuration"]) {
//                     if (_data["configuration"].hasOwnProperty(key))
//                         (<any>this.configuration)![key] = _data["configuration"][key];
//                 }
//             }
//             this.defaultValue = _data["defaultValue"];
//         }
//     }
//
//     static fromJS(data: any): ExtensionPropertyDto {
//         data = typeof data === 'object' ? data : {};
//         let result = new ExtensionPropertyDto();
//         result.init(data);
//         return result;
//     }
//
//     toJSON(data?: any) {
//         data = typeof data === 'object' ? data : {};
//         data["type"] = this.type;
//         data["typeSimple"] = this.typeSimple;
//         data["displayName"] = this.displayName ? this.displayName.toJSON() : <any>undefined;
//         data["api"] = this.api ? this.api.toJSON() : <any>undefined;
//         data["ui"] = this.ui ? this.ui.toJSON() : <any>undefined;
//         if (Array.isArray(this.attributes)) {
//             data["attributes"] = [];
//             for (let item of this.attributes)
//                 data["attributes"].push(item.toJSON());
//         }
//         if (this.configuration) {
//             data["configuration"] = {};
//             for (let key in this.configuration) {
//                 if (this.configuration.hasOwnProperty(key))
//                     (<any>data["configuration"])[key] = this.configuration[key];
//             }
//         }
//         data["defaultValue"] = this.defaultValue;
//         return data;
//     }
// }
//
// export interface IExtensionPropertyDto {
//     type: string | undefined;
//     typeSimple: string | undefined;
//     displayName: LocalizableStringDto;
//     api: ExtensionPropertyApiDto;
//     ui: ExtensionPropertyUiDto;
//     attributes: ExtensionPropertyAttributeDto[] | undefined;
//     configuration: { [key: string]: any; } | undefined;
//     defaultValue: any | undefined;
// }
//
// export class ExtensionPropertyUiDto implements IExtensionPropertyUiDto {
//     onTable!: ExtensionPropertyUiTableDto;
//     onCreateForm!: ExtensionPropertyUiFormDto;
//     onEditForm!: ExtensionPropertyUiFormDto;
//     lookup!: ExtensionPropertyUiLookupDto;
//
//     constructor(data?: IExtensionPropertyUiDto) {
//         if (data) {
//             for (var property in data) {
//                 if (data.hasOwnProperty(property))
//                     (<any>this)[property] = (<any>data)[property];
//             }
//         }
//     }
//
//     init(_data?: any) {
//         if (_data) {
//             this.onTable = _data["onTable"] ? ExtensionPropertyUiTableDto.fromJS(_data["onTable"]) : <any>undefined;
//             this.onCreateForm = _data["onCreateForm"] ? ExtensionPropertyUiFormDto.fromJS(_data["onCreateForm"]) : <any>undefined;
//             this.onEditForm = _data["onEditForm"] ? ExtensionPropertyUiFormDto.fromJS(_data["onEditForm"]) : <any>undefined;
//             this.lookup = _data["lookup"] ? ExtensionPropertyUiLookupDto.fromJS(_data["lookup"]) : <any>undefined;
//         }
//     }
//
//     static fromJS(data: any): ExtensionPropertyUiDto {
//         data = typeof data === 'object' ? data : {};
//         let result = new ExtensionPropertyUiDto();
//         result.init(data);
//         return result;
//     }
//
//     toJSON(data?: any) {
//         data = typeof data === 'object' ? data : {};
//         data["onTable"] = this.onTable ? this.onTable.toJSON() : <any>undefined;
//         data["onCreateForm"] = this.onCreateForm ? this.onCreateForm.toJSON() : <any>undefined;
//         data["onEditForm"] = this.onEditForm ? this.onEditForm.toJSON() : <any>undefined;
//         data["lookup"] = this.lookup ? this.lookup.toJSON() : <any>undefined;
//         return data;
//     }
// }
//
// export interface IExtensionPropertyUiDto {
//     onTable: ExtensionPropertyUiTableDto;
//     onCreateForm: ExtensionPropertyUiFormDto;
//     onEditForm: ExtensionPropertyUiFormDto;
//     lookup: ExtensionPropertyUiLookupDto;
// }
//
// export class ExtensionPropertyUiFormDto implements IExtensionPropertyUiFormDto {
//     isVisible!: boolean;
//
//     constructor(data?: IExtensionPropertyUiFormDto) {
//         if (data) {
//             for (var property in data) {
//                 if (data.hasOwnProperty(property))
//                     (<any>this)[property] = (<any>data)[property];
//             }
//         }
//     }
//
//     init(_data?: any) {
//         if (_data) {
//             this.isVisible = _data["isVisible"];
//         }
//     }
//
//     static fromJS(data: any): ExtensionPropertyUiFormDto {
//         data = typeof data === 'object' ? data : {};
//         let result = new ExtensionPropertyUiFormDto();
//         result.init(data);
//         return result;
//     }
//
//     toJSON(data?: any) {
//         data = typeof data === 'object' ? data : {};
//         data["isVisible"] = this.isVisible;
//         return data;
//     }
// }
//
// export interface IExtensionPropertyUiFormDto {
//     isVisible: boolean;
// }
//
// export class ExtensionPropertyUiLookupDto implements IExtensionPropertyUiLookupDto {
//     url!: string | undefined;
//     resultListPropertyName!: string | undefined;
//     displayPropertyName!: string | undefined;
//     valuePropertyName!: string | undefined;
//     filterParamName!: string | undefined;
//
//     constructor(data?: IExtensionPropertyUiLookupDto) {
//         if (data) {
//             for (var property in data) {
//                 if (data.hasOwnProperty(property))
//                     (<any>this)[property] = (<any>data)[property];
//             }
//         }
//     }
//
//     init(_data?: any) {
//         if (_data) {
//             this.url = _data["url"];
//             this.resultListPropertyName = _data["resultListPropertyName"];
//             this.displayPropertyName = _data["displayPropertyName"];
//             this.valuePropertyName = _data["valuePropertyName"];
//             this.filterParamName = _data["filterParamName"];
//         }
//     }
//
//     static fromJS(data: any): ExtensionPropertyUiLookupDto {
//         data = typeof data === 'object' ? data : {};
//         let result = new ExtensionPropertyUiLookupDto();
//         result.init(data);
//         return result;
//     }
//
//     toJSON(data?: any) {
//         data = typeof data === 'object' ? data : {};
//         data["url"] = this.url;
//         data["resultListPropertyName"] = this.resultListPropertyName;
//         data["displayPropertyName"] = this.displayPropertyName;
//         data["valuePropertyName"] = this.valuePropertyName;
//         data["filterParamName"] = this.filterParamName;
//         return data;
//     }
// }
//
// export interface IExtensionPropertyUiLookupDto {
//     url: string | undefined;
//     resultListPropertyName: string | undefined;
//     displayPropertyName: string | undefined;
//     valuePropertyName: string | undefined;
//     filterParamName: string | undefined;
// }
//
// export class ExtensionPropertyUiTableDto implements IExtensionPropertyUiTableDto {
//     isVisible!: boolean;
//
//     constructor(data?: IExtensionPropertyUiTableDto) {
//         if (data) {
//             for (var property in data) {
//                 if (data.hasOwnProperty(property))
//                     (<any>this)[property] = (<any>data)[property];
//             }
//         }
//     }
//
//     init(_data?: any) {
//         if (_data) {
//             this.isVisible = _data["isVisible"];
//         }
//     }
//
//     static fromJS(data: any): ExtensionPropertyUiTableDto {
//         data = typeof data === 'object' ? data : {};
//         let result = new ExtensionPropertyUiTableDto();
//         result.init(data);
//         return result;
//     }
//
//     toJSON(data?: any) {
//         data = typeof data === 'object' ? data : {};
//         data["isVisible"] = this.isVisible;
//         return data;
//     }
// }
//
// export interface IExtensionPropertyUiTableDto {
//     isVisible: boolean;
// }
//
// export class LocalizableStringDto implements ILocalizableStringDto {
//     readonly name!: string | undefined;
//     resource!: string | undefined;
//
//     constructor(data?: ILocalizableStringDto) {
//         if (data) {
//             for (var property in data) {
//                 if (data.hasOwnProperty(property))
//                     (<any>this)[property] = (<any>data)[property];
//             }
//         }
//     }
//
//     init(_data?: any) {
//         if (_data) {
//             (<any>this).name = _data["name"];
//             this.resource = _data["resource"];
//         }
//     }
//
//     static fromJS(data: any): LocalizableStringDto {
//         data = typeof data === 'object' ? data : {};
//         let result = new LocalizableStringDto();
//         result.init(data);
//         return result;
//     }
//
//     toJSON(data?: any) {
//         data = typeof data === 'object' ? data : {};
//         data["name"] = this.name;
//         data["resource"] = this.resource;
//         return data;
//     }
// }
//
// export interface ILocalizableStringDto {
//     name: string | undefined;
//     resource: string | undefined;
// }
//
// export class ModuleExtensionDto implements IModuleExtensionDto {
//     entities!: { [key: string]: EntityExtensionDto; } | undefined;
//     configuration!: { [key: string]: any; } | undefined;
//
//     constructor(data?: IModuleExtensionDto) {
//         if (data) {
//             for (var property in data) {
//                 if (data.hasOwnProperty(property))
//                     (<any>this)[property] = (<any>data)[property];
//             }
//         }
//     }
//
//     init(_data?: any) {
//         if (_data) {
//             if (_data["entities"]) {
//                 this.entities = {} as any;
//                 for (let key in _data["entities"]) {
//                     if (_data["entities"].hasOwnProperty(key))
//                         (<any>this.entities)![key] = _data["entities"][key] ? EntityExtensionDto.fromJS(_data["entities"][key]) : new EntityExtensionDto();
//                 }
//             }
//             if (_data["configuration"]) {
//                 this.configuration = {} as any;
//                 for (let key in _data["configuration"]) {
//                     if (_data["configuration"].hasOwnProperty(key))
//                         (<any>this.configuration)![key] = _data["configuration"][key];
//                 }
//             }
//         }
//     }
//
//     static fromJS(data: any): ModuleExtensionDto {
//         data = typeof data === 'object' ? data : {};
//         let result = new ModuleExtensionDto();
//         result.init(data);
//         return result;
//     }
//
//     toJSON(data?: any) {
//         data = typeof data === 'object' ? data : {};
//         if (this.entities) {
//             data["entities"] = {};
//             for (let key in this.entities) {
//                 if (this.entities.hasOwnProperty(key))
//                     (<any>data["entities"])[key] = this.entities[key] ? this.entities[key].toJSON() : <any>undefined;
//             }
//         }
//         if (this.configuration) {
//             data["configuration"] = {};
//             for (let key in this.configuration) {
//                 if (this.configuration.hasOwnProperty(key))
//                     (<any>data["configuration"])[key] = this.configuration[key];
//             }
//         }
//         return data;
//     }
// }
//
// export interface IModuleExtensionDto {
//     entities: { [key: string]: EntityExtensionDto; } | undefined;
//     configuration: { [key: string]: any; } | undefined;
// }
//
// export class ObjectExtensionsDto implements IObjectExtensionsDto {
//     modules!: { [key: string]: ModuleExtensionDto; } | undefined;
//     enums!: { [key: string]: ExtensionEnumDto; } | undefined;
//
//     constructor(data?: IObjectExtensionsDto) {
//         if (data) {
//             for (var property in data) {
//                 if (data.hasOwnProperty(property))
//                     (<any>this)[property] = (<any>data)[property];
//             }
//         }
//     }
//
//     init(_data?: any) {
//         if (_data) {
//             if (_data["modules"]) {
//                 this.modules = {} as any;
//                 for (let key in _data["modules"]) {
//                     if (_data["modules"].hasOwnProperty(key))
//                         (<any>this.modules)![key] = _data["modules"][key] ? ModuleExtensionDto.fromJS(_data["modules"][key]) : new ModuleExtensionDto();
//                 }
//             }
//             if (_data["enums"]) {
//                 this.enums = {} as any;
//                 for (let key in _data["enums"]) {
//                     if (_data["enums"].hasOwnProperty(key))
//                         (<any>this.enums)![key] = _data["enums"][key] ? ExtensionEnumDto.fromJS(_data["enums"][key]) : new ExtensionEnumDto();
//                 }
//             }
//         }
//     }
//
//     static fromJS(data: any): ObjectExtensionsDto {
//         data = typeof data === 'object' ? data : {};
//         let result = new ObjectExtensionsDto();
//         result.init(data);
//         return result;
//     }
//
//     toJSON(data?: any) {
//         data = typeof data === 'object' ? data : {};
//         if (this.modules) {
//             data["modules"] = {};
//             for (let key in this.modules) {
//                 if (this.modules.hasOwnProperty(key))
//                     (<any>data["modules"])[key] = this.modules[key] ? this.modules[key].toJSON() : <any>undefined;
//             }
//         }
//         if (this.enums) {
//             data["enums"] = {};
//             for (let key in this.enums) {
//                 if (this.enums.hasOwnProperty(key))
//                     (<any>data["enums"])[key] = this.enums[key] ? this.enums[key].toJSON() : <any>undefined;
//             }
//         }
//         return data;
//     }
// }
//
// export interface IObjectExtensionsDto {
//     modules: { [key: string]: ModuleExtensionDto; } | undefined;
//     enums: { [key: string]: ExtensionEnumDto; } | undefined;
// }
//
// export class TimeZone implements ITimeZone {
//     iana!: IanaTimeZone;
//     windows!: WindowsTimeZone;
//
//     constructor(data?: ITimeZone) {
//         if (data) {
//             for (var property in data) {
//                 if (data.hasOwnProperty(property))
//                     (<any>this)[property] = (<any>data)[property];
//             }
//         }
//     }
//
//     init(_data?: any) {
//         if (_data) {
//             this.iana = _data["iana"] ? IanaTimeZone.fromJS(_data["iana"]) : <any>undefined;
//             this.windows = _data["windows"] ? WindowsTimeZone.fromJS(_data["windows"]) : <any>undefined;
//         }
//     }
//
//     static fromJS(data: any): TimeZone {
//         data = typeof data === 'object' ? data : {};
//         let result = new TimeZone();
//         result.init(data);
//         return result;
//     }
//
//     toJSON(data?: any) {
//         data = typeof data === 'object' ? data : {};
//         data["iana"] = this.iana ? this.iana.toJSON() : <any>undefined;
//         data["windows"] = this.windows ? this.windows.toJSON() : <any>undefined;
//         return data;
//     }
// }
//
// export interface ITimeZone {
//     iana: IanaTimeZone;
//     windows: WindowsTimeZone;
// }
//
// export class TimingDto implements ITimingDto {
//     timeZone!: TimeZone;
//
//     constructor(data?: ITimingDto) {
//         if (data) {
//             for (var property in data) {
//                 if (data.hasOwnProperty(property))
//                     (<any>this)[property] = (<any>data)[property];
//             }
//         }
//     }
//
//     init(_data?: any) {
//         if (_data) {
//             this.timeZone = _data["timeZone"] ? TimeZone.fromJS(_data["timeZone"]) : <any>undefined;
//         }
//     }
//
//     static fromJS(data: any): TimingDto {
//         data = typeof data === 'object' ? data : {};
//         let result = new TimingDto();
//         result.init(data);
//         return result;
//     }
//
//     toJSON(data?: any) {
//         data = typeof data === 'object' ? data : {};
//         data["timeZone"] = this.timeZone ? this.timeZone.toJSON() : <any>undefined;
//         return data;
//     }
// }
//
// export interface ITimingDto {
//     timeZone: TimeZone;
// }
//
// export class WindowsTimeZone implements IWindowsTimeZone {
//     timeZoneId!: string | undefined;
//
//     constructor(data?: IWindowsTimeZone) {
//         if (data) {
//             for (var property in data) {
//                 if (data.hasOwnProperty(property))
//                     (<any>this)[property] = (<any>data)[property];
//             }
//         }
//     }
//
//     init(_data?: any) {
//         if (_data) {
//             this.timeZoneId = _data["timeZoneId"];
//         }
//     }
//
//     static fromJS(data: any): WindowsTimeZone {
//         data = typeof data === 'object' ? data : {};
//         let result = new WindowsTimeZone();
//         result.init(data);
//         return result;
//     }
//
//     toJSON(data?: any) {
//         data = typeof data === 'object' ? data : {};
//         data["timeZoneId"] = this.timeZoneId;
//         return data;
//     }
// }
//
// export interface IWindowsTimeZone {
//     timeZoneId: string | undefined;
// }
//
// export class CurrentTenantDto implements ICurrentTenantDto {
//     id!: string | undefined;
//     name!: string | undefined;
//     isAvailable!: boolean;
//
//     constructor(data?: ICurrentTenantDto) {
//         if (data) {
//             for (var property in data) {
//                 if (data.hasOwnProperty(property))
//                     (<any>this)[property] = (<any>data)[property];
//             }
//         }
//     }
//
//     init(_data?: any) {
//         if (_data) {
//             this.id = _data["id"];
//             this.name = _data["name"];
//             this.isAvailable = _data["isAvailable"];
//         }
//     }
//
//     static fromJS(data: any): CurrentTenantDto {
//         data = typeof data === 'object' ? data : {};
//         let result = new CurrentTenantDto();
//         result.init(data);
//         return result;
//     }
//
//     toJSON(data?: any) {
//         data = typeof data === 'object' ? data : {};
//         data["id"] = this.id;
//         data["name"] = this.name;
//         data["isAvailable"] = this.isAvailable;
//         return data;
//     }
// }
//
// export interface ICurrentTenantDto {
//     id: string | undefined;
//     name: string | undefined;
//     isAvailable: boolean;
// }
//
// export class FindTenantResultDto implements IFindTenantResultDto {
//     success!: boolean;
//     tenantId!: string | undefined;
//     name!: string | undefined;
//
//     constructor(data?: IFindTenantResultDto) {
//         if (data) {
//             for (var property in data) {
//                 if (data.hasOwnProperty(property))
//                     (<any>this)[property] = (<any>data)[property];
//             }
//         }
//     }
//
//     init(_data?: any) {
//         if (_data) {
//             this.success = _data["success"];
//             this.tenantId = _data["tenantId"];
//             this.name = _data["name"];
//         }
//     }
//
//     static fromJS(data: any): FindTenantResultDto {
//         data = typeof data === 'object' ? data : {};
//         let result = new FindTenantResultDto();
//         result.init(data);
//         return result;
//     }
//
//     toJSON(data?: any) {
//         data = typeof data === 'object' ? data : {};
//         data["success"] = this.success;
//         data["tenantId"] = this.tenantId;
//         data["name"] = this.name;
//         return data;
//     }
// }
//
// export interface IFindTenantResultDto {
//     success: boolean;
//     tenantId: string | undefined;
//     name: string | undefined;
// }
//
// export class MultiTenancyInfoDto implements IMultiTenancyInfoDto {
//     isEnabled!: boolean;
//
//     constructor(data?: IMultiTenancyInfoDto) {
//         if (data) {
//             for (var property in data) {
//                 if (data.hasOwnProperty(property))
//                     (<any>this)[property] = (<any>data)[property];
//             }
//         }
//     }
//
//     init(_data?: any) {
//         if (_data) {
//             this.isEnabled = _data["isEnabled"];
//         }
//     }
//
//     static fromJS(data: any): MultiTenancyInfoDto {
//         data = typeof data === 'object' ? data : {};
//         let result = new MultiTenancyInfoDto();
//         result.init(data);
//         return result;
//     }
//
//     toJSON(data?: any) {
//         data = typeof data === 'object' ? data : {};
//         data["isEnabled"] = this.isEnabled;
//         return data;
//     }
// }
//
// export interface IMultiTenancyInfoDto {
//     isEnabled: boolean;
// }
//
// export enum EntityChangeType {
//     _0 = 0,
//     _1 = 1,
//     _2 = 2,
// }
//
// export class AuditLogActionDto implements IAuditLogActionDto {
//     readonly extraProperties!: { [key: string]: any; } | undefined;
//     id!: string;
//     tenantId!: string | undefined;
//     auditLogId!: string;
//     serviceName!: string | undefined;
//     methodName!: string | undefined;
//     parameters!: string | undefined;
//     executionTime!: DateTime;
//     executionDuration!: number;
//
//     constructor(data?: IAuditLogActionDto) {
//         if (data) {
//             for (var property in data) {
//                 if (data.hasOwnProperty(property))
//                     (<any>this)[property] = (<any>data)[property];
//             }
//         }
//     }
//
//     init(_data?: any) {
//         if (_data) {
//             if (_data["extraProperties"]) {
//                 (<any>this).extraProperties = {} as any;
//                 for (let key in _data["extraProperties"]) {
//                     if (_data["extraProperties"].hasOwnProperty(key))
//                         (<any>(<any>this).extraProperties)![key] = _data["extraProperties"][key];
//                 }
//             }
//             this.id = _data["id"];
//             this.tenantId = _data["tenantId"];
//             this.auditLogId = _data["auditLogId"];
//             this.serviceName = _data["serviceName"];
//             this.methodName = _data["methodName"];
//             this.parameters = _data["parameters"];
//             this.executionTime = _data["executionTime"] ? DateTime.fromISO(_data["executionTime"].toString()) : <any>undefined;
//             this.executionDuration = _data["executionDuration"];
//         }
//     }
//
//     static fromJS(data: any): AuditLogActionDto {
//         data = typeof data === 'object' ? data : {};
//         let result = new AuditLogActionDto();
//         result.init(data);
//         return result;
//     }
//
//     toJSON(data?: any) {
//         data = typeof data === 'object' ? data : {};
//         if (this.extraProperties) {
//             data["extraProperties"] = {};
//             for (let key in this.extraProperties) {
//                 if (this.extraProperties.hasOwnProperty(key))
//                     (<any>data["extraProperties"])[key] = this.extraProperties[key];
//             }
//         }
//         data["id"] = this.id;
//         data["tenantId"] = this.tenantId;
//         data["auditLogId"] = this.auditLogId;
//         data["serviceName"] = this.serviceName;
//         data["methodName"] = this.methodName;
//         data["parameters"] = this.parameters;
//         data["executionTime"] = this.executionTime ? this.executionTime.toString() : <any>undefined;
//         data["executionDuration"] = this.executionDuration;
//         return data;
//     }
// }
//
// export interface IAuditLogActionDto {
//     extraProperties: { [key: string]: any; } | undefined;
//     id: string;
//     tenantId: string | undefined;
//     auditLogId: string;
//     serviceName: string | undefined;
//     methodName: string | undefined;
//     parameters: string | undefined;
//     executionTime: DateTime;
//     executionDuration: number;
// }
//
// export class AuditLogDto implements IAuditLogDto {
//     readonly extraProperties!: { [key: string]: any; } | undefined;
//     id!: string;
//     userId!: string | undefined;
//     userName!: string | undefined;
//     tenantId!: string | undefined;
//     impersonatorUserId!: string | undefined;
//     impersonatorTenantId!: string | undefined;
//     executionTime!: DateTime;
//     executionDuration!: number;
//     clientIpAddress!: string | undefined;
//     clientName!: string | undefined;
//     browserInfo!: string | undefined;
//     httpMethod!: string | undefined;
//     url!: string | undefined;
//     exceptions!: string | undefined;
//     comments!: string | undefined;
//     httpStatusCode!: number | undefined;
//     applicationName!: string | undefined;
//     correlationId!: string | undefined;
//     entityChanges!: EntityChangeDto[] | undefined;
//     actions!: AuditLogActionDto[] | undefined;
//
//     constructor(data?: IAuditLogDto) {
//         if (data) {
//             for (var property in data) {
//                 if (data.hasOwnProperty(property))
//                     (<any>this)[property] = (<any>data)[property];
//             }
//         }
//     }
//
//     init(_data?: any) {
//         if (_data) {
//             if (_data["extraProperties"]) {
//                 (<any>this).extraProperties = {} as any;
//                 for (let key in _data["extraProperties"]) {
//                     if (_data["extraProperties"].hasOwnProperty(key))
//                         (<any>(<any>this).extraProperties)![key] = _data["extraProperties"][key];
//                 }
//             }
//             this.id = _data["id"];
//             this.userId = _data["userId"];
//             this.userName = _data["userName"];
//             this.tenantId = _data["tenantId"];
//             this.impersonatorUserId = _data["impersonatorUserId"];
//             this.impersonatorTenantId = _data["impersonatorTenantId"];
//             this.executionTime = _data["executionTime"] ? DateTime.fromISO(_data["executionTime"].toString()) : <any>undefined;
//             this.executionDuration = _data["executionDuration"];
//             this.clientIpAddress = _data["clientIpAddress"];
//             this.clientName = _data["clientName"];
//             this.browserInfo = _data["browserInfo"];
//             this.httpMethod = _data["httpMethod"];
//             this.url = _data["url"];
//             this.exceptions = _data["exceptions"];
//             this.comments = _data["comments"];
//             this.httpStatusCode = _data["httpStatusCode"];
//             this.applicationName = _data["applicationName"];
//             this.correlationId = _data["correlationId"];
//             if (Array.isArray(_data["entityChanges"])) {
//                 this.entityChanges = [] as any;
//                 for (let item of _data["entityChanges"])
//                     this.entityChanges!.push(EntityChangeDto.fromJS(item));
//             }
//             if (Array.isArray(_data["actions"])) {
//                 this.actions = [] as any;
//                 for (let item of _data["actions"])
//                     this.actions!.push(AuditLogActionDto.fromJS(item));
//             }
//         }
//     }
//
//     static fromJS(data: any): AuditLogDto {
//         data = typeof data === 'object' ? data : {};
//         let result = new AuditLogDto();
//         result.init(data);
//         return result;
//     }
//
//     toJSON(data?: any) {
//         data = typeof data === 'object' ? data : {};
//         if (this.extraProperties) {
//             data["extraProperties"] = {};
//             for (let key in this.extraProperties) {
//                 if (this.extraProperties.hasOwnProperty(key))
//                     (<any>data["extraProperties"])[key] = this.extraProperties[key];
//             }
//         }
//         data["id"] = this.id;
//         data["userId"] = this.userId;
//         data["userName"] = this.userName;
//         data["tenantId"] = this.tenantId;
//         data["impersonatorUserId"] = this.impersonatorUserId;
//         data["impersonatorTenantId"] = this.impersonatorTenantId;
//         data["executionTime"] = this.executionTime ? this.executionTime.toString() : <any>undefined;
//         data["executionDuration"] = this.executionDuration;
//         data["clientIpAddress"] = this.clientIpAddress;
//         data["clientName"] = this.clientName;
//         data["browserInfo"] = this.browserInfo;
//         data["httpMethod"] = this.httpMethod;
//         data["url"] = this.url;
//         data["exceptions"] = this.exceptions;
//         data["comments"] = this.comments;
//         data["httpStatusCode"] = this.httpStatusCode;
//         data["applicationName"] = this.applicationName;
//         data["correlationId"] = this.correlationId;
//         if (Array.isArray(this.entityChanges)) {
//             data["entityChanges"] = [];
//             for (let item of this.entityChanges)
//                 data["entityChanges"].push(item.toJSON());
//         }
//         if (Array.isArray(this.actions)) {
//             data["actions"] = [];
//             for (let item of this.actions)
//                 data["actions"].push(item.toJSON());
//         }
//         return data;
//     }
// }
//
// export interface IAuditLogDto {
//     extraProperties: { [key: string]: any; } | undefined;
//     id: string;
//     userId: string | undefined;
//     userName: string | undefined;
//     tenantId: string | undefined;
//     impersonatorUserId: string | undefined;
//     impersonatorTenantId: string | undefined;
//     executionTime: DateTime;
//     executionDuration: number;
//     clientIpAddress: string | undefined;
//     clientName: string | undefined;
//     browserInfo: string | undefined;
//     httpMethod: string | undefined;
//     url: string | undefined;
//     exceptions: string | undefined;
//     comments: string | undefined;
//     httpStatusCode: number | undefined;
//     applicationName: string | undefined;
//     correlationId: string | undefined;
//     entityChanges: EntityChangeDto[] | undefined;
//     actions: AuditLogActionDto[] | undefined;
// }
//
// export class EntityChangeDto implements IEntityChangeDto {
//     readonly extraProperties!: { [key: string]: any; } | undefined;
//     id!: string;
//     auditLogId!: string;
//     tenantId!: string | undefined;
//     changeTime!: DateTime;
//     changeType!: EntityChangeType;
//     entityId!: string | undefined;
//     entityTypeFullName!: string | undefined;
//     propertyChanges!: EntityPropertyChangeDto[] | undefined;
//
//     constructor(data?: IEntityChangeDto) {
//         if (data) {
//             for (var property in data) {
//                 if (data.hasOwnProperty(property))
//                     (<any>this)[property] = (<any>data)[property];
//             }
//         }
//     }
//
//     init(_data?: any) {
//         if (_data) {
//             if (_data["extraProperties"]) {
//                 (<any>this).extraProperties = {} as any;
//                 for (let key in _data["extraProperties"]) {
//                     if (_data["extraProperties"].hasOwnProperty(key))
//                         (<any>(<any>this).extraProperties)![key] = _data["extraProperties"][key];
//                 }
//             }
//             this.id = _data["id"];
//             this.auditLogId = _data["auditLogId"];
//             this.tenantId = _data["tenantId"];
//             this.changeTime = _data["changeTime"] ? DateTime.fromISO(_data["changeTime"].toString()) : <any>undefined;
//             this.changeType = _data["changeType"];
//             this.entityId = _data["entityId"];
//             this.entityTypeFullName = _data["entityTypeFullName"];
//             if (Array.isArray(_data["propertyChanges"])) {
//                 this.propertyChanges = [] as any;
//                 for (let item of _data["propertyChanges"])
//                     this.propertyChanges!.push(EntityPropertyChangeDto.fromJS(item));
//             }
//         }
//     }
//
//     static fromJS(data: any): EntityChangeDto {
//         data = typeof data === 'object' ? data : {};
//         let result = new EntityChangeDto();
//         result.init(data);
//         return result;
//     }
//
//     toJSON(data?: any) {
//         data = typeof data === 'object' ? data : {};
//         if (this.extraProperties) {
//             data["extraProperties"] = {};
//             for (let key in this.extraProperties) {
//                 if (this.extraProperties.hasOwnProperty(key))
//                     (<any>data["extraProperties"])[key] = this.extraProperties[key];
//             }
//         }
//         data["id"] = this.id;
//         data["auditLogId"] = this.auditLogId;
//         data["tenantId"] = this.tenantId;
//         data["changeTime"] = this.changeTime ? this.changeTime.toString() : <any>undefined;
//         data["changeType"] = this.changeType;
//         data["entityId"] = this.entityId;
//         data["entityTypeFullName"] = this.entityTypeFullName;
//         if (Array.isArray(this.propertyChanges)) {
//             data["propertyChanges"] = [];
//             for (let item of this.propertyChanges)
//                 data["propertyChanges"].push(item.toJSON());
//         }
//         return data;
//     }
// }
//
// export interface IEntityChangeDto {
//     extraProperties: { [key: string]: any; } | undefined;
//     id: string;
//     auditLogId: string;
//     tenantId: string | undefined;
//     changeTime: DateTime;
//     changeType: EntityChangeType;
//     entityId: string | undefined;
//     entityTypeFullName: string | undefined;
//     propertyChanges: EntityPropertyChangeDto[] | undefined;
// }
//
// export class EntityChangeWithUsernameDto implements IEntityChangeWithUsernameDto {
//     entityChange!: EntityChangeDto;
//     userName!: string | undefined;
//
//     constructor(data?: IEntityChangeWithUsernameDto) {
//         if (data) {
//             for (var property in data) {
//                 if (data.hasOwnProperty(property))
//                     (<any>this)[property] = (<any>data)[property];
//             }
//         }
//     }
//
//     init(_data?: any) {
//         if (_data) {
//             this.entityChange = _data["entityChange"] ? EntityChangeDto.fromJS(_data["entityChange"]) : <any>undefined;
//             this.userName = _data["userName"];
//         }
//     }
//
//     static fromJS(data: any): EntityChangeWithUsernameDto {
//         data = typeof data === 'object' ? data : {};
//         let result = new EntityChangeWithUsernameDto();
//         result.init(data);
//         return result;
//     }
//
//     toJSON(data?: any) {
//         data = typeof data === 'object' ? data : {};
//         data["entityChange"] = this.entityChange ? this.entityChange.toJSON() : <any>undefined;
//         data["userName"] = this.userName;
//         return data;
//     }
// }
//
// export interface IEntityChangeWithUsernameDto {
//     entityChange: EntityChangeDto;
//     userName: string | undefined;
// }
//
// export class EntityPropertyChangeDto implements IEntityPropertyChangeDto {
//     id!: string;
//     tenantId!: string | undefined;
//     entityChangeId!: string;
//     newValue!: string | undefined;
//     originalValue!: string | undefined;
//     propertyName!: string | undefined;
//     propertyTypeFullName!: string | undefined;
//
//     constructor(data?: IEntityPropertyChangeDto) {
//         if (data) {
//             for (var property in data) {
//                 if (data.hasOwnProperty(property))
//                     (<any>this)[property] = (<any>data)[property];
//             }
//         }
//     }
//
//     init(_data?: any) {
//         if (_data) {
//             this.id = _data["id"];
//             this.tenantId = _data["tenantId"];
//             this.entityChangeId = _data["entityChangeId"];
//             this.newValue = _data["newValue"];
//             this.originalValue = _data["originalValue"];
//             this.propertyName = _data["propertyName"];
//             this.propertyTypeFullName = _data["propertyTypeFullName"];
//         }
//     }
//
//     static fromJS(data: any): EntityPropertyChangeDto {
//         data = typeof data === 'object' ? data : {};
//         let result = new EntityPropertyChangeDto();
//         result.init(data);
//         return result;
//     }
//
//     toJSON(data?: any) {
//         data = typeof data === 'object' ? data : {};
//         data["id"] = this.id;
//         data["tenantId"] = this.tenantId;
//         data["entityChangeId"] = this.entityChangeId;
//         data["newValue"] = this.newValue;
//         data["originalValue"] = this.originalValue;
//         data["propertyName"] = this.propertyName;
//         data["propertyTypeFullName"] = this.propertyTypeFullName;
//         return data;
//     }
// }
//
// export interface IEntityPropertyChangeDto {
//     id: string;
//     tenantId: string | undefined;
//     entityChangeId: string;
//     newValue: string | undefined;
//     originalValue: string | undefined;
//     propertyName: string | undefined;
//     propertyTypeFullName: string | undefined;
// }
//
// export class GetAverageExecutionDurationPerDayOutput implements IGetAverageExecutionDurationPerDayOutput {
//     data!: { [key: string]: number; } | undefined;
//
//     constructor(data?: IGetAverageExecutionDurationPerDayOutput) {
//         if (data) {
//             for (var property in data) {
//                 if (data.hasOwnProperty(property))
//                     (<any>this)[property] = (<any>data)[property];
//             }
//         }
//     }
//
//     init(_data?: any) {
//         if (_data) {
//             if (_data["data"]) {
//                 this.data = {} as any;
//                 for (let key in _data["data"]) {
//                     if (_data["data"].hasOwnProperty(key))
//                         (<any>this.data)![key] = _data["data"][key];
//                 }
//             }
//         }
//     }
//
//     static fromJS(data: any): GetAverageExecutionDurationPerDayOutput {
//         data = typeof data === 'object' ? data : {};
//         let result = new GetAverageExecutionDurationPerDayOutput();
//         result.init(data);
//         return result;
//     }
//
//     toJSON(data?: any) {
//         data = typeof data === 'object' ? data : {};
//         if (this.data) {
//             data["data"] = {};
//             for (let key in this.data) {
//                 if (this.data.hasOwnProperty(key))
//                     (<any>data["data"])[key] = this.data[key];
//             }
//         }
//         return data;
//     }
// }
//
// export interface IGetAverageExecutionDurationPerDayOutput {
//     data: { [key: string]: number; } | undefined;
// }
//
// export class GetErrorRateOutput implements IGetErrorRateOutput {
//     data!: { [key: string]: number; } | undefined;
//
//     constructor(data?: IGetErrorRateOutput) {
//         if (data) {
//             for (var property in data) {
//                 if (data.hasOwnProperty(property))
//                     (<any>this)[property] = (<any>data)[property];
//             }
//         }
//     }
//
//     init(_data?: any) {
//         if (_data) {
//             if (_data["data"]) {
//                 this.data = {} as any;
//                 for (let key in _data["data"]) {
//                     if (_data["data"].hasOwnProperty(key))
//                         (<any>this.data)![key] = _data["data"][key];
//                 }
//             }
//         }
//     }
//
//     static fromJS(data: any): GetErrorRateOutput {
//         data = typeof data === 'object' ? data : {};
//         let result = new GetErrorRateOutput();
//         result.init(data);
//         return result;
//     }
//
//     toJSON(data?: any) {
//         data = typeof data === 'object' ? data : {};
//         if (this.data) {
//             data["data"] = {};
//             for (let key in this.data) {
//                 if (this.data.hasOwnProperty(key))
//                     (<any>data["data"])[key] = this.data[key];
//             }
//         }
//         return data;
//     }
// }
//
// export interface IGetErrorRateOutput {
//     data: { [key: string]: number; } | undefined;
// }
//
// export class FeatureDto implements IFeatureDto {
//     name!: string | undefined;
//     displayName!: string | undefined;
//     value!: string | undefined;
//     provider!: FeatureProviderDto;
//     description!: string | undefined;
//     valueType!: IStringValueType;
//     depth!: number;
//     parentName!: string | undefined;
//
//     constructor(data?: IFeatureDto) {
//         if (data) {
//             for (var property in data) {
//                 if (data.hasOwnProperty(property))
//                     (<any>this)[property] = (<any>data)[property];
//             }
//         }
//     }
//
//     init(_data?: any) {
//         if (_data) {
//             this.name = _data["name"];
//             this.displayName = _data["displayName"];
//             this.value = _data["value"];
//             this.provider = _data["provider"] ? FeatureProviderDto.fromJS(_data["provider"]) : <any>undefined;
//             this.description = _data["description"];
//             this.valueType = _data["valueType"] ? IStringValueType.fromJS(_data["valueType"]) : <any>undefined;
//             this.depth = _data["depth"];
//             this.parentName = _data["parentName"];
//         }
//     }
//
//     static fromJS(data: any): FeatureDto {
//         data = typeof data === 'object' ? data : {};
//         let result = new FeatureDto();
//         result.init(data);
//         return result;
//     }
//
//     toJSON(data?: any) {
//         data = typeof data === 'object' ? data : {};
//         data["name"] = this.name;
//         data["displayName"] = this.displayName;
//         data["value"] = this.value;
//         data["provider"] = this.provider ? this.provider.toJSON() : <any>undefined;
//         data["description"] = this.description;
//         data["valueType"] = this.valueType ? this.valueType.toJSON() : <any>undefined;
//         data["depth"] = this.depth;
//         data["parentName"] = this.parentName;
//         return data;
//     }
// }
//
// export interface IFeatureDto {
//     name: string | undefined;
//     displayName: string | undefined;
//     value: string | undefined;
//     provider: FeatureProviderDto;
//     description: string | undefined;
//     valueType: IStringValueType;
//     depth: number;
//     parentName: string | undefined;
// }
//
// export class FeatureGroupDto implements IFeatureGroupDto {
//     name!: string | undefined;
//     displayName!: string | undefined;
//     features!: FeatureDto[] | undefined;
//
//     constructor(data?: IFeatureGroupDto) {
//         if (data) {
//             for (var property in data) {
//                 if (data.hasOwnProperty(property))
//                     (<any>this)[property] = (<any>data)[property];
//             }
//         }
//     }
//
//     init(_data?: any) {
//         if (_data) {
//             this.name = _data["name"];
//             this.displayName = _data["displayName"];
//             if (Array.isArray(_data["features"])) {
//                 this.features = [] as any;
//                 for (let item of _data["features"])
//                     this.features!.push(FeatureDto.fromJS(item));
//             }
//         }
//     }
//
//     static fromJS(data: any): FeatureGroupDto {
//         data = typeof data === 'object' ? data : {};
//         let result = new FeatureGroupDto();
//         result.init(data);
//         return result;
//     }
//
//     toJSON(data?: any) {
//         data = typeof data === 'object' ? data : {};
//         data["name"] = this.name;
//         data["displayName"] = this.displayName;
//         if (Array.isArray(this.features)) {
//             data["features"] = [];
//             for (let item of this.features)
//                 data["features"].push(item.toJSON());
//         }
//         return data;
//     }
// }
//
// export interface IFeatureGroupDto {
//     name: string | undefined;
//     displayName: string | undefined;
//     features: FeatureDto[] | undefined;
// }
//
// export class FeatureProviderDto implements IFeatureProviderDto {
//     name!: string | undefined;
//     key!: string | undefined;
//
//     constructor(data?: IFeatureProviderDto) {
//         if (data) {
//             for (var property in data) {
//                 if (data.hasOwnProperty(property))
//                     (<any>this)[property] = (<any>data)[property];
//             }
//         }
//     }
//
//     init(_data?: any) {
//         if (_data) {
//             this.name = _data["name"];
//             this.key = _data["key"];
//         }
//     }
//
//     static fromJS(data: any): FeatureProviderDto {
//         data = typeof data === 'object' ? data : {};
//         let result = new FeatureProviderDto();
//         result.init(data);
//         return result;
//     }
//
//     toJSON(data?: any) {
//         data = typeof data === 'object' ? data : {};
//         data["name"] = this.name;
//         data["key"] = this.key;
//         return data;
//     }
// }
//
// export interface IFeatureProviderDto {
//     name: string | undefined;
//     key: string | undefined;
// }
//
// export class GetFeatureListResultDto implements IGetFeatureListResultDto {
//     groups!: FeatureGroupDto[] | undefined;
//
//     constructor(data?: IGetFeatureListResultDto) {
//         if (data) {
//             for (var property in data) {
//                 if (data.hasOwnProperty(property))
//                     (<any>this)[property] = (<any>data)[property];
//             }
//         }
//     }
//
//     init(_data?: any) {
//         if (_data) {
//             if (Array.isArray(_data["groups"])) {
//                 this.groups = [] as any;
//                 for (let item of _data["groups"])
//                     this.groups!.push(FeatureGroupDto.fromJS(item));
//             }
//         }
//     }
//
//     static fromJS(data: any): GetFeatureListResultDto {
//         data = typeof data === 'object' ? data : {};
//         let result = new GetFeatureListResultDto();
//         result.init(data);
//         return result;
//     }
//
//     toJSON(data?: any) {
//         data = typeof data === 'object' ? data : {};
//         if (Array.isArray(this.groups)) {
//             data["groups"] = [];
//             for (let item of this.groups)
//                 data["groups"].push(item.toJSON());
//         }
//         return data;
//     }
// }
//
// export interface IGetFeatureListResultDto {
//     groups: FeatureGroupDto[] | undefined;
// }
//
// export class UpdateFeatureDto implements IUpdateFeatureDto {
//     name!: string | undefined;
//     value!: string | undefined;
//
//     constructor(data?: IUpdateFeatureDto) {
//         if (data) {
//             for (var property in data) {
//                 if (data.hasOwnProperty(property))
//                     (<any>this)[property] = (<any>data)[property];
//             }
//         }
//     }
//
//     init(_data?: any) {
//         if (_data) {
//             this.name = _data["name"];
//             this.value = _data["value"];
//         }
//     }
//
//     static fromJS(data: any): UpdateFeatureDto {
//         data = typeof data === 'object' ? data : {};
//         let result = new UpdateFeatureDto();
//         result.init(data);
//         return result;
//     }
//
//     toJSON(data?: any) {
//         data = typeof data === 'object' ? data : {};
//         data["name"] = this.name;
//         data["value"] = this.value;
//         return data;
//     }
// }
//
// export interface IUpdateFeatureDto {
//     name: string | undefined;
//     value: string | undefined;
// }
//
// export class UpdateFeaturesDto implements IUpdateFeaturesDto {
//     features!: UpdateFeatureDto[] | undefined;
//
//     constructor(data?: IUpdateFeaturesDto) {
//         if (data) {
//             for (var property in data) {
//                 if (data.hasOwnProperty(property))
//                     (<any>this)[property] = (<any>data)[property];
//             }
//         }
//     }
//
//     init(_data?: any) {
//         if (_data) {
//             if (Array.isArray(_data["features"])) {
//                 this.features = [] as any;
//                 for (let item of _data["features"])
//                     this.features!.push(UpdateFeatureDto.fromJS(item));
//             }
//         }
//     }
//
//     static fromJS(data: any): UpdateFeaturesDto {
//         data = typeof data === 'object' ? data : {};
//         let result = new UpdateFeaturesDto();
//         result.init(data);
//         return result;
//     }
//
//     toJSON(data?: any) {
//         data = typeof data === 'object' ? data : {};
//         if (Array.isArray(this.features)) {
//             data["features"] = [];
//             for (let item of this.features)
//                 data["features"].push(item.toJSON());
//         }
//         return data;
//     }
// }
//
// export interface IUpdateFeaturesDto {
//     features: UpdateFeatureDto[] | undefined;
// }
//
// export class ActionApiDescriptionModel implements IActionApiDescriptionModel {
//     uniqueName!: string | undefined;
//     name!: string | undefined;
//     httpMethod!: string | undefined;
//     url!: string | undefined;
//     supportedVersions!: string[] | undefined;
//     parametersOnMethod!: MethodParameterApiDescriptionModel[] | undefined;
//     parameters!: ParameterApiDescriptionModel[] | undefined;
//     returnValue!: ReturnValueApiDescriptionModel;
//
//     constructor(data?: IActionApiDescriptionModel) {
//         if (data) {
//             for (var property in data) {
//                 if (data.hasOwnProperty(property))
//                     (<any>this)[property] = (<any>data)[property];
//             }
//         }
//     }
//
//     init(_data?: any) {
//         if (_data) {
//             this.uniqueName = _data["uniqueName"];
//             this.name = _data["name"];
//             this.httpMethod = _data["httpMethod"];
//             this.url = _data["url"];
//             if (Array.isArray(_data["supportedVersions"])) {
//                 this.supportedVersions = [] as any;
//                 for (let item of _data["supportedVersions"])
//                     this.supportedVersions!.push(item);
//             }
//             if (Array.isArray(_data["parametersOnMethod"])) {
//                 this.parametersOnMethod = [] as any;
//                 for (let item of _data["parametersOnMethod"])
//                     this.parametersOnMethod!.push(MethodParameterApiDescriptionModel.fromJS(item));
//             }
//             if (Array.isArray(_data["parameters"])) {
//                 this.parameters = [] as any;
//                 for (let item of _data["parameters"])
//                     this.parameters!.push(ParameterApiDescriptionModel.fromJS(item));
//             }
//             this.returnValue = _data["returnValue"] ? ReturnValueApiDescriptionModel.fromJS(_data["returnValue"]) : <any>undefined;
//         }
//     }
//
//     static fromJS(data: any): ActionApiDescriptionModel {
//         data = typeof data === 'object' ? data : {};
//         let result = new ActionApiDescriptionModel();
//         result.init(data);
//         return result;
//     }
//
//     toJSON(data?: any) {
//         data = typeof data === 'object' ? data : {};
//         data["uniqueName"] = this.uniqueName;
//         data["name"] = this.name;
//         data["httpMethod"] = this.httpMethod;
//         data["url"] = this.url;
//         if (Array.isArray(this.supportedVersions)) {
//             data["supportedVersions"] = [];
//             for (let item of this.supportedVersions)
//                 data["supportedVersions"].push(item);
//         }
//         if (Array.isArray(this.parametersOnMethod)) {
//             data["parametersOnMethod"] = [];
//             for (let item of this.parametersOnMethod)
//                 data["parametersOnMethod"].push(item.toJSON());
//         }
//         if (Array.isArray(this.parameters)) {
//             data["parameters"] = [];
//             for (let item of this.parameters)
//                 data["parameters"].push(item.toJSON());
//         }
//         data["returnValue"] = this.returnValue ? this.returnValue.toJSON() : <any>undefined;
//         return data;
//     }
// }
//
// export interface IActionApiDescriptionModel {
//     uniqueName: string | undefined;
//     name: string | undefined;
//     httpMethod: string | undefined;
//     url: string | undefined;
//     supportedVersions: string[] | undefined;
//     parametersOnMethod: MethodParameterApiDescriptionModel[] | undefined;
//     parameters: ParameterApiDescriptionModel[] | undefined;
//     returnValue: ReturnValueApiDescriptionModel;
// }
//
// export class ApplicationApiDescriptionModel implements IApplicationApiDescriptionModel {
//     modules!: { [key: string]: ModuleApiDescriptionModel; } | undefined;
//     types!: { [key: string]: TypeApiDescriptionModel; } | undefined;
//
//     constructor(data?: IApplicationApiDescriptionModel) {
//         if (data) {
//             for (var property in data) {
//                 if (data.hasOwnProperty(property))
//                     (<any>this)[property] = (<any>data)[property];
//             }
//         }
//     }
//
//     init(_data?: any) {
//         if (_data) {
//             if (_data["modules"]) {
//                 this.modules = {} as any;
//                 for (let key in _data["modules"]) {
//                     if (_data["modules"].hasOwnProperty(key))
//                         (<any>this.modules)![key] = _data["modules"][key] ? ModuleApiDescriptionModel.fromJS(_data["modules"][key]) : new ModuleApiDescriptionModel();
//                 }
//             }
//             if (_data["types"]) {
//                 this.types = {} as any;
//                 for (let key in _data["types"]) {
//                     if (_data["types"].hasOwnProperty(key))
//                         (<any>this.types)![key] = _data["types"][key] ? TypeApiDescriptionModel.fromJS(_data["types"][key]) : new TypeApiDescriptionModel();
//                 }
//             }
//         }
//     }
//
//     static fromJS(data: any): ApplicationApiDescriptionModel {
//         data = typeof data === 'object' ? data : {};
//         let result = new ApplicationApiDescriptionModel();
//         result.init(data);
//         return result;
//     }
//
//     toJSON(data?: any) {
//         data = typeof data === 'object' ? data : {};
//         if (this.modules) {
//             data["modules"] = {};
//             for (let key in this.modules) {
//                 if (this.modules.hasOwnProperty(key))
//                     (<any>data["modules"])[key] = this.modules[key] ? this.modules[key].toJSON() : <any>undefined;
//             }
//         }
//         if (this.types) {
//             data["types"] = {};
//             for (let key in this.types) {
//                 if (this.types.hasOwnProperty(key))
//                     (<any>data["types"])[key] = this.types[key] ? this.types[key].toJSON() : <any>undefined;
//             }
//         }
//         return data;
//     }
// }
//
// export interface IApplicationApiDescriptionModel {
//     modules: { [key: string]: ModuleApiDescriptionModel; } | undefined;
//     types: { [key: string]: TypeApiDescriptionModel; } | undefined;
// }
//
// export class ControllerApiDescriptionModel implements IControllerApiDescriptionModel {
//     controllerName!: string | undefined;
//     type!: string | undefined;
//     interfaces!: ControllerInterfaceApiDescriptionModel[] | undefined;
//     actions!: { [key: string]: ActionApiDescriptionModel; } | undefined;
//
//     constructor(data?: IControllerApiDescriptionModel) {
//         if (data) {
//             for (var property in data) {
//                 if (data.hasOwnProperty(property))
//                     (<any>this)[property] = (<any>data)[property];
//             }
//         }
//     }
//
//     init(_data?: any) {
//         if (_data) {
//             this.controllerName = _data["controllerName"];
//             this.type = _data["type"];
//             if (Array.isArray(_data["interfaces"])) {
//                 this.interfaces = [] as any;
//                 for (let item of _data["interfaces"])
//                     this.interfaces!.push(ControllerInterfaceApiDescriptionModel.fromJS(item));
//             }
//             if (_data["actions"]) {
//                 this.actions = {} as any;
//                 for (let key in _data["actions"]) {
//                     if (_data["actions"].hasOwnProperty(key))
//                         (<any>this.actions)![key] = _data["actions"][key] ? ActionApiDescriptionModel.fromJS(_data["actions"][key]) : new ActionApiDescriptionModel();
//                 }
//             }
//         }
//     }
//
//     static fromJS(data: any): ControllerApiDescriptionModel {
//         data = typeof data === 'object' ? data : {};
//         let result = new ControllerApiDescriptionModel();
//         result.init(data);
//         return result;
//     }
//
//     toJSON(data?: any) {
//         data = typeof data === 'object' ? data : {};
//         data["controllerName"] = this.controllerName;
//         data["type"] = this.type;
//         if (Array.isArray(this.interfaces)) {
//             data["interfaces"] = [];
//             for (let item of this.interfaces)
//                 data["interfaces"].push(item.toJSON());
//         }
//         if (this.actions) {
//             data["actions"] = {};
//             for (let key in this.actions) {
//                 if (this.actions.hasOwnProperty(key))
//                     (<any>data["actions"])[key] = this.actions[key] ? this.actions[key].toJSON() : <any>undefined;
//             }
//         }
//         return data;
//     }
// }
//
// export interface IControllerApiDescriptionModel {
//     controllerName: string | undefined;
//     type: string | undefined;
//     interfaces: ControllerInterfaceApiDescriptionModel[] | undefined;
//     actions: { [key: string]: ActionApiDescriptionModel; } | undefined;
// }
//
// export class ControllerInterfaceApiDescriptionModel implements IControllerInterfaceApiDescriptionModel {
//     type!: string | undefined;
//
//     constructor(data?: IControllerInterfaceApiDescriptionModel) {
//         if (data) {
//             for (var property in data) {
//                 if (data.hasOwnProperty(property))
//                     (<any>this)[property] = (<any>data)[property];
//             }
//         }
//     }
//
//     init(_data?: any) {
//         if (_data) {
//             this.type = _data["type"];
//         }
//     }
//
//     static fromJS(data: any): ControllerInterfaceApiDescriptionModel {
//         data = typeof data === 'object' ? data : {};
//         let result = new ControllerInterfaceApiDescriptionModel();
//         result.init(data);
//         return result;
//     }
//
//     toJSON(data?: any) {
//         data = typeof data === 'object' ? data : {};
//         data["type"] = this.type;
//         return data;
//     }
// }
//
// export interface IControllerInterfaceApiDescriptionModel {
//     type: string | undefined;
// }
//
// export class MethodParameterApiDescriptionModel implements IMethodParameterApiDescriptionModel {
//     name!: string | undefined;
//     typeAsString!: string | undefined;
//     type!: string | undefined;
//     typeSimple!: string | undefined;
//     isOptional!: boolean;
//     defaultValue!: any | undefined;
//
//     constructor(data?: IMethodParameterApiDescriptionModel) {
//         if (data) {
//             for (var property in data) {
//                 if (data.hasOwnProperty(property))
//                     (<any>this)[property] = (<any>data)[property];
//             }
//         }
//     }
//
//     init(_data?: any) {
//         if (_data) {
//             this.name = _data["name"];
//             this.typeAsString = _data["typeAsString"];
//             this.type = _data["type"];
//             this.typeSimple = _data["typeSimple"];
//             this.isOptional = _data["isOptional"];
//             this.defaultValue = _data["defaultValue"];
//         }
//     }
//
//     static fromJS(data: any): MethodParameterApiDescriptionModel {
//         data = typeof data === 'object' ? data : {};
//         let result = new MethodParameterApiDescriptionModel();
//         result.init(data);
//         return result;
//     }
//
//     toJSON(data?: any) {
//         data = typeof data === 'object' ? data : {};
//         data["name"] = this.name;
//         data["typeAsString"] = this.typeAsString;
//         data["type"] = this.type;
//         data["typeSimple"] = this.typeSimple;
//         data["isOptional"] = this.isOptional;
//         data["defaultValue"] = this.defaultValue;
//         return data;
//     }
// }
//
// export interface IMethodParameterApiDescriptionModel {
//     name: string | undefined;
//     typeAsString: string | undefined;
//     type: string | undefined;
//     typeSimple: string | undefined;
//     isOptional: boolean;
//     defaultValue: any | undefined;
// }
//
// export class ModuleApiDescriptionModel implements IModuleApiDescriptionModel {
//     rootPath!: string | undefined;
//     remoteServiceName!: string | undefined;
//     controllers!: { [key: string]: ControllerApiDescriptionModel; } | undefined;
//
//     constructor(data?: IModuleApiDescriptionModel) {
//         if (data) {
//             for (var property in data) {
//                 if (data.hasOwnProperty(property))
//                     (<any>this)[property] = (<any>data)[property];
//             }
//         }
//     }
//
//     init(_data?: any) {
//         if (_data) {
//             this.rootPath = _data["rootPath"];
//             this.remoteServiceName = _data["remoteServiceName"];
//             if (_data["controllers"]) {
//                 this.controllers = {} as any;
//                 for (let key in _data["controllers"]) {
//                     if (_data["controllers"].hasOwnProperty(key))
//                         (<any>this.controllers)![key] = _data["controllers"][key] ? ControllerApiDescriptionModel.fromJS(_data["controllers"][key]) : new ControllerApiDescriptionModel();
//                 }
//             }
//         }
//     }
//
//     static fromJS(data: any): ModuleApiDescriptionModel {
//         data = typeof data === 'object' ? data : {};
//         let result = new ModuleApiDescriptionModel();
//         result.init(data);
//         return result;
//     }
//
//     toJSON(data?: any) {
//         data = typeof data === 'object' ? data : {};
//         data["rootPath"] = this.rootPath;
//         data["remoteServiceName"] = this.remoteServiceName;
//         if (this.controllers) {
//             data["controllers"] = {};
//             for (let key in this.controllers) {
//                 if (this.controllers.hasOwnProperty(key))
//                     (<any>data["controllers"])[key] = this.controllers[key] ? this.controllers[key].toJSON() : <any>undefined;
//             }
//         }
//         return data;
//     }
// }
//
// export interface IModuleApiDescriptionModel {
//     rootPath: string | undefined;
//     remoteServiceName: string | undefined;
//     controllers: { [key: string]: ControllerApiDescriptionModel; } | undefined;
// }
//
// export class ParameterApiDescriptionModel implements IParameterApiDescriptionModel {
//     nameOnMethod!: string | undefined;
//     name!: string | undefined;
//     jsonName!: string | undefined;
//     type!: string | undefined;
//     typeSimple!: string | undefined;
//     isOptional!: boolean;
//     defaultValue!: any | undefined;
//     constraintTypes!: string[] | undefined;
//     bindingSourceId!: string | undefined;
//     descriptorName!: string | undefined;
//
//     constructor(data?: IParameterApiDescriptionModel) {
//         if (data) {
//             for (var property in data) {
//                 if (data.hasOwnProperty(property))
//                     (<any>this)[property] = (<any>data)[property];
//             }
//         }
//     }
//
//     init(_data?: any) {
//         if (_data) {
//             this.nameOnMethod = _data["nameOnMethod"];
//             this.name = _data["name"];
//             this.jsonName = _data["jsonName"];
//             this.type = _data["type"];
//             this.typeSimple = _data["typeSimple"];
//             this.isOptional = _data["isOptional"];
//             this.defaultValue = _data["defaultValue"];
//             if (Array.isArray(_data["constraintTypes"])) {
//                 this.constraintTypes = [] as any;
//                 for (let item of _data["constraintTypes"])
//                     this.constraintTypes!.push(item);
//             }
//             this.bindingSourceId = _data["bindingSourceId"];
//             this.descriptorName = _data["descriptorName"];
//         }
//     }
//
//     static fromJS(data: any): ParameterApiDescriptionModel {
//         data = typeof data === 'object' ? data : {};
//         let result = new ParameterApiDescriptionModel();
//         result.init(data);
//         return result;
//     }
//
//     toJSON(data?: any) {
//         data = typeof data === 'object' ? data : {};
//         data["nameOnMethod"] = this.nameOnMethod;
//         data["name"] = this.name;
//         data["jsonName"] = this.jsonName;
//         data["type"] = this.type;
//         data["typeSimple"] = this.typeSimple;
//         data["isOptional"] = this.isOptional;
//         data["defaultValue"] = this.defaultValue;
//         if (Array.isArray(this.constraintTypes)) {
//             data["constraintTypes"] = [];
//             for (let item of this.constraintTypes)
//                 data["constraintTypes"].push(item);
//         }
//         data["bindingSourceId"] = this.bindingSourceId;
//         data["descriptorName"] = this.descriptorName;
//         return data;
//     }
// }
//
// export interface IParameterApiDescriptionModel {
//     nameOnMethod: string | undefined;
//     name: string | undefined;
//     jsonName: string | undefined;
//     type: string | undefined;
//     typeSimple: string | undefined;
//     isOptional: boolean;
//     defaultValue: any | undefined;
//     constraintTypes: string[] | undefined;
//     bindingSourceId: string | undefined;
//     descriptorName: string | undefined;
// }
//
// export class PropertyApiDescriptionModel implements IPropertyApiDescriptionModel {
//     name!: string | undefined;
//     jsonName!: string | undefined;
//     type!: string | undefined;
//     typeSimple!: string | undefined;
//     isRequired!: boolean;
//
//     constructor(data?: IPropertyApiDescriptionModel) {
//         if (data) {
//             for (var property in data) {
//                 if (data.hasOwnProperty(property))
//                     (<any>this)[property] = (<any>data)[property];
//             }
//         }
//     }
//
//     init(_data?: any) {
//         if (_data) {
//             this.name = _data["name"];
//             this.jsonName = _data["jsonName"];
//             this.type = _data["type"];
//             this.typeSimple = _data["typeSimple"];
//             this.isRequired = _data["isRequired"];
//         }
//     }
//
//     static fromJS(data: any): PropertyApiDescriptionModel {
//         data = typeof data === 'object' ? data : {};
//         let result = new PropertyApiDescriptionModel();
//         result.init(data);
//         return result;
//     }
//
//     toJSON(data?: any) {
//         data = typeof data === 'object' ? data : {};
//         data["name"] = this.name;
//         data["jsonName"] = this.jsonName;
//         data["type"] = this.type;
//         data["typeSimple"] = this.typeSimple;
//         data["isRequired"] = this.isRequired;
//         return data;
//     }
// }
//
// export interface IPropertyApiDescriptionModel {
//     name: string | undefined;
//     jsonName: string | undefined;
//     type: string | undefined;
//     typeSimple: string | undefined;
//     isRequired: boolean;
// }
//
// export class ReturnValueApiDescriptionModel implements IReturnValueApiDescriptionModel {
//     type!: string | undefined;
//     typeSimple!: string | undefined;
//
//     constructor(data?: IReturnValueApiDescriptionModel) {
//         if (data) {
//             for (var property in data) {
//                 if (data.hasOwnProperty(property))
//                     (<any>this)[property] = (<any>data)[property];
//             }
//         }
//     }
//
//     init(_data?: any) {
//         if (_data) {
//             this.type = _data["type"];
//             this.typeSimple = _data["typeSimple"];
//         }
//     }
//
//     static fromJS(data: any): ReturnValueApiDescriptionModel {
//         data = typeof data === 'object' ? data : {};
//         let result = new ReturnValueApiDescriptionModel();
//         result.init(data);
//         return result;
//     }
//
//     toJSON(data?: any) {
//         data = typeof data === 'object' ? data : {};
//         data["type"] = this.type;
//         data["typeSimple"] = this.typeSimple;
//         return data;
//     }
// }
//
// export interface IReturnValueApiDescriptionModel {
//     type: string | undefined;
//     typeSimple: string | undefined;
// }
//
// export class TypeApiDescriptionModel implements ITypeApiDescriptionModel {
//     baseType!: string | undefined;
//     isEnum!: boolean;
//     enumNames!: string[] | undefined;
//     enumValues!: any[] | undefined;
//     genericArguments!: string[] | undefined;
//     properties!: PropertyApiDescriptionModel[] | undefined;
//
//     constructor(data?: ITypeApiDescriptionModel) {
//         if (data) {
//             for (var property in data) {
//                 if (data.hasOwnProperty(property))
//                     (<any>this)[property] = (<any>data)[property];
//             }
//         }
//     }
//
//     init(_data?: any) {
//         if (_data) {
//             this.baseType = _data["baseType"];
//             this.isEnum = _data["isEnum"];
//             if (Array.isArray(_data["enumNames"])) {
//                 this.enumNames = [] as any;
//                 for (let item of _data["enumNames"])
//                     this.enumNames!.push(item);
//             }
//             if (Array.isArray(_data["enumValues"])) {
//                 this.enumValues = [] as any;
//                 for (let item of _data["enumValues"])
//                     this.enumValues!.push(item);
//             }
//             if (Array.isArray(_data["genericArguments"])) {
//                 this.genericArguments = [] as any;
//                 for (let item of _data["genericArguments"])
//                     this.genericArguments!.push(item);
//             }
//             if (Array.isArray(_data["properties"])) {
//                 this.properties = [] as any;
//                 for (let item of _data["properties"])
//                     this.properties!.push(PropertyApiDescriptionModel.fromJS(item));
//             }
//         }
//     }
//
//     static fromJS(data: any): TypeApiDescriptionModel {
//         data = typeof data === 'object' ? data : {};
//         let result = new TypeApiDescriptionModel();
//         result.init(data);
//         return result;
//     }
//
//     toJSON(data?: any) {
//         data = typeof data === 'object' ? data : {};
//         data["baseType"] = this.baseType;
//         data["isEnum"] = this.isEnum;
//         if (Array.isArray(this.enumNames)) {
//             data["enumNames"] = [];
//             for (let item of this.enumNames)
//                 data["enumNames"].push(item);
//         }
//         if (Array.isArray(this.enumValues)) {
//             data["enumValues"] = [];
//             for (let item of this.enumValues)
//                 data["enumValues"].push(item);
//         }
//         if (Array.isArray(this.genericArguments)) {
//             data["genericArguments"] = [];
//             for (let item of this.genericArguments)
//                 data["genericArguments"].push(item);
//         }
//         if (Array.isArray(this.properties)) {
//             data["properties"] = [];
//             for (let item of this.properties)
//                 data["properties"].push(item.toJSON());
//         }
//         return data;
//     }
// }
//
// export interface ITypeApiDescriptionModel {
//     baseType: string | undefined;
//     isEnum: boolean;
//     enumNames: string[] | undefined;
//     enumValues: any[] | undefined;
//     genericArguments: string[] | undefined;
//     properties: PropertyApiDescriptionModel[] | undefined;
// }
//
// export class RemoteServiceErrorInfo implements IRemoteServiceErrorInfo {
//     code!: string | undefined;
//     message!: string | undefined;
//     details!: string | undefined;
//     data!: { [key: string]: any; } | undefined;
//     validationErrors!: RemoteServiceValidationErrorInfo[] | undefined;
//
//     constructor(data?: IRemoteServiceErrorInfo) {
//         if (data) {
//             for (var property in data) {
//                 if (data.hasOwnProperty(property))
//                     (<any>this)[property] = (<any>data)[property];
//             }
//         }
//     }
//
//     init(_data?: any) {
//         if (_data) {
//             this.code = _data["code"];
//             this.message = _data["message"];
//             this.details = _data["details"];
//             if (_data["data"]) {
//                 this.data = {} as any;
//                 for (let key in _data["data"]) {
//                     if (_data["data"].hasOwnProperty(key))
//                         (<any>this.data)![key] = _data["data"][key];
//                 }
//             }
//             if (Array.isArray(_data["validationErrors"])) {
//                 this.validationErrors = [] as any;
//                 for (let item of _data["validationErrors"])
//                     this.validationErrors!.push(RemoteServiceValidationErrorInfo.fromJS(item));
//             }
//         }
//     }
//
//     static fromJS(data: any): RemoteServiceErrorInfo {
//         data = typeof data === 'object' ? data : {};
//         let result = new RemoteServiceErrorInfo();
//         result.init(data);
//         return result;
//     }
//
//     toJSON(data?: any) {
//         data = typeof data === 'object' ? data : {};
//         data["code"] = this.code;
//         data["message"] = this.message;
//         data["details"] = this.details;
//         if (this.data) {
//             data["data"] = {};
//             for (let key in this.data) {
//                 if (this.data.hasOwnProperty(key))
//                     (<any>data["data"])[key] = this.data[key];
//             }
//         }
//         if (Array.isArray(this.validationErrors)) {
//             data["validationErrors"] = [];
//             for (let item of this.validationErrors)
//                 data["validationErrors"].push(item.toJSON());
//         }
//         return data;
//     }
// }
//
// export interface IRemoteServiceErrorInfo {
//     code: string | undefined;
//     message: string | undefined;
//     details: string | undefined;
//     data: { [key: string]: any; } | undefined;
//     validationErrors: RemoteServiceValidationErrorInfo[] | undefined;
// }
//
// export class RemoteServiceErrorResponse implements IRemoteServiceErrorResponse {
//     error!: RemoteServiceErrorInfo;
//
//     constructor(data?: IRemoteServiceErrorResponse) {
//         if (data) {
//             for (var property in data) {
//                 if (data.hasOwnProperty(property))
//                     (<any>this)[property] = (<any>data)[property];
//             }
//         }
//     }
//
//     init(_data?: any) {
//         if (_data) {
//             this.error = _data["error"] ? RemoteServiceErrorInfo.fromJS(_data["error"]) : <any>undefined;
//         }
//     }
//
//     static fromJS(data: any): RemoteServiceErrorResponse {
//         data = typeof data === 'object' ? data : {};
//         let result = new RemoteServiceErrorResponse();
//         result.init(data);
//         return result;
//     }
//
//     toJSON(data?: any) {
//         data = typeof data === 'object' ? data : {};
//         data["error"] = this.error ? this.error.toJSON() : <any>undefined;
//         return data;
//     }
// }
//
// export interface IRemoteServiceErrorResponse {
//     error: RemoteServiceErrorInfo;
// }
//
// export class RemoteServiceValidationErrorInfo implements IRemoteServiceValidationErrorInfo {
//     message!: string | undefined;
//     members!: string[] | undefined;
//
//     constructor(data?: IRemoteServiceValidationErrorInfo) {
//         if (data) {
//             for (var property in data) {
//                 if (data.hasOwnProperty(property))
//                     (<any>this)[property] = (<any>data)[property];
//             }
//         }
//     }
//
//     init(_data?: any) {
//         if (_data) {
//             this.message = _data["message"];
//             if (Array.isArray(_data["members"])) {
//                 this.members = [] as any;
//                 for (let item of _data["members"])
//                     this.members!.push(item);
//             }
//         }
//     }
//
//     static fromJS(data: any): RemoteServiceValidationErrorInfo {
//         data = typeof data === 'object' ? data : {};
//         let result = new RemoteServiceValidationErrorInfo();
//         result.init(data);
//         return result;
//     }
//
//     toJSON(data?: any) {
//         data = typeof data === 'object' ? data : {};
//         data["message"] = this.message;
//         if (Array.isArray(this.members)) {
//             data["members"] = [];
//             for (let item of this.members)
//                 data["members"].push(item);
//         }
//         return data;
//     }
// }
//
// export interface IRemoteServiceValidationErrorInfo {
//     message: string | undefined;
//     members: string[] | undefined;
// }
//
// export class ChangePasswordInput implements IChangePasswordInput {
//     currentPassword!: string | undefined;
//     newPassword!: string;
//
//     constructor(data?: IChangePasswordInput) {
//         if (data) {
//             for (var property in data) {
//                 if (data.hasOwnProperty(property))
//                     (<any>this)[property] = (<any>data)[property];
//             }
//         }
//     }
//
//     init(_data?: any) {
//         if (_data) {
//             this.currentPassword = _data["currentPassword"];
//             this.newPassword = _data["newPassword"];
//         }
//     }
//
//     static fromJS(data: any): ChangePasswordInput {
//         data = typeof data === 'object' ? data : {};
//         let result = new ChangePasswordInput();
//         result.init(data);
//         return result;
//     }
//
//     toJSON(data?: any) {
//         data = typeof data === 'object' ? data : {};
//         data["currentPassword"] = this.currentPassword;
//         data["newPassword"] = this.newPassword;
//         return data;
//     }
// }
//
// export interface IChangePasswordInput {
//     currentPassword: string | undefined;
//     newPassword: string;
// }
//
// export class ClaimTypeDto implements IClaimTypeDto {
//     readonly extraProperties!: { [key: string]: any; } | undefined;
//     id!: string;
//     name!: string | undefined;
//     required!: boolean;
//     isStatic!: boolean;
//     regex!: string | undefined;
//     regexDescription!: string | undefined;
//     description!: string | undefined;
//     valueType!: IdentityClaimValueType;
//     valueTypeAsString!: string | undefined;
//
//     constructor(data?: IClaimTypeDto) {
//         if (data) {
//             for (var property in data) {
//                 if (data.hasOwnProperty(property))
//                     (<any>this)[property] = (<any>data)[property];
//             }
//         }
//     }
//
//     init(_data?: any) {
//         if (_data) {
//             if (_data["extraProperties"]) {
//                 (<any>this).extraProperties = {} as any;
//                 for (let key in _data["extraProperties"]) {
//                     if (_data["extraProperties"].hasOwnProperty(key))
//                         (<any>(<any>this).extraProperties)![key] = _data["extraProperties"][key];
//                 }
//             }
//             this.id = _data["id"];
//             this.name = _data["name"];
//             this.required = _data["required"];
//             this.isStatic = _data["isStatic"];
//             this.regex = _data["regex"];
//             this.regexDescription = _data["regexDescription"];
//             this.description = _data["description"];
//             this.valueType = _data["valueType"];
//             this.valueTypeAsString = _data["valueTypeAsString"];
//         }
//     }
//
//     static fromJS(data: any): ClaimTypeDto {
//         data = typeof data === 'object' ? data : {};
//         let result = new ClaimTypeDto();
//         result.init(data);
//         return result;
//     }
//
//     toJSON(data?: any) {
//         data = typeof data === 'object' ? data : {};
//         if (this.extraProperties) {
//             data["extraProperties"] = {};
//             for (let key in this.extraProperties) {
//                 if (this.extraProperties.hasOwnProperty(key))
//                     (<any>data["extraProperties"])[key] = this.extraProperties[key];
//             }
//         }
//         data["id"] = this.id;
//         data["name"] = this.name;
//         data["required"] = this.required;
//         data["isStatic"] = this.isStatic;
//         data["regex"] = this.regex;
//         data["regexDescription"] = this.regexDescription;
//         data["description"] = this.description;
//         data["valueType"] = this.valueType;
//         data["valueTypeAsString"] = this.valueTypeAsString;
//         return data;
//     }
// }
//
// export interface IClaimTypeDto {
//     extraProperties: { [key: string]: any; } | undefined;
//     id: string;
//     name: string | undefined;
//     required: boolean;
//     isStatic: boolean;
//     regex: string | undefined;
//     regexDescription: string | undefined;
//     description: string | undefined;
//     valueType: IdentityClaimValueType;
//     valueTypeAsString: string | undefined;
// }
//
// export class CreateClaimTypeDto implements ICreateClaimTypeDto {
//     readonly extraProperties!: { [key: string]: any; } | undefined;
//     name!: string;
//     required!: boolean;
//     regex!: string | undefined;
//     regexDescription!: string | undefined;
//     description!: string | undefined;
//     valueType!: IdentityClaimValueType;
//
//     constructor(data?: ICreateClaimTypeDto) {
//         if (data) {
//             for (var property in data) {
//                 if (data.hasOwnProperty(property))
//                     (<any>this)[property] = (<any>data)[property];
//             }
//         }
//     }
//
//     init(_data?: any) {
//         if (_data) {
//             if (_data["extraProperties"]) {
//                 (<any>this).extraProperties = {} as any;
//                 for (let key in _data["extraProperties"]) {
//                     if (_data["extraProperties"].hasOwnProperty(key))
//                         (<any>(<any>this).extraProperties)![key] = _data["extraProperties"][key];
//                 }
//             }
//             this.name = _data["name"];
//             this.required = _data["required"];
//             this.regex = _data["regex"];
//             this.regexDescription = _data["regexDescription"];
//             this.description = _data["description"];
//             this.valueType = _data["valueType"];
//         }
//     }
//
//     static fromJS(data: any): CreateClaimTypeDto {
//         data = typeof data === 'object' ? data : {};
//         let result = new CreateClaimTypeDto();
//         result.init(data);
//         return result;
//     }
//
//     toJSON(data?: any) {
//         data = typeof data === 'object' ? data : {};
//         if (this.extraProperties) {
//             data["extraProperties"] = {};
//             for (let key in this.extraProperties) {
//                 if (this.extraProperties.hasOwnProperty(key))
//                     (<any>data["extraProperties"])[key] = this.extraProperties[key];
//             }
//         }
//         data["name"] = this.name;
//         data["required"] = this.required;
//         data["regex"] = this.regex;
//         data["regexDescription"] = this.regexDescription;
//         data["description"] = this.description;
//         data["valueType"] = this.valueType;
//         return data;
//     }
// }
//
// export interface ICreateClaimTypeDto {
//     extraProperties: { [key: string]: any; } | undefined;
//     name: string;
//     required: boolean;
//     regex: string | undefined;
//     regexDescription: string | undefined;
//     description: string | undefined;
//     valueType: IdentityClaimValueType;
// }
//
// export enum IdentityProTwoFactorBehaviour {
//     _0 = 0,
//     _1 = 1,
//     _2 = 2,
// }
//
// export enum IdentityClaimValueType {
//     _0 = 0,
//     _1 = 1,
//     _2 = 2,
//     _3 = 3,
// }
//
// export class IdentityLockoutSettingsDto implements IIdentityLockoutSettingsDto {
//     allowedForNewUsers!: boolean;
//     lockoutDuration!: number;
//     maxFailedAccessAttempts!: number;
//
//     constructor(data?: IIdentityLockoutSettingsDto) {
//         if (data) {
//             for (var property in data) {
//                 if (data.hasOwnProperty(property))
//                     (<any>this)[property] = (<any>data)[property];
//             }
//         }
//     }
//
//     init(_data?: any) {
//         if (_data) {
//             this.allowedForNewUsers = _data["allowedForNewUsers"];
//             this.lockoutDuration = _data["lockoutDuration"];
//             this.maxFailedAccessAttempts = _data["maxFailedAccessAttempts"];
//         }
//     }
//
//     static fromJS(data: any): IdentityLockoutSettingsDto {
//         data = typeof data === 'object' ? data : {};
//         let result = new IdentityLockoutSettingsDto();
//         result.init(data);
//         return result;
//     }
//
//     toJSON(data?: any) {
//         data = typeof data === 'object' ? data : {};
//         data["allowedForNewUsers"] = this.allowedForNewUsers;
//         data["lockoutDuration"] = this.lockoutDuration;
//         data["maxFailedAccessAttempts"] = this.maxFailedAccessAttempts;
//         return data;
//     }
// }
//
// export interface IIdentityLockoutSettingsDto {
//     allowedForNewUsers: boolean;
//     lockoutDuration: number;
//     maxFailedAccessAttempts: number;
// }
//
// export class IdentityPasswordSettingsDto implements IIdentityPasswordSettingsDto {
//     requiredLength!: number;
//     requiredUniqueChars!: number;
//     requireNonAlphanumeric!: boolean;
//     requireLowercase!: boolean;
//     requireUppercase!: boolean;
//     requireDigit!: boolean;
//
//     constructor(data?: IIdentityPasswordSettingsDto) {
//         if (data) {
//             for (var property in data) {
//                 if (data.hasOwnProperty(property))
//                     (<any>this)[property] = (<any>data)[property];
//             }
//         }
//     }
//
//     init(_data?: any) {
//         if (_data) {
//             this.requiredLength = _data["requiredLength"];
//             this.requiredUniqueChars = _data["requiredUniqueChars"];
//             this.requireNonAlphanumeric = _data["requireNonAlphanumeric"];
//             this.requireLowercase = _data["requireLowercase"];
//             this.requireUppercase = _data["requireUppercase"];
//             this.requireDigit = _data["requireDigit"];
//         }
//     }
//
//     static fromJS(data: any): IdentityPasswordSettingsDto {
//         data = typeof data === 'object' ? data : {};
//         let result = new IdentityPasswordSettingsDto();
//         result.init(data);
//         return result;
//     }
//
//     toJSON(data?: any) {
//         data = typeof data === 'object' ? data : {};
//         data["requiredLength"] = this.requiredLength;
//         data["requiredUniqueChars"] = this.requiredUniqueChars;
//         data["requireNonAlphanumeric"] = this.requireNonAlphanumeric;
//         data["requireLowercase"] = this.requireLowercase;
//         data["requireUppercase"] = this.requireUppercase;
//         data["requireDigit"] = this.requireDigit;
//         return data;
//     }
// }
//
// export interface IIdentityPasswordSettingsDto {
//     requiredLength: number;
//     requiredUniqueChars: number;
//     requireNonAlphanumeric: boolean;
//     requireLowercase: boolean;
//     requireUppercase: boolean;
//     requireDigit: boolean;
// }
//
// export class IdentityRoleClaimDto implements IIdentityRoleClaimDto {
//     roleId!: string;
//     claimType!: string | undefined;
//     claimValue!: string | undefined;
//
//     constructor(data?: IIdentityRoleClaimDto) {
//         if (data) {
//             for (var property in data) {
//                 if (data.hasOwnProperty(property))
//                     (<any>this)[property] = (<any>data)[property];
//             }
//         }
//     }
//
//     init(_data?: any) {
//         if (_data) {
//             this.roleId = _data["roleId"];
//             this.claimType = _data["claimType"];
//             this.claimValue = _data["claimValue"];
//         }
//     }
//
//     static fromJS(data: any): IdentityRoleClaimDto {
//         data = typeof data === 'object' ? data : {};
//         let result = new IdentityRoleClaimDto();
//         result.init(data);
//         return result;
//     }
//
//     toJSON(data?: any) {
//         data = typeof data === 'object' ? data : {};
//         data["roleId"] = this.roleId;
//         data["claimType"] = this.claimType;
//         data["claimValue"] = this.claimValue;
//         return data;
//     }
// }
//
// export interface IIdentityRoleClaimDto {
//     roleId: string;
//     claimType: string | undefined;
//     claimValue: string | undefined;
// }
//
// export class IdentityRoleCreateDto implements IIdentityRoleCreateDto {
//     readonly extraProperties!: { [key: string]: any; } | undefined;
//     name!: string;
//     isDefault!: boolean;
//     isPublic!: boolean;
//
//     constructor(data?: IIdentityRoleCreateDto) {
//         if (data) {
//             for (var property in data) {
//                 if (data.hasOwnProperty(property))
//                     (<any>this)[property] = (<any>data)[property];
//             }
//         }
//     }
//
//     init(_data?: any) {
//         if (_data) {
//             if (_data["extraProperties"]) {
//                 (<any>this).extraProperties = {} as any;
//                 for (let key in _data["extraProperties"]) {
//                     if (_data["extraProperties"].hasOwnProperty(key))
//                         (<any>(<any>this).extraProperties)![key] = _data["extraProperties"][key];
//                 }
//             }
//             this.name = _data["name"];
//             this.isDefault = _data["isDefault"];
//             this.isPublic = _data["isPublic"];
//         }
//     }
//
//     static fromJS(data: any): IdentityRoleCreateDto {
//         data = typeof data === 'object' ? data : {};
//         let result = new IdentityRoleCreateDto();
//         result.init(data);
//         return result;
//     }
//
//     toJSON(data?: any) {
//         data = typeof data === 'object' ? data : {};
//         if (this.extraProperties) {
//             data["extraProperties"] = {};
//             for (let key in this.extraProperties) {
//                 if (this.extraProperties.hasOwnProperty(key))
//                     (<any>data["extraProperties"])[key] = this.extraProperties[key];
//             }
//         }
//         data["name"] = this.name;
//         data["isDefault"] = this.isDefault;
//         data["isPublic"] = this.isPublic;
//         return data;
//     }
// }
//
// export interface IIdentityRoleCreateDto {
//     extraProperties: { [key: string]: any; } | undefined;
//     name: string;
//     isDefault: boolean;
//     isPublic: boolean;
// }
//
// export class IdentityRoleDto implements IIdentityRoleDto {
//     readonly extraProperties!: { [key: string]: any; } | undefined;
//     id!: string;
//     name!: string | undefined;
//     isDefault!: boolean;
//     isStatic!: boolean;
//     isPublic!: boolean;
//     concurrencyStamp!: string | undefined;
//
//     constructor(data?: IIdentityRoleDto) {
//         if (data) {
//             for (var property in data) {
//                 if (data.hasOwnProperty(property))
//                     (<any>this)[property] = (<any>data)[property];
//             }
//         }
//     }
//
//     init(_data?: any) {
//         if (_data) {
//             if (_data["extraProperties"]) {
//                 (<any>this).extraProperties = {} as any;
//                 for (let key in _data["extraProperties"]) {
//                     if (_data["extraProperties"].hasOwnProperty(key))
//                         (<any>(<any>this).extraProperties)![key] = _data["extraProperties"][key];
//                 }
//             }
//             this.id = _data["id"];
//             this.name = _data["name"];
//             this.isDefault = _data["isDefault"];
//             this.isStatic = _data["isStatic"];
//             this.isPublic = _data["isPublic"];
//             this.concurrencyStamp = _data["concurrencyStamp"];
//         }
//     }
//
//     static fromJS(data: any): IdentityRoleDto {
//         data = typeof data === 'object' ? data : {};
//         let result = new IdentityRoleDto();
//         result.init(data);
//         return result;
//     }
//
//     toJSON(data?: any) {
//         data = typeof data === 'object' ? data : {};
//         if (this.extraProperties) {
//             data["extraProperties"] = {};
//             for (let key in this.extraProperties) {
//                 if (this.extraProperties.hasOwnProperty(key))
//                     (<any>data["extraProperties"])[key] = this.extraProperties[key];
//             }
//         }
//         data["id"] = this.id;
//         data["name"] = this.name;
//         data["isDefault"] = this.isDefault;
//         data["isStatic"] = this.isStatic;
//         data["isPublic"] = this.isPublic;
//         data["concurrencyStamp"] = this.concurrencyStamp;
//         return data;
//     }
// }
//
// export interface IIdentityRoleDto {
//     extraProperties: { [key: string]: any; } | undefined;
//     id: string;
//     name: string | undefined;
//     isDefault: boolean;
//     isStatic: boolean;
//     isPublic: boolean;
//     concurrencyStamp: string | undefined;
// }
//
// export class IdentityRoleUpdateDto implements IIdentityRoleUpdateDto {
//     readonly extraProperties!: { [key: string]: any; } | undefined;
//     name!: string;
//     isDefault!: boolean;
//     isPublic!: boolean;
//     concurrencyStamp!: string | undefined;
//
//     constructor(data?: IIdentityRoleUpdateDto) {
//         if (data) {
//             for (var property in data) {
//                 if (data.hasOwnProperty(property))
//                     (<any>this)[property] = (<any>data)[property];
//             }
//         }
//     }
//
//     init(_data?: any) {
//         if (_data) {
//             if (_data["extraProperties"]) {
//                 (<any>this).extraProperties = {} as any;
//                 for (let key in _data["extraProperties"]) {
//                     if (_data["extraProperties"].hasOwnProperty(key))
//                         (<any>(<any>this).extraProperties)![key] = _data["extraProperties"][key];
//                 }
//             }
//             this.name = _data["name"];
//             this.isDefault = _data["isDefault"];
//             this.isPublic = _data["isPublic"];
//             this.concurrencyStamp = _data["concurrencyStamp"];
//         }
//     }
//
//     static fromJS(data: any): IdentityRoleUpdateDto {
//         data = typeof data === 'object' ? data : {};
//         let result = new IdentityRoleUpdateDto();
//         result.init(data);
//         return result;
//     }
//
//     toJSON(data?: any) {
//         data = typeof data === 'object' ? data : {};
//         if (this.extraProperties) {
//             data["extraProperties"] = {};
//             for (let key in this.extraProperties) {
//                 if (this.extraProperties.hasOwnProperty(key))
//                     (<any>data["extraProperties"])[key] = this.extraProperties[key];
//             }
//         }
//         data["name"] = this.name;
//         data["isDefault"] = this.isDefault;
//         data["isPublic"] = this.isPublic;
//         data["concurrencyStamp"] = this.concurrencyStamp;
//         return data;
//     }
// }
//
// export interface IIdentityRoleUpdateDto {
//     extraProperties: { [key: string]: any; } | undefined;
//     name: string;
//     isDefault: boolean;
//     isPublic: boolean;
//     concurrencyStamp: string | undefined;
// }
//
// export class IdentitySecurityLogDto implements IIdentitySecurityLogDto {
//     id!: string;
//     tenantId!: string | undefined;
//     applicationName!: string | undefined;
//     identity!: string | undefined;
//     action!: string | undefined;
//     userId!: string | undefined;
//     userName!: string | undefined;
//     tenantName!: string | undefined;
//     clientId!: string | undefined;
//     correlationId!: string | undefined;
//     clientIpAddress!: string | undefined;
//     browserInfo!: string | undefined;
//     creationTime!: DateTime;
//     extraProperties!: { [key: string]: any; } | undefined;
//
//     constructor(data?: IIdentitySecurityLogDto) {
//         if (data) {
//             for (var property in data) {
//                 if (data.hasOwnProperty(property))
//                     (<any>this)[property] = (<any>data)[property];
//             }
//         }
//     }
//
//     init(_data?: any) {
//         if (_data) {
//             this.id = _data["id"];
//             this.tenantId = _data["tenantId"];
//             this.applicationName = _data["applicationName"];
//             this.identity = _data["identity"];
//             this.action = _data["action"];
//             this.userId = _data["userId"];
//             this.userName = _data["userName"];
//             this.tenantName = _data["tenantName"];
//             this.clientId = _data["clientId"];
//             this.correlationId = _data["correlationId"];
//             this.clientIpAddress = _data["clientIpAddress"];
//             this.browserInfo = _data["browserInfo"];
//             this.creationTime = _data["creationTime"] ? DateTime.fromISO(_data["creationTime"].toString()) : <any>undefined;
//             if (_data["extraProperties"]) {
//                 this.extraProperties = {} as any;
//                 for (let key in _data["extraProperties"]) {
//                     if (_data["extraProperties"].hasOwnProperty(key))
//                         (<any>this.extraProperties)![key] = _data["extraProperties"][key];
//                 }
//             }
//         }
//     }
//
//     static fromJS(data: any): IdentitySecurityLogDto {
//         data = typeof data === 'object' ? data : {};
//         let result = new IdentitySecurityLogDto();
//         result.init(data);
//         return result;
//     }
//
//     toJSON(data?: any) {
//         data = typeof data === 'object' ? data : {};
//         data["id"] = this.id;
//         data["tenantId"] = this.tenantId;
//         data["applicationName"] = this.applicationName;
//         data["identity"] = this.identity;
//         data["action"] = this.action;
//         data["userId"] = this.userId;
//         data["userName"] = this.userName;
//         data["tenantName"] = this.tenantName;
//         data["clientId"] = this.clientId;
//         data["correlationId"] = this.correlationId;
//         data["clientIpAddress"] = this.clientIpAddress;
//         data["browserInfo"] = this.browserInfo;
//         data["creationTime"] = this.creationTime ? this.creationTime.toString() : <any>undefined;
//         if (this.extraProperties) {
//             data["extraProperties"] = {};
//             for (let key in this.extraProperties) {
//                 if (this.extraProperties.hasOwnProperty(key))
//                     (<any>data["extraProperties"])[key] = this.extraProperties[key];
//             }
//         }
//         return data;
//     }
// }
//
// export interface IIdentitySecurityLogDto {
//     id: string;
//     tenantId: string | undefined;
//     applicationName: string | undefined;
//     identity: string | undefined;
//     action: string | undefined;
//     userId: string | undefined;
//     userName: string | undefined;
//     tenantName: string | undefined;
//     clientId: string | undefined;
//     correlationId: string | undefined;
//     clientIpAddress: string | undefined;
//     browserInfo: string | undefined;
//     creationTime: DateTime;
//     extraProperties: { [key: string]: any; } | undefined;
// }
//
// export class IdentitySettingsDto implements IIdentitySettingsDto {
//     password!: IdentityPasswordSettingsDto;
//     lockout!: IdentityLockoutSettingsDto;
//     signIn!: IdentitySignInSettingsDto;
//     user!: IdentityUserSettingsDto;
//
//     constructor(data?: IIdentitySettingsDto) {
//         if (data) {
//             for (var property in data) {
//                 if (data.hasOwnProperty(property))
//                     (<any>this)[property] = (<any>data)[property];
//             }
//         }
//     }
//
//     init(_data?: any) {
//         if (_data) {
//             this.password = _data["password"] ? IdentityPasswordSettingsDto.fromJS(_data["password"]) : <any>undefined;
//             this.lockout = _data["lockout"] ? IdentityLockoutSettingsDto.fromJS(_data["lockout"]) : <any>undefined;
//             this.signIn = _data["signIn"] ? IdentitySignInSettingsDto.fromJS(_data["signIn"]) : <any>undefined;
//             this.user = _data["user"] ? IdentityUserSettingsDto.fromJS(_data["user"]) : <any>undefined;
//         }
//     }
//
//     static fromJS(data: any): IdentitySettingsDto {
//         data = typeof data === 'object' ? data : {};
//         let result = new IdentitySettingsDto();
//         result.init(data);
//         return result;
//     }
//
//     toJSON(data?: any) {
//         data = typeof data === 'object' ? data : {};
//         data["password"] = this.password ? this.password.toJSON() : <any>undefined;
//         data["lockout"] = this.lockout ? this.lockout.toJSON() : <any>undefined;
//         data["signIn"] = this.signIn ? this.signIn.toJSON() : <any>undefined;
//         data["user"] = this.user ? this.user.toJSON() : <any>undefined;
//         return data;
//     }
// }
//
// export interface IIdentitySettingsDto {
//     password: IdentityPasswordSettingsDto;
//     lockout: IdentityLockoutSettingsDto;
//     signIn: IdentitySignInSettingsDto;
//     user: IdentityUserSettingsDto;
// }
//
// export class IdentitySignInSettingsDto implements IIdentitySignInSettingsDto {
//     requireConfirmedEmail!: boolean;
//     enablePhoneNumberConfirmation!: boolean;
//     requireConfirmedPhoneNumber!: boolean;
//
//     constructor(data?: IIdentitySignInSettingsDto) {
//         if (data) {
//             for (var property in data) {
//                 if (data.hasOwnProperty(property))
//                     (<any>this)[property] = (<any>data)[property];
//             }
//         }
//     }
//
//     init(_data?: any) {
//         if (_data) {
//             this.requireConfirmedEmail = _data["requireConfirmedEmail"];
//             this.enablePhoneNumberConfirmation = _data["enablePhoneNumberConfirmation"];
//             this.requireConfirmedPhoneNumber = _data["requireConfirmedPhoneNumber"];
//         }
//     }
//
//     static fromJS(data: any): IdentitySignInSettingsDto {
//         data = typeof data === 'object' ? data : {};
//         let result = new IdentitySignInSettingsDto();
//         result.init(data);
//         return result;
//     }
//
//     toJSON(data?: any) {
//         data = typeof data === 'object' ? data : {};
//         data["requireConfirmedEmail"] = this.requireConfirmedEmail;
//         data["enablePhoneNumberConfirmation"] = this.enablePhoneNumberConfirmation;
//         data["requireConfirmedPhoneNumber"] = this.requireConfirmedPhoneNumber;
//         return data;
//     }
// }
//
// export interface IIdentitySignInSettingsDto {
//     requireConfirmedEmail: boolean;
//     enablePhoneNumberConfirmation: boolean;
//     requireConfirmedPhoneNumber: boolean;
// }
//
// export class IdentityUserClaimDto implements IIdentityUserClaimDto {
//     userId!: string;
//     claimType!: string | undefined;
//     claimValue!: string | undefined;
//
//     constructor(data?: IIdentityUserClaimDto) {
//         if (data) {
//             for (var property in data) {
//                 if (data.hasOwnProperty(property))
//                     (<any>this)[property] = (<any>data)[property];
//             }
//         }
//     }
//
//     init(_data?: any) {
//         if (_data) {
//             this.userId = _data["userId"];
//             this.claimType = _data["claimType"];
//             this.claimValue = _data["claimValue"];
//         }
//     }
//
//     static fromJS(data: any): IdentityUserClaimDto {
//         data = typeof data === 'object' ? data : {};
//         let result = new IdentityUserClaimDto();
//         result.init(data);
//         return result;
//     }
//
//     toJSON(data?: any) {
//         data = typeof data === 'object' ? data : {};
//         data["userId"] = this.userId;
//         data["claimType"] = this.claimType;
//         data["claimValue"] = this.claimValue;
//         return data;
//     }
// }
//
// export interface IIdentityUserClaimDto {
//     userId: string;
//     claimType: string | undefined;
//     claimValue: string | undefined;
// }
//
// export class IdentityUserCreateDto implements IIdentityUserCreateDto {
//     readonly extraProperties!: { [key: string]: any; } | undefined;
//     userName!: string;
//     name!: string | undefined;
//     surname!: string | undefined;
//     email!: string;
//     phoneNumber!: string | undefined;
//     lockoutEnabled!: boolean;
//     roleNames!: string[] | undefined;
//     organizationUnitIds!: string[] | undefined;
//     password!: string;
//     sendConfirmationEmail!: boolean;
//
//     constructor(data?: IIdentityUserCreateDto) {
//         if (data) {
//             for (var property in data) {
//                 if (data.hasOwnProperty(property))
//                     (<any>this)[property] = (<any>data)[property];
//             }
//         }
//     }
//
//     init(_data?: any) {
//         if (_data) {
//             if (_data["extraProperties"]) {
//                 (<any>this).extraProperties = {} as any;
//                 for (let key in _data["extraProperties"]) {
//                     if (_data["extraProperties"].hasOwnProperty(key))
//                         (<any>(<any>this).extraProperties)![key] = _data["extraProperties"][key];
//                 }
//             }
//             this.userName = _data["userName"];
//             this.name = _data["name"];
//             this.surname = _data["surname"];
//             this.email = _data["email"];
//             this.phoneNumber = _data["phoneNumber"];
//             this.lockoutEnabled = _data["lockoutEnabled"];
//             if (Array.isArray(_data["roleNames"])) {
//                 this.roleNames = [] as any;
//                 for (let item of _data["roleNames"])
//                     this.roleNames!.push(item);
//             }
//             if (Array.isArray(_data["organizationUnitIds"])) {
//                 this.organizationUnitIds = [] as any;
//                 for (let item of _data["organizationUnitIds"])
//                     this.organizationUnitIds!.push(item);
//             }
//             this.password = _data["password"];
//             this.sendConfirmationEmail = _data["sendConfirmationEmail"];
//         }
//     }
//
//     static fromJS(data: any): IdentityUserCreateDto {
//         data = typeof data === 'object' ? data : {};
//         let result = new IdentityUserCreateDto();
//         result.init(data);
//         return result;
//     }
//
//     toJSON(data?: any) {
//         data = typeof data === 'object' ? data : {};
//         if (this.extraProperties) {
//             data["extraProperties"] = {};
//             for (let key in this.extraProperties) {
//                 if (this.extraProperties.hasOwnProperty(key))
//                     (<any>data["extraProperties"])[key] = this.extraProperties[key];
//             }
//         }
//         data["userName"] = this.userName;
//         data["name"] = this.name;
//         data["surname"] = this.surname;
//         data["email"] = this.email;
//         data["phoneNumber"] = this.phoneNumber;
//         data["lockoutEnabled"] = this.lockoutEnabled;
//         if (Array.isArray(this.roleNames)) {
//             data["roleNames"] = [];
//             for (let item of this.roleNames)
//                 data["roleNames"].push(item);
//         }
//         if (Array.isArray(this.organizationUnitIds)) {
//             data["organizationUnitIds"] = [];
//             for (let item of this.organizationUnitIds)
//                 data["organizationUnitIds"].push(item);
//         }
//         data["password"] = this.password;
//         data["sendConfirmationEmail"] = this.sendConfirmationEmail;
//         return data;
//     }
// }
//
// export interface IIdentityUserCreateDto {
//     extraProperties: { [key: string]: any; } | undefined;
//     userName: string;
//     name: string | undefined;
//     surname: string | undefined;
//     email: string;
//     phoneNumber: string | undefined;
//     lockoutEnabled: boolean;
//     roleNames: string[] | undefined;
//     organizationUnitIds: string[] | undefined;
//     password: string;
//     sendConfirmationEmail: boolean;
// }
//
// export class IdentityUserDto implements IIdentityUserDto {
//     readonly extraProperties!: { [key: string]: any; } | undefined;
//     id!: string;
//     tenantId!: string | undefined;
//     userName!: string | undefined;
//     email!: string | undefined;
//     name!: string | undefined;
//     surname!: string | undefined;
//     emailConfirmed!: boolean;
//     phoneNumber!: string | undefined;
//     phoneNumberConfirmed!: boolean;
//     supportTwoFactor!: boolean;
//     lockoutEnabled!: boolean;
//     isLockedOut!: boolean;
//     concurrencyStamp!: string | undefined;
//
//     constructor(data?: IIdentityUserDto) {
//         if (data) {
//             for (var property in data) {
//                 if (data.hasOwnProperty(property))
//                     (<any>this)[property] = (<any>data)[property];
//             }
//         }
//     }
//
//     init(_data?: any) {
//         if (_data) {
//             if (_data["extraProperties"]) {
//                 (<any>this).extraProperties = {} as any;
//                 for (let key in _data["extraProperties"]) {
//                     if (_data["extraProperties"].hasOwnProperty(key))
//                         (<any>(<any>this).extraProperties)![key] = _data["extraProperties"][key];
//                 }
//             }
//             this.id = _data["id"];
//             this.tenantId = _data["tenantId"];
//             this.userName = _data["userName"];
//             this.email = _data["email"];
//             this.name = _data["name"];
//             this.surname = _data["surname"];
//             this.emailConfirmed = _data["emailConfirmed"];
//             this.phoneNumber = _data["phoneNumber"];
//             this.phoneNumberConfirmed = _data["phoneNumberConfirmed"];
//             this.supportTwoFactor = _data["supportTwoFactor"];
//             this.lockoutEnabled = _data["lockoutEnabled"];
//             this.isLockedOut = _data["isLockedOut"];
//             this.concurrencyStamp = _data["concurrencyStamp"];
//         }
//     }
//
//     static fromJS(data: any): IdentityUserDto {
//         data = typeof data === 'object' ? data : {};
//         let result = new IdentityUserDto();
//         result.init(data);
//         return result;
//     }
//
//     toJSON(data?: any) {
//         data = typeof data === 'object' ? data : {};
//         if (this.extraProperties) {
//             data["extraProperties"] = {};
//             for (let key in this.extraProperties) {
//                 if (this.extraProperties.hasOwnProperty(key))
//                     (<any>data["extraProperties"])[key] = this.extraProperties[key];
//             }
//         }
//         data["id"] = this.id;
//         data["tenantId"] = this.tenantId;
//         data["userName"] = this.userName;
//         data["email"] = this.email;
//         data["name"] = this.name;
//         data["surname"] = this.surname;
//         data["emailConfirmed"] = this.emailConfirmed;
//         data["phoneNumber"] = this.phoneNumber;
//         data["phoneNumberConfirmed"] = this.phoneNumberConfirmed;
//         data["supportTwoFactor"] = this.supportTwoFactor;
//         data["lockoutEnabled"] = this.lockoutEnabled;
//         data["isLockedOut"] = this.isLockedOut;
//         data["concurrencyStamp"] = this.concurrencyStamp;
//         return data;
//     }
// }
//
// export interface IIdentityUserDto {
//     extraProperties: { [key: string]: any; } | undefined;
//     id: string;
//     tenantId: string | undefined;
//     userName: string | undefined;
//     email: string | undefined;
//     name: string | undefined;
//     surname: string | undefined;
//     emailConfirmed: boolean;
//     phoneNumber: string | undefined;
//     phoneNumberConfirmed: boolean;
//     supportTwoFactor: boolean;
//     lockoutEnabled: boolean;
//     isLockedOut: boolean;
//     concurrencyStamp: string | undefined;
// }
//
// export class IdentityUserSettingsDto implements IIdentityUserSettingsDto {
//     isUserNameUpdateEnabled!: boolean;
//     isEmailUpdateEnabled!: boolean;
//
//     constructor(data?: IIdentityUserSettingsDto) {
//         if (data) {
//             for (var property in data) {
//                 if (data.hasOwnProperty(property))
//                     (<any>this)[property] = (<any>data)[property];
//             }
//         }
//     }
//
//     init(_data?: any) {
//         if (_data) {
//             this.isUserNameUpdateEnabled = _data["isUserNameUpdateEnabled"];
//             this.isEmailUpdateEnabled = _data["isEmailUpdateEnabled"];
//         }
//     }
//
//     static fromJS(data: any): IdentityUserSettingsDto {
//         data = typeof data === 'object' ? data : {};
//         let result = new IdentityUserSettingsDto();
//         result.init(data);
//         return result;
//     }
//
//     toJSON(data?: any) {
//         data = typeof data === 'object' ? data : {};
//         data["isUserNameUpdateEnabled"] = this.isUserNameUpdateEnabled;
//         data["isEmailUpdateEnabled"] = this.isEmailUpdateEnabled;
//         return data;
//     }
// }
//
// export interface IIdentityUserSettingsDto {
//     isUserNameUpdateEnabled: boolean;
//     isEmailUpdateEnabled: boolean;
// }
//
// export class IdentityUserUpdateDto implements IIdentityUserUpdateDto {
//     readonly extraProperties!: { [key: string]: any; } | undefined;
//     userName!: string;
//     name!: string | undefined;
//     surname!: string | undefined;
//     email!: string;
//     phoneNumber!: string | undefined;
//     lockoutEnabled!: boolean;
//     roleNames!: string[] | undefined;
//     organizationUnitIds!: string[] | undefined;
//     concurrencyStamp!: string | undefined;
//
//     constructor(data?: IIdentityUserUpdateDto) {
//         if (data) {
//             for (var property in data) {
//                 if (data.hasOwnProperty(property))
//                     (<any>this)[property] = (<any>data)[property];
//             }
//         }
//     }
//
//     init(_data?: any) {
//         if (_data) {
//             if (_data["extraProperties"]) {
//                 (<any>this).extraProperties = {} as any;
//                 for (let key in _data["extraProperties"]) {
//                     if (_data["extraProperties"].hasOwnProperty(key))
//                         (<any>(<any>this).extraProperties)![key] = _data["extraProperties"][key];
//                 }
//             }
//             this.userName = _data["userName"];
//             this.name = _data["name"];
//             this.surname = _data["surname"];
//             this.email = _data["email"];
//             this.phoneNumber = _data["phoneNumber"];
//             this.lockoutEnabled = _data["lockoutEnabled"];
//             if (Array.isArray(_data["roleNames"])) {
//                 this.roleNames = [] as any;
//                 for (let item of _data["roleNames"])
//                     this.roleNames!.push(item);
//             }
//             if (Array.isArray(_data["organizationUnitIds"])) {
//                 this.organizationUnitIds = [] as any;
//                 for (let item of _data["organizationUnitIds"])
//                     this.organizationUnitIds!.push(item);
//             }
//             this.concurrencyStamp = _data["concurrencyStamp"];
//         }
//     }
//
//     static fromJS(data: any): IdentityUserUpdateDto {
//         data = typeof data === 'object' ? data : {};
//         let result = new IdentityUserUpdateDto();
//         result.init(data);
//         return result;
//     }
//
//     toJSON(data?: any) {
//         data = typeof data === 'object' ? data : {};
//         if (this.extraProperties) {
//             data["extraProperties"] = {};
//             for (let key in this.extraProperties) {
//                 if (this.extraProperties.hasOwnProperty(key))
//                     (<any>data["extraProperties"])[key] = this.extraProperties[key];
//             }
//         }
//         data["userName"] = this.userName;
//         data["name"] = this.name;
//         data["surname"] = this.surname;
//         data["email"] = this.email;
//         data["phoneNumber"] = this.phoneNumber;
//         data["lockoutEnabled"] = this.lockoutEnabled;
//         if (Array.isArray(this.roleNames)) {
//             data["roleNames"] = [];
//             for (let item of this.roleNames)
//                 data["roleNames"].push(item);
//         }
//         if (Array.isArray(this.organizationUnitIds)) {
//             data["organizationUnitIds"] = [];
//             for (let item of this.organizationUnitIds)
//                 data["organizationUnitIds"].push(item);
//         }
//         data["concurrencyStamp"] = this.concurrencyStamp;
//         return data;
//     }
// }
//
// export interface IIdentityUserUpdateDto {
//     extraProperties: { [key: string]: any; } | undefined;
//     userName: string;
//     name: string | undefined;
//     surname: string | undefined;
//     email: string;
//     phoneNumber: string | undefined;
//     lockoutEnabled: boolean;
//     roleNames: string[] | undefined;
//     organizationUnitIds: string[] | undefined;
//     concurrencyStamp: string | undefined;
// }
//
// export class IdentityUserUpdatePasswordInput implements IIdentityUserUpdatePasswordInput {
//     newPassword!: string;
//
//     constructor(data?: IIdentityUserUpdatePasswordInput) {
//         if (data) {
//             for (var property in data) {
//                 if (data.hasOwnProperty(property))
//                     (<any>this)[property] = (<any>data)[property];
//             }
//         }
//     }
//
//     init(_data?: any) {
//         if (_data) {
//             this.newPassword = _data["newPassword"];
//         }
//     }
//
//     static fromJS(data: any): IdentityUserUpdatePasswordInput {
//         data = typeof data === 'object' ? data : {};
//         let result = new IdentityUserUpdatePasswordInput();
//         result.init(data);
//         return result;
//     }
//
//     toJSON(data?: any) {
//         data = typeof data === 'object' ? data : {};
//         data["newPassword"] = this.newPassword;
//         return data;
//     }
// }
//
// export interface IIdentityUserUpdatePasswordInput {
//     newPassword: string;
// }
//
// export class IdentityUserUpdateRolesDto implements IIdentityUserUpdateRolesDto {
//     roleNames!: string[];
//
//     constructor(data?: IIdentityUserUpdateRolesDto) {
//         if (data) {
//             for (var property in data) {
//                 if (data.hasOwnProperty(property))
//                     (<any>this)[property] = (<any>data)[property];
//             }
//         }
//         if (!data) {
//             this.roleNames = [];
//         }
//     }
//
//     init(_data?: any) {
//         if (_data) {
//             if (Array.isArray(_data["roleNames"])) {
//                 this.roleNames = [] as any;
//                 for (let item of _data["roleNames"])
//                     this.roleNames!.push(item);
//             }
//         }
//     }
//
//     static fromJS(data: any): IdentityUserUpdateRolesDto {
//         data = typeof data === 'object' ? data : {};
//         let result = new IdentityUserUpdateRolesDto();
//         result.init(data);
//         return result;
//     }
//
//     toJSON(data?: any) {
//         data = typeof data === 'object' ? data : {};
//         if (Array.isArray(this.roleNames)) {
//             data["roleNames"] = [];
//             for (let item of this.roleNames)
//                 data["roleNames"].push(item);
//         }
//         return data;
//     }
// }
//
// export interface IIdentityUserUpdateRolesDto {
//     roleNames: string[];
// }
//
// export class IsLinkedInput implements IIsLinkedInput {
//     userId!: string;
//     tenantId!: string | undefined;
//
//     constructor(data?: IIsLinkedInput) {
//         if (data) {
//             for (var property in data) {
//                 if (data.hasOwnProperty(property))
//                     (<any>this)[property] = (<any>data)[property];
//             }
//         }
//     }
//
//     init(_data?: any) {
//         if (_data) {
//             this.userId = _data["userId"];
//             this.tenantId = _data["tenantId"];
//         }
//     }
//
//     static fromJS(data: any): IsLinkedInput {
//         data = typeof data === 'object' ? data : {};
//         let result = new IsLinkedInput();
//         result.init(data);
//         return result;
//     }
//
//     toJSON(data?: any) {
//         data = typeof data === 'object' ? data : {};
//         data["userId"] = this.userId;
//         data["tenantId"] = this.tenantId;
//         return data;
//     }
// }
//
// export interface IIsLinkedInput {
//     userId: string;
//     tenantId: string | undefined;
// }
//
// export class LinkUserDto implements ILinkUserDto {
//     targetUserId!: string;
//     targetUserName!: string | undefined;
//     targetTenantId!: string | undefined;
//     targetTenantName!: string | undefined;
//     directlyLinked!: boolean;
//
//     constructor(data?: ILinkUserDto) {
//         if (data) {
//             for (var property in data) {
//                 if (data.hasOwnProperty(property))
//                     (<any>this)[property] = (<any>data)[property];
//             }
//         }
//     }
//
//     init(_data?: any) {
//         if (_data) {
//             this.targetUserId = _data["targetUserId"];
//             this.targetUserName = _data["targetUserName"];
//             this.targetTenantId = _data["targetTenantId"];
//             this.targetTenantName = _data["targetTenantName"];
//             this.directlyLinked = _data["directlyLinked"];
//         }
//     }
//
//     static fromJS(data: any): LinkUserDto {
//         data = typeof data === 'object' ? data : {};
//         let result = new LinkUserDto();
//         result.init(data);
//         return result;
//     }
//
//     toJSON(data?: any) {
//         data = typeof data === 'object' ? data : {};
//         data["targetUserId"] = this.targetUserId;
//         data["targetUserName"] = this.targetUserName;
//         data["targetTenantId"] = this.targetTenantId;
//         data["targetTenantName"] = this.targetTenantName;
//         data["directlyLinked"] = this.directlyLinked;
//         return data;
//     }
// }
//
// export interface ILinkUserDto {
//     targetUserId: string;
//     targetUserName: string | undefined;
//     targetTenantId: string | undefined;
//     targetTenantName: string | undefined;
//     directlyLinked: boolean;
// }
//
// export class LinkUserInput implements ILinkUserInput {
//     userId!: string;
//     tenantId!: string | undefined;
//     token!: string;
//
//     constructor(data?: ILinkUserInput) {
//         if (data) {
//             for (var property in data) {
//                 if (data.hasOwnProperty(property))
//                     (<any>this)[property] = (<any>data)[property];
//             }
//         }
//     }
//
//     init(_data?: any) {
//         if (_data) {
//             this.userId = _data["userId"];
//             this.tenantId = _data["tenantId"];
//             this.token = _data["token"];
//         }
//     }
//
//     static fromJS(data: any): LinkUserInput {
//         data = typeof data === 'object' ? data : {};
//         let result = new LinkUserInput();
//         result.init(data);
//         return result;
//     }
//
//     toJSON(data?: any) {
//         data = typeof data === 'object' ? data : {};
//         data["userId"] = this.userId;
//         data["tenantId"] = this.tenantId;
//         data["token"] = this.token;
//         return data;
//     }
// }
//
// export interface ILinkUserInput {
//     userId: string;
//     tenantId: string | undefined;
//     token: string;
// }
//
// export class OrganizationUnitCreateDto implements IOrganizationUnitCreateDto {
//     readonly extraProperties!: { [key: string]: any; } | undefined;
//     displayName!: string;
//     parentId!: string | undefined;
//
//     constructor(data?: IOrganizationUnitCreateDto) {
//         if (data) {
//             for (var property in data) {
//                 if (data.hasOwnProperty(property))
//                     (<any>this)[property] = (<any>data)[property];
//             }
//         }
//     }
//
//     init(_data?: any) {
//         if (_data) {
//             if (_data["extraProperties"]) {
//                 (<any>this).extraProperties = {} as any;
//                 for (let key in _data["extraProperties"]) {
//                     if (_data["extraProperties"].hasOwnProperty(key))
//                         (<any>(<any>this).extraProperties)![key] = _data["extraProperties"][key];
//                 }
//             }
//             this.displayName = _data["displayName"];
//             this.parentId = _data["parentId"];
//         }
//     }
//
//     static fromJS(data: any): OrganizationUnitCreateDto {
//         data = typeof data === 'object' ? data : {};
//         let result = new OrganizationUnitCreateDto();
//         result.init(data);
//         return result;
//     }
//
//     toJSON(data?: any) {
//         data = typeof data === 'object' ? data : {};
//         if (this.extraProperties) {
//             data["extraProperties"] = {};
//             for (let key in this.extraProperties) {
//                 if (this.extraProperties.hasOwnProperty(key))
//                     (<any>data["extraProperties"])[key] = this.extraProperties[key];
//             }
//         }
//         data["displayName"] = this.displayName;
//         data["parentId"] = this.parentId;
//         return data;
//     }
// }
//
// export interface IOrganizationUnitCreateDto {
//     extraProperties: { [key: string]: any; } | undefined;
//     displayName: string;
//     parentId: string | undefined;
// }
//
// export class OrganizationUnitDto implements IOrganizationUnitDto {
//     readonly extraProperties!: { [key: string]: any; } | undefined;
//     id!: string;
//     creationTime!: DateTime;
//     creatorId!: string | undefined;
//     lastModificationTime!: DateTime | undefined;
//     lastModifierId!: string | undefined;
//     isDeleted!: boolean;
//     deleterId!: string | undefined;
//     deletionTime!: DateTime | undefined;
//     parentId!: string | undefined;
//     code!: string | undefined;
//     displayName!: string | undefined;
//     roles!: OrganizationUnitRoleDto[] | undefined;
//
//     constructor(data?: IOrganizationUnitDto) {
//         if (data) {
//             for (var property in data) {
//                 if (data.hasOwnProperty(property))
//                     (<any>this)[property] = (<any>data)[property];
//             }
//         }
//     }
//
//     init(_data?: any) {
//         if (_data) {
//             if (_data["extraProperties"]) {
//                 (<any>this).extraProperties = {} as any;
//                 for (let key in _data["extraProperties"]) {
//                     if (_data["extraProperties"].hasOwnProperty(key))
//                         (<any>(<any>this).extraProperties)![key] = _data["extraProperties"][key];
//                 }
//             }
//             this.id = _data["id"];
//             this.creationTime = _data["creationTime"] ? DateTime.fromISO(_data["creationTime"].toString()) : <any>undefined;
//             this.creatorId = _data["creatorId"];
//             this.lastModificationTime = _data["lastModificationTime"] ? DateTime.fromISO(_data["lastModificationTime"].toString()) : <any>undefined;
//             this.lastModifierId = _data["lastModifierId"];
//             this.isDeleted = _data["isDeleted"];
//             this.deleterId = _data["deleterId"];
//             this.deletionTime = _data["deletionTime"] ? DateTime.fromISO(_data["deletionTime"].toString()) : <any>undefined;
//             this.parentId = _data["parentId"];
//             this.code = _data["code"];
//             this.displayName = _data["displayName"];
//             if (Array.isArray(_data["roles"])) {
//                 this.roles = [] as any;
//                 for (let item of _data["roles"])
//                     this.roles!.push(OrganizationUnitRoleDto.fromJS(item));
//             }
//         }
//     }
//
//     static fromJS(data: any): OrganizationUnitDto {
//         data = typeof data === 'object' ? data : {};
//         let result = new OrganizationUnitDto();
//         result.init(data);
//         return result;
//     }
//
//     toJSON(data?: any) {
//         data = typeof data === 'object' ? data : {};
//         if (this.extraProperties) {
//             data["extraProperties"] = {};
//             for (let key in this.extraProperties) {
//                 if (this.extraProperties.hasOwnProperty(key))
//                     (<any>data["extraProperties"])[key] = this.extraProperties[key];
//             }
//         }
//         data["id"] = this.id;
//         data["creationTime"] = this.creationTime ? this.creationTime.toString() : <any>undefined;
//         data["creatorId"] = this.creatorId;
//         data["lastModificationTime"] = this.lastModificationTime ? this.lastModificationTime.toString() : <any>undefined;
//         data["lastModifierId"] = this.lastModifierId;
//         data["isDeleted"] = this.isDeleted;
//         data["deleterId"] = this.deleterId;
//         data["deletionTime"] = this.deletionTime ? this.deletionTime.toString() : <any>undefined;
//         data["parentId"] = this.parentId;
//         data["code"] = this.code;
//         data["displayName"] = this.displayName;
//         if (Array.isArray(this.roles)) {
//             data["roles"] = [];
//             for (let item of this.roles)
//                 data["roles"].push(item.toJSON());
//         }
//         return data;
//     }
// }
//
// export interface IOrganizationUnitDto {
//     extraProperties: { [key: string]: any; } | undefined;
//     id: string;
//     creationTime: DateTime;
//     creatorId: string | undefined;
//     lastModificationTime: DateTime | undefined;
//     lastModifierId: string | undefined;
//     isDeleted: boolean;
//     deleterId: string | undefined;
//     deletionTime: DateTime | undefined;
//     parentId: string | undefined;
//     code: string | undefined;
//     displayName: string | undefined;
//     roles: OrganizationUnitRoleDto[] | undefined;
// }
//
// export class OrganizationUnitMoveInput implements IOrganizationUnitMoveInput {
//     newParentId!: string | undefined;
//
//     constructor(data?: IOrganizationUnitMoveInput) {
//         if (data) {
//             for (var property in data) {
//                 if (data.hasOwnProperty(property))
//                     (<any>this)[property] = (<any>data)[property];
//             }
//         }
//     }
//
//     init(_data?: any) {
//         if (_data) {
//             this.newParentId = _data["newParentId"];
//         }
//     }
//
//     static fromJS(data: any): OrganizationUnitMoveInput {
//         data = typeof data === 'object' ? data : {};
//         let result = new OrganizationUnitMoveInput();
//         result.init(data);
//         return result;
//     }
//
//     toJSON(data?: any) {
//         data = typeof data === 'object' ? data : {};
//         data["newParentId"] = this.newParentId;
//         return data;
//     }
// }
//
// export interface IOrganizationUnitMoveInput {
//     newParentId: string | undefined;
// }
//
// export class OrganizationUnitRoleDto implements IOrganizationUnitRoleDto {
//     creationTime!: DateTime;
//     creatorId!: string | undefined;
//     organizationUnitId!: string;
//     roleId!: string;
//
//     constructor(data?: IOrganizationUnitRoleDto) {
//         if (data) {
//             for (var property in data) {
//                 if (data.hasOwnProperty(property))
//                     (<any>this)[property] = (<any>data)[property];
//             }
//         }
//     }
//
//     init(_data?: any) {
//         if (_data) {
//             this.creationTime = _data["creationTime"] ? DateTime.fromISO(_data["creationTime"].toString()) : <any>undefined;
//             this.creatorId = _data["creatorId"];
//             this.organizationUnitId = _data["organizationUnitId"];
//             this.roleId = _data["roleId"];
//         }
//     }
//
//     static fromJS(data: any): OrganizationUnitRoleDto {
//         data = typeof data === 'object' ? data : {};
//         let result = new OrganizationUnitRoleDto();
//         result.init(data);
//         return result;
//     }
//
//     toJSON(data?: any) {
//         data = typeof data === 'object' ? data : {};
//         data["creationTime"] = this.creationTime ? this.creationTime.toString() : <any>undefined;
//         data["creatorId"] = this.creatorId;
//         data["organizationUnitId"] = this.organizationUnitId;
//         data["roleId"] = this.roleId;
//         return data;
//     }
// }
//
// export interface IOrganizationUnitRoleDto {
//     creationTime: DateTime;
//     creatorId: string | undefined;
//     organizationUnitId: string;
//     roleId: string;
// }
//
// export class OrganizationUnitRoleInput implements IOrganizationUnitRoleInput {
//     roleIds!: string[] | undefined;
//
//     constructor(data?: IOrganizationUnitRoleInput) {
//         if (data) {
//             for (var property in data) {
//                 if (data.hasOwnProperty(property))
//                     (<any>this)[property] = (<any>data)[property];
//             }
//         }
//     }
//
//     init(_data?: any) {
//         if (_data) {
//             if (Array.isArray(_data["roleIds"])) {
//                 this.roleIds = [] as any;
//                 for (let item of _data["roleIds"])
//                     this.roleIds!.push(item);
//             }
//         }
//     }
//
//     static fromJS(data: any): OrganizationUnitRoleInput {
//         data = typeof data === 'object' ? data : {};
//         let result = new OrganizationUnitRoleInput();
//         result.init(data);
//         return result;
//     }
//
//     toJSON(data?: any) {
//         data = typeof data === 'object' ? data : {};
//         if (Array.isArray(this.roleIds)) {
//             data["roleIds"] = [];
//             for (let item of this.roleIds)
//                 data["roleIds"].push(item);
//         }
//         return data;
//     }
// }
//
// export interface IOrganizationUnitRoleInput {
//     roleIds: string[] | undefined;
// }
//
// export class OrganizationUnitUpdateDto implements IOrganizationUnitUpdateDto {
//     readonly extraProperties!: { [key: string]: any; } | undefined;
//     displayName!: string;
//
//     constructor(data?: IOrganizationUnitUpdateDto) {
//         if (data) {
//             for (var property in data) {
//                 if (data.hasOwnProperty(property))
//                     (<any>this)[property] = (<any>data)[property];
//             }
//         }
//     }
//
//     init(_data?: any) {
//         if (_data) {
//             if (_data["extraProperties"]) {
//                 (<any>this).extraProperties = {} as any;
//                 for (let key in _data["extraProperties"]) {
//                     if (_data["extraProperties"].hasOwnProperty(key))
//                         (<any>(<any>this).extraProperties)![key] = _data["extraProperties"][key];
//                 }
//             }
//             this.displayName = _data["displayName"];
//         }
//     }
//
//     static fromJS(data: any): OrganizationUnitUpdateDto {
//         data = typeof data === 'object' ? data : {};
//         let result = new OrganizationUnitUpdateDto();
//         result.init(data);
//         return result;
//     }
//
//     toJSON(data?: any) {
//         data = typeof data === 'object' ? data : {};
//         if (this.extraProperties) {
//             data["extraProperties"] = {};
//             for (let key in this.extraProperties) {
//                 if (this.extraProperties.hasOwnProperty(key))
//                     (<any>data["extraProperties"])[key] = this.extraProperties[key];
//             }
//         }
//         data["displayName"] = this.displayName;
//         return data;
//     }
// }
//
// export interface IOrganizationUnitUpdateDto {
//     extraProperties: { [key: string]: any; } | undefined;
//     displayName: string;
// }
//
// export class OrganizationUnitUserInput implements IOrganizationUnitUserInput {
//     userIds!: string[] | undefined;
//
//     constructor(data?: IOrganizationUnitUserInput) {
//         if (data) {
//             for (var property in data) {
//                 if (data.hasOwnProperty(property))
//                     (<any>this)[property] = (<any>data)[property];
//             }
//         }
//     }
//
//     init(_data?: any) {
//         if (_data) {
//             if (Array.isArray(_data["userIds"])) {
//                 this.userIds = [] as any;
//                 for (let item of _data["userIds"])
//                     this.userIds!.push(item);
//             }
//         }
//     }
//
//     static fromJS(data: any): OrganizationUnitUserInput {
//         data = typeof data === 'object' ? data : {};
//         let result = new OrganizationUnitUserInput();
//         result.init(data);
//         return result;
//     }
//
//     toJSON(data?: any) {
//         data = typeof data === 'object' ? data : {};
//         if (Array.isArray(this.userIds)) {
//             data["userIds"] = [];
//             for (let item of this.userIds)
//                 data["userIds"].push(item);
//         }
//         return data;
//     }
// }
//
// export interface IOrganizationUnitUserInput {
//     userIds: string[] | undefined;
// }
//
// export class OrganizationUnitWithDetailsDto implements IOrganizationUnitWithDetailsDto {
//     readonly extraProperties!: { [key: string]: any; } | undefined;
//     id!: string;
//     creationTime!: DateTime;
//     creatorId!: string | undefined;
//     lastModificationTime!: DateTime | undefined;
//     lastModifierId!: string | undefined;
//     isDeleted!: boolean;
//     deleterId!: string | undefined;
//     deletionTime!: DateTime | undefined;
//     parentId!: string | undefined;
//     code!: string | undefined;
//     displayName!: string | undefined;
//     roles!: IdentityRoleDto[] | undefined;
//
//     constructor(data?: IOrganizationUnitWithDetailsDto) {
//         if (data) {
//             for (var property in data) {
//                 if (data.hasOwnProperty(property))
//                     (<any>this)[property] = (<any>data)[property];
//             }
//         }
//     }
//
//     init(_data?: any) {
//         if (_data) {
//             if (_data["extraProperties"]) {
//                 (<any>this).extraProperties = {} as any;
//                 for (let key in _data["extraProperties"]) {
//                     if (_data["extraProperties"].hasOwnProperty(key))
//                         (<any>(<any>this).extraProperties)![key] = _data["extraProperties"][key];
//                 }
//             }
//             this.id = _data["id"];
//             this.creationTime = _data["creationTime"] ? DateTime.fromISO(_data["creationTime"].toString()) : <any>undefined;
//             this.creatorId = _data["creatorId"];
//             this.lastModificationTime = _data["lastModificationTime"] ? DateTime.fromISO(_data["lastModificationTime"].toString()) : <any>undefined;
//             this.lastModifierId = _data["lastModifierId"];
//             this.isDeleted = _data["isDeleted"];
//             this.deleterId = _data["deleterId"];
//             this.deletionTime = _data["deletionTime"] ? DateTime.fromISO(_data["deletionTime"].toString()) : <any>undefined;
//             this.parentId = _data["parentId"];
//             this.code = _data["code"];
//             this.displayName = _data["displayName"];
//             if (Array.isArray(_data["roles"])) {
//                 this.roles = [] as any;
//                 for (let item of _data["roles"])
//                     this.roles!.push(IdentityRoleDto.fromJS(item));
//             }
//         }
//     }
//
//     static fromJS(data: any): OrganizationUnitWithDetailsDto {
//         data = typeof data === 'object' ? data : {};
//         let result = new OrganizationUnitWithDetailsDto();
//         result.init(data);
//         return result;
//     }
//
//     toJSON(data?: any) {
//         data = typeof data === 'object' ? data : {};
//         if (this.extraProperties) {
//             data["extraProperties"] = {};
//             for (let key in this.extraProperties) {
//                 if (this.extraProperties.hasOwnProperty(key))
//                     (<any>data["extraProperties"])[key] = this.extraProperties[key];
//             }
//         }
//         data["id"] = this.id;
//         data["creationTime"] = this.creationTime ? this.creationTime.toString() : <any>undefined;
//         data["creatorId"] = this.creatorId;
//         data["lastModificationTime"] = this.lastModificationTime ? this.lastModificationTime.toString() : <any>undefined;
//         data["lastModifierId"] = this.lastModifierId;
//         data["isDeleted"] = this.isDeleted;
//         data["deleterId"] = this.deleterId;
//         data["deletionTime"] = this.deletionTime ? this.deletionTime.toString() : <any>undefined;
//         data["parentId"] = this.parentId;
//         data["code"] = this.code;
//         data["displayName"] = this.displayName;
//         if (Array.isArray(this.roles)) {
//             data["roles"] = [];
//             for (let item of this.roles)
//                 data["roles"].push(item.toJSON());
//         }
//         return data;
//     }
// }
//
// export interface IOrganizationUnitWithDetailsDto {
//     extraProperties: { [key: string]: any; } | undefined;
//     id: string;
//     creationTime: DateTime;
//     creatorId: string | undefined;
//     lastModificationTime: DateTime | undefined;
//     lastModifierId: string | undefined;
//     isDeleted: boolean;
//     deleterId: string | undefined;
//     deletionTime: DateTime | undefined;
//     parentId: string | undefined;
//     code: string | undefined;
//     displayName: string | undefined;
//     roles: IdentityRoleDto[] | undefined;
// }
//
// export class ProfileDto implements IProfileDto {
//     readonly extraProperties!: { [key: string]: any; } | undefined;
//     userName!: string | undefined;
//     email!: string | undefined;
//     emailConfirmed!: boolean;
//     name!: string | undefined;
//     surname!: string | undefined;
//     phoneNumber!: string | undefined;
//     phoneNumberConfirmed!: boolean;
//     isExternal!: boolean;
//     hasPassword!: boolean;
//
//     constructor(data?: IProfileDto) {
//         if (data) {
//             for (var property in data) {
//                 if (data.hasOwnProperty(property))
//                     (<any>this)[property] = (<any>data)[property];
//             }
//         }
//     }
//
//     init(_data?: any) {
//         if (_data) {
//             if (_data["extraProperties"]) {
//                 (<any>this).extraProperties = {} as any;
//                 for (let key in _data["extraProperties"]) {
//                     if (_data["extraProperties"].hasOwnProperty(key))
//                         (<any>(<any>this).extraProperties)![key] = _data["extraProperties"][key];
//                 }
//             }
//             this.userName = _data["userName"];
//             this.email = _data["email"];
//             this.emailConfirmed = _data["emailConfirmed"];
//             this.name = _data["name"];
//             this.surname = _data["surname"];
//             this.phoneNumber = _data["phoneNumber"];
//             this.phoneNumberConfirmed = _data["phoneNumberConfirmed"];
//             this.isExternal = _data["isExternal"];
//             this.hasPassword = _data["hasPassword"];
//         }
//     }
//
//     static fromJS(data: any): ProfileDto {
//         data = typeof data === 'object' ? data : {};
//         let result = new ProfileDto();
//         result.init(data);
//         return result;
//     }
//
//     toJSON(data?: any) {
//         data = typeof data === 'object' ? data : {};
//         if (this.extraProperties) {
//             data["extraProperties"] = {};
//             for (let key in this.extraProperties) {
//                 if (this.extraProperties.hasOwnProperty(key))
//                     (<any>data["extraProperties"])[key] = this.extraProperties[key];
//             }
//         }
//         data["userName"] = this.userName;
//         data["email"] = this.email;
//         data["emailConfirmed"] = this.emailConfirmed;
//         data["name"] = this.name;
//         data["surname"] = this.surname;
//         data["phoneNumber"] = this.phoneNumber;
//         data["phoneNumberConfirmed"] = this.phoneNumberConfirmed;
//         data["isExternal"] = this.isExternal;
//         data["hasPassword"] = this.hasPassword;
//         return data;
//     }
// }
//
// export interface IProfileDto {
//     extraProperties: { [key: string]: any; } | undefined;
//     userName: string | undefined;
//     email: string | undefined;
//     emailConfirmed: boolean;
//     name: string | undefined;
//     surname: string | undefined;
//     phoneNumber: string | undefined;
//     phoneNumberConfirmed: boolean;
//     isExternal: boolean;
//     hasPassword: boolean;
// }
//
// export class UnLinkUserInput implements IUnLinkUserInput {
//     userId!: string;
//     tenantId!: string | undefined;
//
//     constructor(data?: IUnLinkUserInput) {
//         if (data) {
//             for (var property in data) {
//                 if (data.hasOwnProperty(property))
//                     (<any>this)[property] = (<any>data)[property];
//             }
//         }
//     }
//
//     init(_data?: any) {
//         if (_data) {
//             this.userId = _data["userId"];
//             this.tenantId = _data["tenantId"];
//         }
//     }
//
//     static fromJS(data: any): UnLinkUserInput {
//         data = typeof data === 'object' ? data : {};
//         let result = new UnLinkUserInput();
//         result.init(data);
//         return result;
//     }
//
//     toJSON(data?: any) {
//         data = typeof data === 'object' ? data : {};
//         data["userId"] = this.userId;
//         data["tenantId"] = this.tenantId;
//         return data;
//     }
// }
//
// export interface IUnLinkUserInput {
//     userId: string;
//     tenantId: string | undefined;
// }
//
// export class UpdateClaimTypeDto implements IUpdateClaimTypeDto {
//     readonly extraProperties!: { [key: string]: any; } | undefined;
//     name!: string;
//     required!: boolean;
//     regex!: string | undefined;
//     regexDescription!: string | undefined;
//     description!: string | undefined;
//     valueType!: IdentityClaimValueType;
//
//     constructor(data?: IUpdateClaimTypeDto) {
//         if (data) {
//             for (var property in data) {
//                 if (data.hasOwnProperty(property))
//                     (<any>this)[property] = (<any>data)[property];
//             }
//         }
//     }
//
//     init(_data?: any) {
//         if (_data) {
//             if (_data["extraProperties"]) {
//                 (<any>this).extraProperties = {} as any;
//                 for (let key in _data["extraProperties"]) {
//                     if (_data["extraProperties"].hasOwnProperty(key))
//                         (<any>(<any>this).extraProperties)![key] = _data["extraProperties"][key];
//                 }
//             }
//             this.name = _data["name"];
//             this.required = _data["required"];
//             this.regex = _data["regex"];
//             this.regexDescription = _data["regexDescription"];
//             this.description = _data["description"];
//             this.valueType = _data["valueType"];
//         }
//     }
//
//     static fromJS(data: any): UpdateClaimTypeDto {
//         data = typeof data === 'object' ? data : {};
//         let result = new UpdateClaimTypeDto();
//         result.init(data);
//         return result;
//     }
//
//     toJSON(data?: any) {
//         data = typeof data === 'object' ? data : {};
//         if (this.extraProperties) {
//             data["extraProperties"] = {};
//             for (let key in this.extraProperties) {
//                 if (this.extraProperties.hasOwnProperty(key))
//                     (<any>data["extraProperties"])[key] = this.extraProperties[key];
//             }
//         }
//         data["name"] = this.name;
//         data["required"] = this.required;
//         data["regex"] = this.regex;
//         data["regexDescription"] = this.regexDescription;
//         data["description"] = this.description;
//         data["valueType"] = this.valueType;
//         return data;
//     }
// }
//
// export interface IUpdateClaimTypeDto {
//     extraProperties: { [key: string]: any; } | undefined;
//     name: string;
//     required: boolean;
//     regex: string | undefined;
//     regexDescription: string | undefined;
//     description: string | undefined;
//     valueType: IdentityClaimValueType;
// }
//
// export class UpdateProfileDto implements IUpdateProfileDto {
//     readonly extraProperties!: { [key: string]: any; } | undefined;
//     userName!: string;
//     email!: string | undefined;
//     name!: string | undefined;
//     surname!: string | undefined;
//     phoneNumber!: string | undefined;
//
//     constructor(data?: IUpdateProfileDto) {
//         if (data) {
//             for (var property in data) {
//                 if (data.hasOwnProperty(property))
//                     (<any>this)[property] = (<any>data)[property];
//             }
//         }
//     }
//
//     init(_data?: any) {
//         if (_data) {
//             if (_data["extraProperties"]) {
//                 (<any>this).extraProperties = {} as any;
//                 for (let key in _data["extraProperties"]) {
//                     if (_data["extraProperties"].hasOwnProperty(key))
//                         (<any>(<any>this).extraProperties)![key] = _data["extraProperties"][key];
//                 }
//             }
//             this.userName = _data["userName"];
//             this.email = _data["email"];
//             this.name = _data["name"];
//             this.surname = _data["surname"];
//             this.phoneNumber = _data["phoneNumber"];
//         }
//     }
//
//     static fromJS(data: any): UpdateProfileDto {
//         data = typeof data === 'object' ? data : {};
//         let result = new UpdateProfileDto();
//         result.init(data);
//         return result;
//     }
//
//     toJSON(data?: any) {
//         data = typeof data === 'object' ? data : {};
//         if (this.extraProperties) {
//             data["extraProperties"] = {};
//             for (let key in this.extraProperties) {
//                 if (this.extraProperties.hasOwnProperty(key))
//                     (<any>data["extraProperties"])[key] = this.extraProperties[key];
//             }
//         }
//         data["userName"] = this.userName;
//         data["email"] = this.email;
//         data["name"] = this.name;
//         data["surname"] = this.surname;
//         data["phoneNumber"] = this.phoneNumber;
//         return data;
//     }
// }
//
// export interface IUpdateProfileDto {
//     extraProperties: { [key: string]: any; } | undefined;
//     userName: string;
//     email: string | undefined;
//     name: string | undefined;
//     surname: string | undefined;
//     phoneNumber: string | undefined;
// }
//
// export class VerifyLinkTokenInput implements IVerifyLinkTokenInput {
//     userId!: string;
//     tenantId!: string | undefined;
//     token!: string;
//
//     constructor(data?: IVerifyLinkTokenInput) {
//         if (data) {
//             for (var property in data) {
//                 if (data.hasOwnProperty(property))
//                     (<any>this)[property] = (<any>data)[property];
//             }
//         }
//     }
//
//     init(_data?: any) {
//         if (_data) {
//             this.userId = _data["userId"];
//             this.tenantId = _data["tenantId"];
//             this.token = _data["token"];
//         }
//     }
//
//     static fromJS(data: any): VerifyLinkTokenInput {
//         data = typeof data === 'object' ? data : {};
//         let result = new VerifyLinkTokenInput();
//         result.init(data);
//         return result;
//     }
//
//     toJSON(data?: any) {
//         data = typeof data === 'object' ? data : {};
//         data["userId"] = this.userId;
//         data["tenantId"] = this.tenantId;
//         data["token"] = this.token;
//         return data;
//     }
// }
//
// export interface IVerifyLinkTokenInput {
//     userId: string;
//     tenantId: string | undefined;
//     token: string;
// }
//
// export class ApiResourceClaimDto implements IApiResourceClaimDto {
//     apiResourceId!: string;
//     type!: string | undefined;
//
//     constructor(data?: IApiResourceClaimDto) {
//         if (data) {
//             for (var property in data) {
//                 if (data.hasOwnProperty(property))
//                     (<any>this)[property] = (<any>data)[property];
//             }
//         }
//     }
//
//     init(_data?: any) {
//         if (_data) {
//             this.apiResourceId = _data["apiResourceId"];
//             this.type = _data["type"];
//         }
//     }
//
//     static fromJS(data: any): ApiResourceClaimDto {
//         data = typeof data === 'object' ? data : {};
//         let result = new ApiResourceClaimDto();
//         result.init(data);
//         return result;
//     }
//
//     toJSON(data?: any) {
//         data = typeof data === 'object' ? data : {};
//         data["apiResourceId"] = this.apiResourceId;
//         data["type"] = this.type;
//         return data;
//     }
// }
//
// export interface IApiResourceClaimDto {
//     apiResourceId: string;
//     type: string | undefined;
// }
//
// export class ApiResourcePropertyDto implements IApiResourcePropertyDto {
//     apiResourceId!: string;
//     key!: string | undefined;
//     value!: string | undefined;
//
//     constructor(data?: IApiResourcePropertyDto) {
//         if (data) {
//             for (var property in data) {
//                 if (data.hasOwnProperty(property))
//                     (<any>this)[property] = (<any>data)[property];
//             }
//         }
//     }
//
//     init(_data?: any) {
//         if (_data) {
//             this.apiResourceId = _data["apiResourceId"];
//             this.key = _data["key"];
//             this.value = _data["value"];
//         }
//     }
//
//     static fromJS(data: any): ApiResourcePropertyDto {
//         data = typeof data === 'object' ? data : {};
//         let result = new ApiResourcePropertyDto();
//         result.init(data);
//         return result;
//     }
//
//     toJSON(data?: any) {
//         data = typeof data === 'object' ? data : {};
//         data["apiResourceId"] = this.apiResourceId;
//         data["key"] = this.key;
//         data["value"] = this.value;
//         return data;
//     }
// }
//
// export interface IApiResourcePropertyDto {
//     apiResourceId: string;
//     key: string | undefined;
//     value: string | undefined;
// }
//
// export class ApiResourceScopeDto implements IApiResourceScopeDto {
//     apiResourceId!: string;
//     scope!: string | undefined;
//
//     constructor(data?: IApiResourceScopeDto) {
//         if (data) {
//             for (var property in data) {
//                 if (data.hasOwnProperty(property))
//                     (<any>this)[property] = (<any>data)[property];
//             }
//         }
//     }
//
//     init(_data?: any) {
//         if (_data) {
//             this.apiResourceId = _data["apiResourceId"];
//             this.scope = _data["scope"];
//         }
//     }
//
//     static fromJS(data: any): ApiResourceScopeDto {
//         data = typeof data === 'object' ? data : {};
//         let result = new ApiResourceScopeDto();
//         result.init(data);
//         return result;
//     }
//
//     toJSON(data?: any) {
//         data = typeof data === 'object' ? data : {};
//         data["apiResourceId"] = this.apiResourceId;
//         data["scope"] = this.scope;
//         return data;
//     }
// }
//
// export interface IApiResourceScopeDto {
//     apiResourceId: string;
//     scope: string | undefined;
// }
//
// export class ApiResourceSecretDto implements IApiResourceSecretDto {
//     apiResourceId!: string;
//     type!: string | undefined;
//     value!: string | undefined;
//     description!: string | undefined;
//     expiration!: DateTime | undefined;
//
//     constructor(data?: IApiResourceSecretDto) {
//         if (data) {
//             for (var property in data) {
//                 if (data.hasOwnProperty(property))
//                     (<any>this)[property] = (<any>data)[property];
//             }
//         }
//     }
//
//     init(_data?: any) {
//         if (_data) {
//             this.apiResourceId = _data["apiResourceId"];
//             this.type = _data["type"];
//             this.value = _data["value"];
//             this.description = _data["description"];
//             this.expiration = _data["expiration"] ? DateTime.fromISO(_data["expiration"].toString()) : <any>undefined;
//         }
//     }
//
//     static fromJS(data: any): ApiResourceSecretDto {
//         data = typeof data === 'object' ? data : {};
//         let result = new ApiResourceSecretDto();
//         result.init(data);
//         return result;
//     }
//
//     toJSON(data?: any) {
//         data = typeof data === 'object' ? data : {};
//         data["apiResourceId"] = this.apiResourceId;
//         data["type"] = this.type;
//         data["value"] = this.value;
//         data["description"] = this.description;
//         data["expiration"] = this.expiration ? this.expiration.toString() : <any>undefined;
//         return data;
//     }
// }
//
// export interface IApiResourceSecretDto {
//     apiResourceId: string;
//     type: string | undefined;
//     value: string | undefined;
//     description: string | undefined;
//     expiration: DateTime | undefined;
// }
//
// export class ApiResourceWithDetailsDto implements IApiResourceWithDetailsDto {
//     readonly extraProperties!: { [key: string]: any; } | undefined;
//     id!: string;
//     name!: string | undefined;
//     displayName!: string | undefined;
//     description!: string | undefined;
//     enabled!: boolean;
//     allowedAccessTokenSigningAlgorithms!: string | undefined;
//     showInDiscoveryDocument!: boolean;
//     secrets!: ApiResourceSecretDto[] | undefined;
//     scopes!: ApiResourceScopeDto[] | undefined;
//     userClaims!: ApiResourceClaimDto[] | undefined;
//     properties!: ApiResourcePropertyDto[] | undefined;
//
//     constructor(data?: IApiResourceWithDetailsDto) {
//         if (data) {
//             for (var property in data) {
//                 if (data.hasOwnProperty(property))
//                     (<any>this)[property] = (<any>data)[property];
//             }
//         }
//     }
//
//     init(_data?: any) {
//         if (_data) {
//             if (_data["extraProperties"]) {
//                 (<any>this).extraProperties = {} as any;
//                 for (let key in _data["extraProperties"]) {
//                     if (_data["extraProperties"].hasOwnProperty(key))
//                         (<any>(<any>this).extraProperties)![key] = _data["extraProperties"][key];
//                 }
//             }
//             this.id = _data["id"];
//             this.name = _data["name"];
//             this.displayName = _data["displayName"];
//             this.description = _data["description"];
//             this.enabled = _data["enabled"];
//             this.allowedAccessTokenSigningAlgorithms = _data["allowedAccessTokenSigningAlgorithms"];
//             this.showInDiscoveryDocument = _data["showInDiscoveryDocument"];
//             if (Array.isArray(_data["secrets"])) {
//                 this.secrets = [] as any;
//                 for (let item of _data["secrets"])
//                     this.secrets!.push(ApiResourceSecretDto.fromJS(item));
//             }
//             if (Array.isArray(_data["scopes"])) {
//                 this.scopes = [] as any;
//                 for (let item of _data["scopes"])
//                     this.scopes!.push(ApiResourceScopeDto.fromJS(item));
//             }
//             if (Array.isArray(_data["userClaims"])) {
//                 this.userClaims = [] as any;
//                 for (let item of _data["userClaims"])
//                     this.userClaims!.push(ApiResourceClaimDto.fromJS(item));
//             }
//             if (Array.isArray(_data["properties"])) {
//                 this.properties = [] as any;
//                 for (let item of _data["properties"])
//                     this.properties!.push(ApiResourcePropertyDto.fromJS(item));
//             }
//         }
//     }
//
//     static fromJS(data: any): ApiResourceWithDetailsDto {
//         data = typeof data === 'object' ? data : {};
//         let result = new ApiResourceWithDetailsDto();
//         result.init(data);
//         return result;
//     }
//
//     toJSON(data?: any) {
//         data = typeof data === 'object' ? data : {};
//         if (this.extraProperties) {
//             data["extraProperties"] = {};
//             for (let key in this.extraProperties) {
//                 if (this.extraProperties.hasOwnProperty(key))
//                     (<any>data["extraProperties"])[key] = this.extraProperties[key];
//             }
//         }
//         data["id"] = this.id;
//         data["name"] = this.name;
//         data["displayName"] = this.displayName;
//         data["description"] = this.description;
//         data["enabled"] = this.enabled;
//         data["allowedAccessTokenSigningAlgorithms"] = this.allowedAccessTokenSigningAlgorithms;
//         data["showInDiscoveryDocument"] = this.showInDiscoveryDocument;
//         if (Array.isArray(this.secrets)) {
//             data["secrets"] = [];
//             for (let item of this.secrets)
//                 data["secrets"].push(item.toJSON());
//         }
//         if (Array.isArray(this.scopes)) {
//             data["scopes"] = [];
//             for (let item of this.scopes)
//                 data["scopes"].push(item.toJSON());
//         }
//         if (Array.isArray(this.userClaims)) {
//             data["userClaims"] = [];
//             for (let item of this.userClaims)
//                 data["userClaims"].push(item.toJSON());
//         }
//         if (Array.isArray(this.properties)) {
//             data["properties"] = [];
//             for (let item of this.properties)
//                 data["properties"].push(item.toJSON());
//         }
//         return data;
//     }
// }
//
// export interface IApiResourceWithDetailsDto {
//     extraProperties: { [key: string]: any; } | undefined;
//     id: string;
//     name: string | undefined;
//     displayName: string | undefined;
//     description: string | undefined;
//     enabled: boolean;
//     allowedAccessTokenSigningAlgorithms: string | undefined;
//     showInDiscoveryDocument: boolean;
//     secrets: ApiResourceSecretDto[] | undefined;
//     scopes: ApiResourceScopeDto[] | undefined;
//     userClaims: ApiResourceClaimDto[] | undefined;
//     properties: ApiResourcePropertyDto[] | undefined;
// }
//
// export class CreateApiResourceDto implements ICreateApiResourceDto {
//     readonly extraProperties!: { [key: string]: any; } | undefined;
//     name!: string;
//     displayName!: string | undefined;
//     description!: string | undefined;
//     allowedAccessTokenSigningAlgorithms!: string | undefined;
//     showInDiscoveryDocument!: boolean;
//     userClaims!: ApiResourceClaimDto[] | undefined;
//
//     constructor(data?: ICreateApiResourceDto) {
//         if (data) {
//             for (var property in data) {
//                 if (data.hasOwnProperty(property))
//                     (<any>this)[property] = (<any>data)[property];
//             }
//         }
//     }
//
//     init(_data?: any) {
//         if (_data) {
//             if (_data["extraProperties"]) {
//                 (<any>this).extraProperties = {} as any;
//                 for (let key in _data["extraProperties"]) {
//                     if (_data["extraProperties"].hasOwnProperty(key))
//                         (<any>(<any>this).extraProperties)![key] = _data["extraProperties"][key];
//                 }
//             }
//             this.name = _data["name"];
//             this.displayName = _data["displayName"];
//             this.description = _data["description"];
//             this.allowedAccessTokenSigningAlgorithms = _data["allowedAccessTokenSigningAlgorithms"];
//             this.showInDiscoveryDocument = _data["showInDiscoveryDocument"];
//             if (Array.isArray(_data["userClaims"])) {
//                 this.userClaims = [] as any;
//                 for (let item of _data["userClaims"])
//                     this.userClaims!.push(ApiResourceClaimDto.fromJS(item));
//             }
//         }
//     }
//
//     static fromJS(data: any): CreateApiResourceDto {
//         data = typeof data === 'object' ? data : {};
//         let result = new CreateApiResourceDto();
//         result.init(data);
//         return result;
//     }
//
//     toJSON(data?: any) {
//         data = typeof data === 'object' ? data : {};
//         if (this.extraProperties) {
//             data["extraProperties"] = {};
//             for (let key in this.extraProperties) {
//                 if (this.extraProperties.hasOwnProperty(key))
//                     (<any>data["extraProperties"])[key] = this.extraProperties[key];
//             }
//         }
//         data["name"] = this.name;
//         data["displayName"] = this.displayName;
//         data["description"] = this.description;
//         data["allowedAccessTokenSigningAlgorithms"] = this.allowedAccessTokenSigningAlgorithms;
//         data["showInDiscoveryDocument"] = this.showInDiscoveryDocument;
//         if (Array.isArray(this.userClaims)) {
//             data["userClaims"] = [];
//             for (let item of this.userClaims)
//                 data["userClaims"].push(item.toJSON());
//         }
//         return data;
//     }
// }
//
// export interface ICreateApiResourceDto {
//     extraProperties: { [key: string]: any; } | undefined;
//     name: string;
//     displayName: string | undefined;
//     description: string | undefined;
//     allowedAccessTokenSigningAlgorithms: string | undefined;
//     showInDiscoveryDocument: boolean;
//     userClaims: ApiResourceClaimDto[] | undefined;
// }
//
// export class UpdateApiResourceDto implements IUpdateApiResourceDto {
//     readonly extraProperties!: { [key: string]: any; } | undefined;
//     displayName!: string | undefined;
//     description!: string | undefined;
//     allowedAccessTokenSigningAlgorithms!: string | undefined;
//     enabled!: boolean;
//     secrets!: ApiResourceSecretDto[] | undefined;
//     scopes!: ApiResourceScopeDto[] | undefined;
//     userClaims!: ApiResourceClaimDto[] | undefined;
//     properties!: ApiResourcePropertyDto[] | undefined;
//
//     constructor(data?: IUpdateApiResourceDto) {
//         if (data) {
//             for (var property in data) {
//                 if (data.hasOwnProperty(property))
//                     (<any>this)[property] = (<any>data)[property];
//             }
//         }
//     }
//
//     init(_data?: any) {
//         if (_data) {
//             if (_data["extraProperties"]) {
//                 (<any>this).extraProperties = {} as any;
//                 for (let key in _data["extraProperties"]) {
//                     if (_data["extraProperties"].hasOwnProperty(key))
//                         (<any>(<any>this).extraProperties)![key] = _data["extraProperties"][key];
//                 }
//             }
//             this.displayName = _data["displayName"];
//             this.description = _data["description"];
//             this.allowedAccessTokenSigningAlgorithms = _data["allowedAccessTokenSigningAlgorithms"];
//             this.enabled = _data["enabled"];
//             if (Array.isArray(_data["secrets"])) {
//                 this.secrets = [] as any;
//                 for (let item of _data["secrets"])
//                     this.secrets!.push(ApiResourceSecretDto.fromJS(item));
//             }
//             if (Array.isArray(_data["scopes"])) {
//                 this.scopes = [] as any;
//                 for (let item of _data["scopes"])
//                     this.scopes!.push(ApiResourceScopeDto.fromJS(item));
//             }
//             if (Array.isArray(_data["userClaims"])) {
//                 this.userClaims = [] as any;
//                 for (let item of _data["userClaims"])
//                     this.userClaims!.push(ApiResourceClaimDto.fromJS(item));
//             }
//             if (Array.isArray(_data["properties"])) {
//                 this.properties = [] as any;
//                 for (let item of _data["properties"])
//                     this.properties!.push(ApiResourcePropertyDto.fromJS(item));
//             }
//         }
//     }
//
//     static fromJS(data: any): UpdateApiResourceDto {
//         data = typeof data === 'object' ? data : {};
//         let result = new UpdateApiResourceDto();
//         result.init(data);
//         return result;
//     }
//
//     toJSON(data?: any) {
//         data = typeof data === 'object' ? data : {};
//         if (this.extraProperties) {
//             data["extraProperties"] = {};
//             for (let key in this.extraProperties) {
//                 if (this.extraProperties.hasOwnProperty(key))
//                     (<any>data["extraProperties"])[key] = this.extraProperties[key];
//             }
//         }
//         data["displayName"] = this.displayName;
//         data["description"] = this.description;
//         data["allowedAccessTokenSigningAlgorithms"] = this.allowedAccessTokenSigningAlgorithms;
//         data["enabled"] = this.enabled;
//         if (Array.isArray(this.secrets)) {
//             data["secrets"] = [];
//             for (let item of this.secrets)
//                 data["secrets"].push(item.toJSON());
//         }
//         if (Array.isArray(this.scopes)) {
//             data["scopes"] = [];
//             for (let item of this.scopes)
//                 data["scopes"].push(item.toJSON());
//         }
//         if (Array.isArray(this.userClaims)) {
//             data["userClaims"] = [];
//             for (let item of this.userClaims)
//                 data["userClaims"].push(item.toJSON());
//         }
//         if (Array.isArray(this.properties)) {
//             data["properties"] = [];
//             for (let item of this.properties)
//                 data["properties"].push(item.toJSON());
//         }
//         return data;
//     }
// }
//
// export interface IUpdateApiResourceDto {
//     extraProperties: { [key: string]: any; } | undefined;
//     displayName: string | undefined;
//     description: string | undefined;
//     allowedAccessTokenSigningAlgorithms: string | undefined;
//     enabled: boolean;
//     secrets: ApiResourceSecretDto[] | undefined;
//     scopes: ApiResourceScopeDto[] | undefined;
//     userClaims: ApiResourceClaimDto[] | undefined;
//     properties: ApiResourcePropertyDto[] | undefined;
// }
//
// export class ApiScopeClaimDto implements IApiScopeClaimDto {
//     apiScopeId!: string;
//     type!: string | undefined;
//
//     constructor(data?: IApiScopeClaimDto) {
//         if (data) {
//             for (var property in data) {
//                 if (data.hasOwnProperty(property))
//                     (<any>this)[property] = (<any>data)[property];
//             }
//         }
//     }
//
//     init(_data?: any) {
//         if (_data) {
//             this.apiScopeId = _data["apiScopeId"];
//             this.type = _data["type"];
//         }
//     }
//
//     static fromJS(data: any): ApiScopeClaimDto {
//         data = typeof data === 'object' ? data : {};
//         let result = new ApiScopeClaimDto();
//         result.init(data);
//         return result;
//     }
//
//     toJSON(data?: any) {
//         data = typeof data === 'object' ? data : {};
//         data["apiScopeId"] = this.apiScopeId;
//         data["type"] = this.type;
//         return data;
//     }
// }
//
// export interface IApiScopeClaimDto {
//     apiScopeId: string;
//     type: string | undefined;
// }
//
// export class ApiScopePropertyDto implements IApiScopePropertyDto {
//     apiScopeId!: string;
//     key!: string | undefined;
//     value!: string | undefined;
//
//     constructor(data?: IApiScopePropertyDto) {
//         if (data) {
//             for (var property in data) {
//                 if (data.hasOwnProperty(property))
//                     (<any>this)[property] = (<any>data)[property];
//             }
//         }
//     }
//
//     init(_data?: any) {
//         if (_data) {
//             this.apiScopeId = _data["apiScopeId"];
//             this.key = _data["key"];
//             this.value = _data["value"];
//         }
//     }
//
//     static fromJS(data: any): ApiScopePropertyDto {
//         data = typeof data === 'object' ? data : {};
//         let result = new ApiScopePropertyDto();
//         result.init(data);
//         return result;
//     }
//
//     toJSON(data?: any) {
//         data = typeof data === 'object' ? data : {};
//         data["apiScopeId"] = this.apiScopeId;
//         data["key"] = this.key;
//         data["value"] = this.value;
//         return data;
//     }
// }
//
// export interface IApiScopePropertyDto {
//     apiScopeId: string;
//     key: string | undefined;
//     value: string | undefined;
// }
//
// export class ApiScopeWithDetailsDto implements IApiScopeWithDetailsDto {
//     readonly extraProperties!: { [key: string]: any; } | undefined;
//     id!: string;
//     enabled!: boolean;
//     name!: string | undefined;
//     displayName!: string | undefined;
//     description!: string | undefined;
//     required!: boolean;
//     emphasize!: boolean;
//     showInDiscoveryDocument!: boolean;
//     userClaims!: ApiScopeClaimDto[] | undefined;
//     properties!: ApiScopePropertyDto[] | undefined;
//
//     constructor(data?: IApiScopeWithDetailsDto) {
//         if (data) {
//             for (var property in data) {
//                 if (data.hasOwnProperty(property))
//                     (<any>this)[property] = (<any>data)[property];
//             }
//         }
//     }
//
//     init(_data?: any) {
//         if (_data) {
//             if (_data["extraProperties"]) {
//                 (<any>this).extraProperties = {} as any;
//                 for (let key in _data["extraProperties"]) {
//                     if (_data["extraProperties"].hasOwnProperty(key))
//                         (<any>(<any>this).extraProperties)![key] = _data["extraProperties"][key];
//                 }
//             }
//             this.id = _data["id"];
//             this.enabled = _data["enabled"];
//             this.name = _data["name"];
//             this.displayName = _data["displayName"];
//             this.description = _data["description"];
//             this.required = _data["required"];
//             this.emphasize = _data["emphasize"];
//             this.showInDiscoveryDocument = _data["showInDiscoveryDocument"];
//             if (Array.isArray(_data["userClaims"])) {
//                 this.userClaims = [] as any;
//                 for (let item of _data["userClaims"])
//                     this.userClaims!.push(ApiScopeClaimDto.fromJS(item));
//             }
//             if (Array.isArray(_data["properties"])) {
//                 this.properties = [] as any;
//                 for (let item of _data["properties"])
//                     this.properties!.push(ApiScopePropertyDto.fromJS(item));
//             }
//         }
//     }
//
//     static fromJS(data: any): ApiScopeWithDetailsDto {
//         data = typeof data === 'object' ? data : {};
//         let result = new ApiScopeWithDetailsDto();
//         result.init(data);
//         return result;
//     }
//
//     toJSON(data?: any) {
//         data = typeof data === 'object' ? data : {};
//         if (this.extraProperties) {
//             data["extraProperties"] = {};
//             for (let key in this.extraProperties) {
//                 if (this.extraProperties.hasOwnProperty(key))
//                     (<any>data["extraProperties"])[key] = this.extraProperties[key];
//             }
//         }
//         data["id"] = this.id;
//         data["enabled"] = this.enabled;
//         data["name"] = this.name;
//         data["displayName"] = this.displayName;
//         data["description"] = this.description;
//         data["required"] = this.required;
//         data["emphasize"] = this.emphasize;
//         data["showInDiscoveryDocument"] = this.showInDiscoveryDocument;
//         if (Array.isArray(this.userClaims)) {
//             data["userClaims"] = [];
//             for (let item of this.userClaims)
//                 data["userClaims"].push(item.toJSON());
//         }
//         if (Array.isArray(this.properties)) {
//             data["properties"] = [];
//             for (let item of this.properties)
//                 data["properties"].push(item.toJSON());
//         }
//         return data;
//     }
// }
//
// export interface IApiScopeWithDetailsDto {
//     extraProperties: { [key: string]: any; } | undefined;
//     id: string;
//     enabled: boolean;
//     name: string | undefined;
//     displayName: string | undefined;
//     description: string | undefined;
//     required: boolean;
//     emphasize: boolean;
//     showInDiscoveryDocument: boolean;
//     userClaims: ApiScopeClaimDto[] | undefined;
//     properties: ApiScopePropertyDto[] | undefined;
// }
//
// export class CreateApiScopeDto implements ICreateApiScopeDto {
//     readonly extraProperties!: { [key: string]: any; } | undefined;
//     name!: string;
//     displayName!: string | undefined;
//     description!: string | undefined;
//     required!: boolean;
//     enabled!: boolean;
//     emphasize!: boolean;
//     showInDiscoveryDocument!: boolean;
//     userClaims!: ApiScopeClaimDto[] | undefined;
//     properties!: ApiScopePropertyDto[] | undefined;
//
//     constructor(data?: ICreateApiScopeDto) {
//         if (data) {
//             for (var property in data) {
//                 if (data.hasOwnProperty(property))
//                     (<any>this)[property] = (<any>data)[property];
//             }
//         }
//     }
//
//     init(_data?: any) {
//         if (_data) {
//             if (_data["extraProperties"]) {
//                 (<any>this).extraProperties = {} as any;
//                 for (let key in _data["extraProperties"]) {
//                     if (_data["extraProperties"].hasOwnProperty(key))
//                         (<any>(<any>this).extraProperties)![key] = _data["extraProperties"][key];
//                 }
//             }
//             this.name = _data["name"];
//             this.displayName = _data["displayName"];
//             this.description = _data["description"];
//             this.required = _data["required"];
//             this.enabled = _data["enabled"];
//             this.emphasize = _data["emphasize"];
//             this.showInDiscoveryDocument = _data["showInDiscoveryDocument"];
//             if (Array.isArray(_data["userClaims"])) {
//                 this.userClaims = [] as any;
//                 for (let item of _data["userClaims"])
//                     this.userClaims!.push(ApiScopeClaimDto.fromJS(item));
//             }
//             if (Array.isArray(_data["properties"])) {
//                 this.properties = [] as any;
//                 for (let item of _data["properties"])
//                     this.properties!.push(ApiScopePropertyDto.fromJS(item));
//             }
//         }
//     }
//
//     static fromJS(data: any): CreateApiScopeDto {
//         data = typeof data === 'object' ? data : {};
//         let result = new CreateApiScopeDto();
//         result.init(data);
//         return result;
//     }
//
//     toJSON(data?: any) {
//         data = typeof data === 'object' ? data : {};
//         if (this.extraProperties) {
//             data["extraProperties"] = {};
//             for (let key in this.extraProperties) {
//                 if (this.extraProperties.hasOwnProperty(key))
//                     (<any>data["extraProperties"])[key] = this.extraProperties[key];
//             }
//         }
//         data["name"] = this.name;
//         data["displayName"] = this.displayName;
//         data["description"] = this.description;
//         data["required"] = this.required;
//         data["enabled"] = this.enabled;
//         data["emphasize"] = this.emphasize;
//         data["showInDiscoveryDocument"] = this.showInDiscoveryDocument;
//         if (Array.isArray(this.userClaims)) {
//             data["userClaims"] = [];
//             for (let item of this.userClaims)
//                 data["userClaims"].push(item.toJSON());
//         }
//         if (Array.isArray(this.properties)) {
//             data["properties"] = [];
//             for (let item of this.properties)
//                 data["properties"].push(item.toJSON());
//         }
//         return data;
//     }
// }
//
// export interface ICreateApiScopeDto {
//     extraProperties: { [key: string]: any; } | undefined;
//     name: string;
//     displayName: string | undefined;
//     description: string | undefined;
//     required: boolean;
//     enabled: boolean;
//     emphasize: boolean;
//     showInDiscoveryDocument: boolean;
//     userClaims: ApiScopeClaimDto[] | undefined;
//     properties: ApiScopePropertyDto[] | undefined;
// }
//
// export class UpdateApiScopeDto implements IUpdateApiScopeDto {
//     readonly extraProperties!: { [key: string]: any; } | undefined;
//     displayName!: string | undefined;
//     description!: string | undefined;
//     required!: boolean;
//     enabled!: boolean;
//     emphasize!: boolean;
//     showInDiscoveryDocument!: boolean;
//     userClaims!: ApiScopeClaimDto[] | undefined;
//     properties!: ApiScopePropertyDto[] | undefined;
//
//     constructor(data?: IUpdateApiScopeDto) {
//         if (data) {
//             for (var property in data) {
//                 if (data.hasOwnProperty(property))
//                     (<any>this)[property] = (<any>data)[property];
//             }
//         }
//     }
//
//     init(_data?: any) {
//         if (_data) {
//             if (_data["extraProperties"]) {
//                 (<any>this).extraProperties = {} as any;
//                 for (let key in _data["extraProperties"]) {
//                     if (_data["extraProperties"].hasOwnProperty(key))
//                         (<any>(<any>this).extraProperties)![key] = _data["extraProperties"][key];
//                 }
//             }
//             this.displayName = _data["displayName"];
//             this.description = _data["description"];
//             this.required = _data["required"];
//             this.enabled = _data["enabled"];
//             this.emphasize = _data["emphasize"];
//             this.showInDiscoveryDocument = _data["showInDiscoveryDocument"];
//             if (Array.isArray(_data["userClaims"])) {
//                 this.userClaims = [] as any;
//                 for (let item of _data["userClaims"])
//                     this.userClaims!.push(ApiScopeClaimDto.fromJS(item));
//             }
//             if (Array.isArray(_data["properties"])) {
//                 this.properties = [] as any;
//                 for (let item of _data["properties"])
//                     this.properties!.push(ApiScopePropertyDto.fromJS(item));
//             }
//         }
//     }
//
//     static fromJS(data: any): UpdateApiScopeDto {
//         data = typeof data === 'object' ? data : {};
//         let result = new UpdateApiScopeDto();
//         result.init(data);
//         return result;
//     }
//
//     toJSON(data?: any) {
//         data = typeof data === 'object' ? data : {};
//         if (this.extraProperties) {
//             data["extraProperties"] = {};
//             for (let key in this.extraProperties) {
//                 if (this.extraProperties.hasOwnProperty(key))
//                     (<any>data["extraProperties"])[key] = this.extraProperties[key];
//             }
//         }
//         data["displayName"] = this.displayName;
//         data["description"] = this.description;
//         data["required"] = this.required;
//         data["enabled"] = this.enabled;
//         data["emphasize"] = this.emphasize;
//         data["showInDiscoveryDocument"] = this.showInDiscoveryDocument;
//         if (Array.isArray(this.userClaims)) {
//             data["userClaims"] = [];
//             for (let item of this.userClaims)
//                 data["userClaims"].push(item.toJSON());
//         }
//         if (Array.isArray(this.properties)) {
//             data["properties"] = [];
//             for (let item of this.properties)
//                 data["properties"].push(item.toJSON());
//         }
//         return data;
//     }
// }
//
// export interface IUpdateApiScopeDto {
//     extraProperties: { [key: string]: any; } | undefined;
//     displayName: string | undefined;
//     description: string | undefined;
//     required: boolean;
//     enabled: boolean;
//     emphasize: boolean;
//     showInDiscoveryDocument: boolean;
//     userClaims: ApiScopeClaimDto[] | undefined;
//     properties: ApiScopePropertyDto[] | undefined;
// }
//
// export class IdentityClaimTypeDto implements IIdentityClaimTypeDto {
//     readonly extraProperties!: { [key: string]: any; } | undefined;
//     id!: string;
//     name!: string | undefined;
//
//     constructor(data?: IIdentityClaimTypeDto) {
//         if (data) {
//             for (var property in data) {
//                 if (data.hasOwnProperty(property))
//                     (<any>this)[property] = (<any>data)[property];
//             }
//         }
//     }
//
//     init(_data?: any) {
//         if (_data) {
//             if (_data["extraProperties"]) {
//                 (<any>this).extraProperties = {} as any;
//                 for (let key in _data["extraProperties"]) {
//                     if (_data["extraProperties"].hasOwnProperty(key))
//                         (<any>(<any>this).extraProperties)![key] = _data["extraProperties"][key];
//                 }
//             }
//             this.id = _data["id"];
//             this.name = _data["name"];
//         }
//     }
//
//     static fromJS(data: any): IdentityClaimTypeDto {
//         data = typeof data === 'object' ? data : {};
//         let result = new IdentityClaimTypeDto();
//         result.init(data);
//         return result;
//     }
//
//     toJSON(data?: any) {
//         data = typeof data === 'object' ? data : {};
//         if (this.extraProperties) {
//             data["extraProperties"] = {};
//             for (let key in this.extraProperties) {
//                 if (this.extraProperties.hasOwnProperty(key))
//                     (<any>data["extraProperties"])[key] = this.extraProperties[key];
//             }
//         }
//         data["id"] = this.id;
//         data["name"] = this.name;
//         return data;
//     }
// }
//
// export interface IIdentityClaimTypeDto {
//     extraProperties: { [key: string]: any; } | undefined;
//     id: string;
//     name: string | undefined;
// }
//
// export class ClientClaimDto implements IClientClaimDto {
//     type!: string | undefined;
//     value!: string | undefined;
//
//     constructor(data?: IClientClaimDto) {
//         if (data) {
//             for (var property in data) {
//                 if (data.hasOwnProperty(property))
//                     (<any>this)[property] = (<any>data)[property];
//             }
//         }
//     }
//
//     init(_data?: any) {
//         if (_data) {
//             this.type = _data["type"];
//             this.value = _data["value"];
//         }
//     }
//
//     static fromJS(data: any): ClientClaimDto {
//         data = typeof data === 'object' ? data : {};
//         let result = new ClientClaimDto();
//         result.init(data);
//         return result;
//     }
//
//     toJSON(data?: any) {
//         data = typeof data === 'object' ? data : {};
//         data["type"] = this.type;
//         data["value"] = this.value;
//         return data;
//     }
// }
//
// export interface IClientClaimDto {
//     type: string | undefined;
//     value: string | undefined;
// }
//
// export class ClientCorsOriginDto implements IClientCorsOriginDto {
//     clientId!: string;
//     origin!: string | undefined;
//
//     constructor(data?: IClientCorsOriginDto) {
//         if (data) {
//             for (var property in data) {
//                 if (data.hasOwnProperty(property))
//                     (<any>this)[property] = (<any>data)[property];
//             }
//         }
//     }
//
//     init(_data?: any) {
//         if (_data) {
//             this.clientId = _data["clientId"];
//             this.origin = _data["origin"];
//         }
//     }
//
//     static fromJS(data: any): ClientCorsOriginDto {
//         data = typeof data === 'object' ? data : {};
//         let result = new ClientCorsOriginDto();
//         result.init(data);
//         return result;
//     }
//
//     toJSON(data?: any) {
//         data = typeof data === 'object' ? data : {};
//         data["clientId"] = this.clientId;
//         data["origin"] = this.origin;
//         return data;
//     }
// }
//
// export interface IClientCorsOriginDto {
//     clientId: string;
//     origin: string | undefined;
// }
//
// export class ClientGrantTypeDto implements IClientGrantTypeDto {
//     clientId!: string;
//     grantType!: string | undefined;
//
//     constructor(data?: IClientGrantTypeDto) {
//         if (data) {
//             for (var property in data) {
//                 if (data.hasOwnProperty(property))
//                     (<any>this)[property] = (<any>data)[property];
//             }
//         }
//     }
//
//     init(_data?: any) {
//         if (_data) {
//             this.clientId = _data["clientId"];
//             this.grantType = _data["grantType"];
//         }
//     }
//
//     static fromJS(data: any): ClientGrantTypeDto {
//         data = typeof data === 'object' ? data : {};
//         let result = new ClientGrantTypeDto();
//         result.init(data);
//         return result;
//     }
//
//     toJSON(data?: any) {
//         data = typeof data === 'object' ? data : {};
//         data["clientId"] = this.clientId;
//         data["grantType"] = this.grantType;
//         return data;
//     }
// }
//
// export interface IClientGrantTypeDto {
//     clientId: string;
//     grantType: string | undefined;
// }
//
// export class ClientIdentityProviderRestrictionDto implements IClientIdentityProviderRestrictionDto {
//     clientId!: string;
//     provider!: string | undefined;
//
//     constructor(data?: IClientIdentityProviderRestrictionDto) {
//         if (data) {
//             for (var property in data) {
//                 if (data.hasOwnProperty(property))
//                     (<any>this)[property] = (<any>data)[property];
//             }
//         }
//     }
//
//     init(_data?: any) {
//         if (_data) {
//             this.clientId = _data["clientId"];
//             this.provider = _data["provider"];
//         }
//     }
//
//     static fromJS(data: any): ClientIdentityProviderRestrictionDto {
//         data = typeof data === 'object' ? data : {};
//         let result = new ClientIdentityProviderRestrictionDto();
//         result.init(data);
//         return result;
//     }
//
//     toJSON(data?: any) {
//         data = typeof data === 'object' ? data : {};
//         data["clientId"] = this.clientId;
//         data["provider"] = this.provider;
//         return data;
//     }
// }
//
// export interface IClientIdentityProviderRestrictionDto {
//     clientId: string;
//     provider: string | undefined;
// }
//
// export class ClientPostLogoutRedirectUriDto implements IClientPostLogoutRedirectUriDto {
//     clientId!: string;
//     postLogoutRedirectUri!: string | undefined;
//
//     constructor(data?: IClientPostLogoutRedirectUriDto) {
//         if (data) {
//             for (var property in data) {
//                 if (data.hasOwnProperty(property))
//                     (<any>this)[property] = (<any>data)[property];
//             }
//         }
//     }
//
//     init(_data?: any) {
//         if (_data) {
//             this.clientId = _data["clientId"];
//             this.postLogoutRedirectUri = _data["postLogoutRedirectUri"];
//         }
//     }
//
//     static fromJS(data: any): ClientPostLogoutRedirectUriDto {
//         data = typeof data === 'object' ? data : {};
//         let result = new ClientPostLogoutRedirectUriDto();
//         result.init(data);
//         return result;
//     }
//
//     toJSON(data?: any) {
//         data = typeof data === 'object' ? data : {};
//         data["clientId"] = this.clientId;
//         data["postLogoutRedirectUri"] = this.postLogoutRedirectUri;
//         return data;
//     }
// }
//
// export interface IClientPostLogoutRedirectUriDto {
//     clientId: string;
//     postLogoutRedirectUri: string | undefined;
// }
//
// export class ClientPropertyDto implements IClientPropertyDto {
//     clientId!: string;
//     key!: string | undefined;
//     value!: string | undefined;
//
//     constructor(data?: IClientPropertyDto) {
//         if (data) {
//             for (var property in data) {
//                 if (data.hasOwnProperty(property))
//                     (<any>this)[property] = (<any>data)[property];
//             }
//         }
//     }
//
//     init(_data?: any) {
//         if (_data) {
//             this.clientId = _data["clientId"];
//             this.key = _data["key"];
//             this.value = _data["value"];
//         }
//     }
//
//     static fromJS(data: any): ClientPropertyDto {
//         data = typeof data === 'object' ? data : {};
//         let result = new ClientPropertyDto();
//         result.init(data);
//         return result;
//     }
//
//     toJSON(data?: any) {
//         data = typeof data === 'object' ? data : {};
//         data["clientId"] = this.clientId;
//         data["key"] = this.key;
//         data["value"] = this.value;
//         return data;
//     }
// }
//
// export interface IClientPropertyDto {
//     clientId: string;
//     key: string | undefined;
//     value: string | undefined;
// }
//
// export class ClientRedirectUriDto implements IClientRedirectUriDto {
//     clientId!: string;
//     redirectUri!: string | undefined;
//
//     constructor(data?: IClientRedirectUriDto) {
//         if (data) {
//             for (var property in data) {
//                 if (data.hasOwnProperty(property))
//                     (<any>this)[property] = (<any>data)[property];
//             }
//         }
//     }
//
//     init(_data?: any) {
//         if (_data) {
//             this.clientId = _data["clientId"];
//             this.redirectUri = _data["redirectUri"];
//         }
//     }
//
//     static fromJS(data: any): ClientRedirectUriDto {
//         data = typeof data === 'object' ? data : {};
//         let result = new ClientRedirectUriDto();
//         result.init(data);
//         return result;
//     }
//
//     toJSON(data?: any) {
//         data = typeof data === 'object' ? data : {};
//         data["clientId"] = this.clientId;
//         data["redirectUri"] = this.redirectUri;
//         return data;
//     }
// }
//
// export interface IClientRedirectUriDto {
//     clientId: string;
//     redirectUri: string | undefined;
// }
//
// export class ClientScopeDto implements IClientScopeDto {
//     clientId!: string;
//     scope!: string | undefined;
//
//     constructor(data?: IClientScopeDto) {
//         if (data) {
//             for (var property in data) {
//                 if (data.hasOwnProperty(property))
//                     (<any>this)[property] = (<any>data)[property];
//             }
//         }
//     }
//
//     init(_data?: any) {
//         if (_data) {
//             this.clientId = _data["clientId"];
//             this.scope = _data["scope"];
//         }
//     }
//
//     static fromJS(data: any): ClientScopeDto {
//         data = typeof data === 'object' ? data : {};
//         let result = new ClientScopeDto();
//         result.init(data);
//         return result;
//     }
//
//     toJSON(data?: any) {
//         data = typeof data === 'object' ? data : {};
//         data["clientId"] = this.clientId;
//         data["scope"] = this.scope;
//         return data;
//     }
// }
//
// export interface IClientScopeDto {
//     clientId: string;
//     scope: string | undefined;
// }
//
// export class ClientSecretDto implements IClientSecretDto {
//     clientId!: string;
//     type!: string | undefined;
//     value!: string | undefined;
//     description!: string | undefined;
//     expiration!: DateTime | undefined;
//
//     constructor(data?: IClientSecretDto) {
//         if (data) {
//             for (var property in data) {
//                 if (data.hasOwnProperty(property))
//                     (<any>this)[property] = (<any>data)[property];
//             }
//         }
//     }
//
//     init(_data?: any) {
//         if (_data) {
//             this.clientId = _data["clientId"];
//             this.type = _data["type"];
//             this.value = _data["value"];
//             this.description = _data["description"];
//             this.expiration = _data["expiration"] ? DateTime.fromISO(_data["expiration"].toString()) : <any>undefined;
//         }
//     }
//
//     static fromJS(data: any): ClientSecretDto {
//         data = typeof data === 'object' ? data : {};
//         let result = new ClientSecretDto();
//         result.init(data);
//         return result;
//     }
//
//     toJSON(data?: any) {
//         data = typeof data === 'object' ? data : {};
//         data["clientId"] = this.clientId;
//         data["type"] = this.type;
//         data["value"] = this.value;
//         data["description"] = this.description;
//         data["expiration"] = this.expiration ? this.expiration.toString() : <any>undefined;
//         return data;
//     }
// }
//
// export interface IClientSecretDto {
//     clientId: string;
//     type: string | undefined;
//     value: string | undefined;
//     description: string | undefined;
//     expiration: DateTime | undefined;
// }
//
// export class ClientWithDetailsDto implements IClientWithDetailsDto {
//     readonly extraProperties!: { [key: string]: any; } | undefined;
//     id!: string;
//     clientId!: string | undefined;
//     clientName!: string | undefined;
//     description!: string | undefined;
//     clientUri!: string | undefined;
//     logoUri!: string | undefined;
//     enabled!: boolean;
//     protocolType!: string | undefined;
//     requireClientSecret!: boolean;
//     requireConsent!: boolean;
//     allowRememberConsent!: boolean;
//     alwaysIncludeUserClaimsInIdToken!: boolean;
//     requirePkce!: boolean;
//     allowPlainTextPkce!: boolean;
//     requireRequestObject!: boolean;
//     allowAccessTokensViaBrowser!: boolean;
//     frontChannelLogoutUri!: string | undefined;
//     frontChannelLogoutSessionRequired!: boolean;
//     backChannelLogoutUri!: string | undefined;
//     backChannelLogoutSessionRequired!: boolean;
//     allowOfflineAccess!: boolean;
//     identityTokenLifetime!: number;
//     allowedIdentityTokenSigningAlgorithms!: string | undefined;
//     accessTokenLifetime!: number;
//     authorizationCodeLifetime!: number;
//     consentLifetime!: number | undefined;
//     absoluteRefreshTokenLifetime!: number;
//     slidingRefreshTokenLifetime!: number;
//     refreshTokenUsage!: number;
//     updateAccessTokenClaimsOnRefresh!: boolean;
//     refreshTokenExpiration!: number;
//     accessTokenType!: number;
//     enableLocalLogin!: boolean;
//     includeJwtId!: boolean;
//     alwaysSendClientClaims!: boolean;
//     clientClaimsPrefix!: string | undefined;
//     pairWiseSubjectSalt!: string | undefined;
//     userSsoLifetime!: number | undefined;
//     userCodeType!: string | undefined;
//     deviceCodeLifetime!: number;
//     clientSecrets!: ClientSecretDto[] | undefined;
//     allowedScopes!: ClientScopeDto[] | undefined;
//     claims!: ClientClaimDto[] | undefined;
//     allowedGrantTypes!: ClientGrantTypeDto[] | undefined;
//     identityProviderRestrictions!: ClientIdentityProviderRestrictionDto[] | undefined;
//     properties!: ClientPropertyDto[] | undefined;
//     allowedCorsOrigins!: ClientCorsOriginDto[] | undefined;
//     redirectUris!: ClientRedirectUriDto[] | undefined;
//     postLogoutRedirectUris!: ClientPostLogoutRedirectUriDto[] | undefined;
//
//     constructor(data?: IClientWithDetailsDto) {
//         if (data) {
//             for (var property in data) {
//                 if (data.hasOwnProperty(property))
//                     (<any>this)[property] = (<any>data)[property];
//             }
//         }
//     }
//
//     init(_data?: any) {
//         if (_data) {
//             if (_data["extraProperties"]) {
//                 (<any>this).extraProperties = {} as any;
//                 for (let key in _data["extraProperties"]) {
//                     if (_data["extraProperties"].hasOwnProperty(key))
//                         (<any>(<any>this).extraProperties)![key] = _data["extraProperties"][key];
//                 }
//             }
//             this.id = _data["id"];
//             this.clientId = _data["clientId"];
//             this.clientName = _data["clientName"];
//             this.description = _data["description"];
//             this.clientUri = _data["clientUri"];
//             this.logoUri = _data["logoUri"];
//             this.enabled = _data["enabled"];
//             this.protocolType = _data["protocolType"];
//             this.requireClientSecret = _data["requireClientSecret"];
//             this.requireConsent = _data["requireConsent"];
//             this.allowRememberConsent = _data["allowRememberConsent"];
//             this.alwaysIncludeUserClaimsInIdToken = _data["alwaysIncludeUserClaimsInIdToken"];
//             this.requirePkce = _data["requirePkce"];
//             this.allowPlainTextPkce = _data["allowPlainTextPkce"];
//             this.requireRequestObject = _data["requireRequestObject"];
//             this.allowAccessTokensViaBrowser = _data["allowAccessTokensViaBrowser"];
//             this.frontChannelLogoutUri = _data["frontChannelLogoutUri"];
//             this.frontChannelLogoutSessionRequired = _data["frontChannelLogoutSessionRequired"];
//             this.backChannelLogoutUri = _data["backChannelLogoutUri"];
//             this.backChannelLogoutSessionRequired = _data["backChannelLogoutSessionRequired"];
//             this.allowOfflineAccess = _data["allowOfflineAccess"];
//             this.identityTokenLifetime = _data["identityTokenLifetime"];
//             this.allowedIdentityTokenSigningAlgorithms = _data["allowedIdentityTokenSigningAlgorithms"];
//             this.accessTokenLifetime = _data["accessTokenLifetime"];
//             this.authorizationCodeLifetime = _data["authorizationCodeLifetime"];
//             this.consentLifetime = _data["consentLifetime"];
//             this.absoluteRefreshTokenLifetime = _data["absoluteRefreshTokenLifetime"];
//             this.slidingRefreshTokenLifetime = _data["slidingRefreshTokenLifetime"];
//             this.refreshTokenUsage = _data["refreshTokenUsage"];
//             this.updateAccessTokenClaimsOnRefresh = _data["updateAccessTokenClaimsOnRefresh"];
//             this.refreshTokenExpiration = _data["refreshTokenExpiration"];
//             this.accessTokenType = _data["accessTokenType"];
//             this.enableLocalLogin = _data["enableLocalLogin"];
//             this.includeJwtId = _data["includeJwtId"];
//             this.alwaysSendClientClaims = _data["alwaysSendClientClaims"];
//             this.clientClaimsPrefix = _data["clientClaimsPrefix"];
//             this.pairWiseSubjectSalt = _data["pairWiseSubjectSalt"];
//             this.userSsoLifetime = _data["userSsoLifetime"];
//             this.userCodeType = _data["userCodeType"];
//             this.deviceCodeLifetime = _data["deviceCodeLifetime"];
//             if (Array.isArray(_data["clientSecrets"])) {
//                 this.clientSecrets = [] as any;
//                 for (let item of _data["clientSecrets"])
//                     this.clientSecrets!.push(ClientSecretDto.fromJS(item));
//             }
//             if (Array.isArray(_data["allowedScopes"])) {
//                 this.allowedScopes = [] as any;
//                 for (let item of _data["allowedScopes"])
//                     this.allowedScopes!.push(ClientScopeDto.fromJS(item));
//             }
//             if (Array.isArray(_data["claims"])) {
//                 this.claims = [] as any;
//                 for (let item of _data["claims"])
//                     this.claims!.push(ClientClaimDto.fromJS(item));
//             }
//             if (Array.isArray(_data["allowedGrantTypes"])) {
//                 this.allowedGrantTypes = [] as any;
//                 for (let item of _data["allowedGrantTypes"])
//                     this.allowedGrantTypes!.push(ClientGrantTypeDto.fromJS(item));
//             }
//             if (Array.isArray(_data["identityProviderRestrictions"])) {
//                 this.identityProviderRestrictions = [] as any;
//                 for (let item of _data["identityProviderRestrictions"])
//                     this.identityProviderRestrictions!.push(ClientIdentityProviderRestrictionDto.fromJS(item));
//             }
//             if (Array.isArray(_data["properties"])) {
//                 this.properties = [] as any;
//                 for (let item of _data["properties"])
//                     this.properties!.push(ClientPropertyDto.fromJS(item));
//             }
//             if (Array.isArray(_data["allowedCorsOrigins"])) {
//                 this.allowedCorsOrigins = [] as any;
//                 for (let item of _data["allowedCorsOrigins"])
//                     this.allowedCorsOrigins!.push(ClientCorsOriginDto.fromJS(item));
//             }
//             if (Array.isArray(_data["redirectUris"])) {
//                 this.redirectUris = [] as any;
//                 for (let item of _data["redirectUris"])
//                     this.redirectUris!.push(ClientRedirectUriDto.fromJS(item));
//             }
//             if (Array.isArray(_data["postLogoutRedirectUris"])) {
//                 this.postLogoutRedirectUris = [] as any;
//                 for (let item of _data["postLogoutRedirectUris"])
//                     this.postLogoutRedirectUris!.push(ClientPostLogoutRedirectUriDto.fromJS(item));
//             }
//         }
//     }
//
//     static fromJS(data: any): ClientWithDetailsDto {
//         data = typeof data === 'object' ? data : {};
//         let result = new ClientWithDetailsDto();
//         result.init(data);
//         return result;
//     }
//
//     toJSON(data?: any) {
//         data = typeof data === 'object' ? data : {};
//         if (this.extraProperties) {
//             data["extraProperties"] = {};
//             for (let key in this.extraProperties) {
//                 if (this.extraProperties.hasOwnProperty(key))
//                     (<any>data["extraProperties"])[key] = this.extraProperties[key];
//             }
//         }
//         data["id"] = this.id;
//         data["clientId"] = this.clientId;
//         data["clientName"] = this.clientName;
//         data["description"] = this.description;
//         data["clientUri"] = this.clientUri;
//         data["logoUri"] = this.logoUri;
//         data["enabled"] = this.enabled;
//         data["protocolType"] = this.protocolType;
//         data["requireClientSecret"] = this.requireClientSecret;
//         data["requireConsent"] = this.requireConsent;
//         data["allowRememberConsent"] = this.allowRememberConsent;
//         data["alwaysIncludeUserClaimsInIdToken"] = this.alwaysIncludeUserClaimsInIdToken;
//         data["requirePkce"] = this.requirePkce;
//         data["allowPlainTextPkce"] = this.allowPlainTextPkce;
//         data["requireRequestObject"] = this.requireRequestObject;
//         data["allowAccessTokensViaBrowser"] = this.allowAccessTokensViaBrowser;
//         data["frontChannelLogoutUri"] = this.frontChannelLogoutUri;
//         data["frontChannelLogoutSessionRequired"] = this.frontChannelLogoutSessionRequired;
//         data["backChannelLogoutUri"] = this.backChannelLogoutUri;
//         data["backChannelLogoutSessionRequired"] = this.backChannelLogoutSessionRequired;
//         data["allowOfflineAccess"] = this.allowOfflineAccess;
//         data["identityTokenLifetime"] = this.identityTokenLifetime;
//         data["allowedIdentityTokenSigningAlgorithms"] = this.allowedIdentityTokenSigningAlgorithms;
//         data["accessTokenLifetime"] = this.accessTokenLifetime;
//         data["authorizationCodeLifetime"] = this.authorizationCodeLifetime;
//         data["consentLifetime"] = this.consentLifetime;
//         data["absoluteRefreshTokenLifetime"] = this.absoluteRefreshTokenLifetime;
//         data["slidingRefreshTokenLifetime"] = this.slidingRefreshTokenLifetime;
//         data["refreshTokenUsage"] = this.refreshTokenUsage;
//         data["updateAccessTokenClaimsOnRefresh"] = this.updateAccessTokenClaimsOnRefresh;
//         data["refreshTokenExpiration"] = this.refreshTokenExpiration;
//         data["accessTokenType"] = this.accessTokenType;
//         data["enableLocalLogin"] = this.enableLocalLogin;
//         data["includeJwtId"] = this.includeJwtId;
//         data["alwaysSendClientClaims"] = this.alwaysSendClientClaims;
//         data["clientClaimsPrefix"] = this.clientClaimsPrefix;
//         data["pairWiseSubjectSalt"] = this.pairWiseSubjectSalt;
//         data["userSsoLifetime"] = this.userSsoLifetime;
//         data["userCodeType"] = this.userCodeType;
//         data["deviceCodeLifetime"] = this.deviceCodeLifetime;
//         if (Array.isArray(this.clientSecrets)) {
//             data["clientSecrets"] = [];
//             for (let item of this.clientSecrets)
//                 data["clientSecrets"].push(item.toJSON());
//         }
//         if (Array.isArray(this.allowedScopes)) {
//             data["allowedScopes"] = [];
//             for (let item of this.allowedScopes)
//                 data["allowedScopes"].push(item.toJSON());
//         }
//         if (Array.isArray(this.claims)) {
//             data["claims"] = [];
//             for (let item of this.claims)
//                 data["claims"].push(item.toJSON());
//         }
//         if (Array.isArray(this.allowedGrantTypes)) {
//             data["allowedGrantTypes"] = [];
//             for (let item of this.allowedGrantTypes)
//                 data["allowedGrantTypes"].push(item.toJSON());
//         }
//         if (Array.isArray(this.identityProviderRestrictions)) {
//             data["identityProviderRestrictions"] = [];
//             for (let item of this.identityProviderRestrictions)
//                 data["identityProviderRestrictions"].push(item.toJSON());
//         }
//         if (Array.isArray(this.properties)) {
//             data["properties"] = [];
//             for (let item of this.properties)
//                 data["properties"].push(item.toJSON());
//         }
//         if (Array.isArray(this.allowedCorsOrigins)) {
//             data["allowedCorsOrigins"] = [];
//             for (let item of this.allowedCorsOrigins)
//                 data["allowedCorsOrigins"].push(item.toJSON());
//         }
//         if (Array.isArray(this.redirectUris)) {
//             data["redirectUris"] = [];
//             for (let item of this.redirectUris)
//                 data["redirectUris"].push(item.toJSON());
//         }
//         if (Array.isArray(this.postLogoutRedirectUris)) {
//             data["postLogoutRedirectUris"] = [];
//             for (let item of this.postLogoutRedirectUris)
//                 data["postLogoutRedirectUris"].push(item.toJSON());
//         }
//         return data;
//     }
// }
//
// export interface IClientWithDetailsDto {
//     extraProperties: { [key: string]: any; } | undefined;
//     id: string;
//     clientId: string | undefined;
//     clientName: string | undefined;
//     description: string | undefined;
//     clientUri: string | undefined;
//     logoUri: string | undefined;
//     enabled: boolean;
//     protocolType: string | undefined;
//     requireClientSecret: boolean;
//     requireConsent: boolean;
//     allowRememberConsent: boolean;
//     alwaysIncludeUserClaimsInIdToken: boolean;
//     requirePkce: boolean;
//     allowPlainTextPkce: boolean;
//     requireRequestObject: boolean;
//     allowAccessTokensViaBrowser: boolean;
//     frontChannelLogoutUri: string | undefined;
//     frontChannelLogoutSessionRequired: boolean;
//     backChannelLogoutUri: string | undefined;
//     backChannelLogoutSessionRequired: boolean;
//     allowOfflineAccess: boolean;
//     identityTokenLifetime: number;
//     allowedIdentityTokenSigningAlgorithms: string | undefined;
//     accessTokenLifetime: number;
//     authorizationCodeLifetime: number;
//     consentLifetime: number | undefined;
//     absoluteRefreshTokenLifetime: number;
//     slidingRefreshTokenLifetime: number;
//     refreshTokenUsage: number;
//     updateAccessTokenClaimsOnRefresh: boolean;
//     refreshTokenExpiration: number;
//     accessTokenType: number;
//     enableLocalLogin: boolean;
//     includeJwtId: boolean;
//     alwaysSendClientClaims: boolean;
//     clientClaimsPrefix: string | undefined;
//     pairWiseSubjectSalt: string | undefined;
//     userSsoLifetime: number | undefined;
//     userCodeType: string | undefined;
//     deviceCodeLifetime: number;
//     clientSecrets: ClientSecretDto[] | undefined;
//     allowedScopes: ClientScopeDto[] | undefined;
//     claims: ClientClaimDto[] | undefined;
//     allowedGrantTypes: ClientGrantTypeDto[] | undefined;
//     identityProviderRestrictions: ClientIdentityProviderRestrictionDto[] | undefined;
//     properties: ClientPropertyDto[] | undefined;
//     allowedCorsOrigins: ClientCorsOriginDto[] | undefined;
//     redirectUris: ClientRedirectUriDto[] | undefined;
//     postLogoutRedirectUris: ClientPostLogoutRedirectUriDto[] | undefined;
// }
//
// export class CreateClientDto implements ICreateClientDto {
//     readonly extraProperties!: { [key: string]: any; } | undefined;
//     clientId!: string;
//     clientName!: string;
//     description!: string | undefined;
//     clientUri!: string | undefined;
//     logoUri!: string | undefined;
//     requireConsent!: boolean;
//     callbackUrl!: string | undefined;
//     logoutUrl!: string | undefined;
//     secrets!: ClientSecretDto[] | undefined;
//     scopes!: string[] | undefined;
//
//     constructor(data?: ICreateClientDto) {
//         if (data) {
//             for (var property in data) {
//                 if (data.hasOwnProperty(property))
//                     (<any>this)[property] = (<any>data)[property];
//             }
//         }
//     }
//
//     init(_data?: any) {
//         if (_data) {
//             if (_data["extraProperties"]) {
//                 (<any>this).extraProperties = {} as any;
//                 for (let key in _data["extraProperties"]) {
//                     if (_data["extraProperties"].hasOwnProperty(key))
//                         (<any>(<any>this).extraProperties)![key] = _data["extraProperties"][key];
//                 }
//             }
//             this.clientId = _data["clientId"];
//             this.clientName = _data["clientName"];
//             this.description = _data["description"];
//             this.clientUri = _data["clientUri"];
//             this.logoUri = _data["logoUri"];
//             this.requireConsent = _data["requireConsent"];
//             this.callbackUrl = _data["callbackUrl"];
//             this.logoutUrl = _data["logoutUrl"];
//             if (Array.isArray(_data["secrets"])) {
//                 this.secrets = [] as any;
//                 for (let item of _data["secrets"])
//                     this.secrets!.push(ClientSecretDto.fromJS(item));
//             }
//             if (Array.isArray(_data["scopes"])) {
//                 this.scopes = [] as any;
//                 for (let item of _data["scopes"])
//                     this.scopes!.push(item);
//             }
//         }
//     }
//
//     static fromJS(data: any): CreateClientDto {
//         data = typeof data === 'object' ? data : {};
//         let result = new CreateClientDto();
//         result.init(data);
//         return result;
//     }
//
//     toJSON(data?: any) {
//         data = typeof data === 'object' ? data : {};
//         if (this.extraProperties) {
//             data["extraProperties"] = {};
//             for (let key in this.extraProperties) {
//                 if (this.extraProperties.hasOwnProperty(key))
//                     (<any>data["extraProperties"])[key] = this.extraProperties[key];
//             }
//         }
//         data["clientId"] = this.clientId;
//         data["clientName"] = this.clientName;
//         data["description"] = this.description;
//         data["clientUri"] = this.clientUri;
//         data["logoUri"] = this.logoUri;
//         data["requireConsent"] = this.requireConsent;
//         data["callbackUrl"] = this.callbackUrl;
//         data["logoutUrl"] = this.logoutUrl;
//         if (Array.isArray(this.secrets)) {
//             data["secrets"] = [];
//             for (let item of this.secrets)
//                 data["secrets"].push(item.toJSON());
//         }
//         if (Array.isArray(this.scopes)) {
//             data["scopes"] = [];
//             for (let item of this.scopes)
//                 data["scopes"].push(item);
//         }
//         return data;
//     }
// }
//
// export interface ICreateClientDto {
//     extraProperties: { [key: string]: any; } | undefined;
//     clientId: string;
//     clientName: string;
//     description: string | undefined;
//     clientUri: string | undefined;
//     logoUri: string | undefined;
//     requireConsent: boolean;
//     callbackUrl: string | undefined;
//     logoutUrl: string | undefined;
//     secrets: ClientSecretDto[] | undefined;
//     scopes: string[] | undefined;
// }
//
// export class UpdateClientDto implements IUpdateClientDto {
//     readonly extraProperties!: { [key: string]: any; } | undefined;
//     clientName!: string | undefined;
//     description!: string | undefined;
//     clientUri!: string | undefined;
//     logoUri!: string | undefined;
//     enabled!: boolean;
//     requireConsent!: boolean;
//     allowOfflineAccess!: boolean;
//     allowRememberConsent!: boolean;
//     requirePkce!: boolean;
//     requireClientSecret!: boolean;
//     requireRequestObject!: boolean;
//     accessTokenLifetime!: number;
//     consentLifetime!: number | undefined;
//     accessTokenType!: number;
//     enableLocalLogin!: boolean;
//     frontChannelLogoutUri!: string | undefined;
//     frontChannelLogoutSessionRequired!: boolean;
//     backChannelLogoutUri!: string | undefined;
//     allowedIdentityTokenSigningAlgorithms!: string | undefined;
//     backChannelLogoutSessionRequired!: boolean;
//     includeJwtId!: boolean;
//     alwaysSendClientClaims!: boolean;
//     pairWiseSubjectSalt!: string | undefined;
//     userSsoLifetime!: number | undefined;
//     userCodeType!: string | undefined;
//     deviceCodeLifetime!: number;
//     clientSecrets!: ClientSecretDto[] | undefined;
//     claims!: ClientClaimDto[] | undefined;
//     properties!: ClientPropertyDto[] | undefined;
//     allowedGrantTypes!: string[] | undefined;
//     identityProviderRestrictions!: string[] | undefined;
//     scopes!: string[] | undefined;
//     allowedCorsOrigins!: string[] | undefined;
//     redirectUris!: string[] | undefined;
//     postLogoutRedirectUris!: string[] | undefined;
//
//     constructor(data?: IUpdateClientDto) {
//         if (data) {
//             for (var property in data) {
//                 if (data.hasOwnProperty(property))
//                     (<any>this)[property] = (<any>data)[property];
//             }
//         }
//     }
//
//     init(_data?: any) {
//         if (_data) {
//             if (_data["extraProperties"]) {
//                 (<any>this).extraProperties = {} as any;
//                 for (let key in _data["extraProperties"]) {
//                     if (_data["extraProperties"].hasOwnProperty(key))
//                         (<any>(<any>this).extraProperties)![key] = _data["extraProperties"][key];
//                 }
//             }
//             this.clientName = _data["clientName"];
//             this.description = _data["description"];
//             this.clientUri = _data["clientUri"];
//             this.logoUri = _data["logoUri"];
//             this.enabled = _data["enabled"];
//             this.requireConsent = _data["requireConsent"];
//             this.allowOfflineAccess = _data["allowOfflineAccess"];
//             this.allowRememberConsent = _data["allowRememberConsent"];
//             this.requirePkce = _data["requirePkce"];
//             this.requireClientSecret = _data["requireClientSecret"];
//             this.requireRequestObject = _data["requireRequestObject"];
//             this.accessTokenLifetime = _data["accessTokenLifetime"];
//             this.consentLifetime = _data["consentLifetime"];
//             this.accessTokenType = _data["accessTokenType"];
//             this.enableLocalLogin = _data["enableLocalLogin"];
//             this.frontChannelLogoutUri = _data["frontChannelLogoutUri"];
//             this.frontChannelLogoutSessionRequired = _data["frontChannelLogoutSessionRequired"];
//             this.backChannelLogoutUri = _data["backChannelLogoutUri"];
//             this.allowedIdentityTokenSigningAlgorithms = _data["allowedIdentityTokenSigningAlgorithms"];
//             this.backChannelLogoutSessionRequired = _data["backChannelLogoutSessionRequired"];
//             this.includeJwtId = _data["includeJwtId"];
//             this.alwaysSendClientClaims = _data["alwaysSendClientClaims"];
//             this.pairWiseSubjectSalt = _data["pairWiseSubjectSalt"];
//             this.userSsoLifetime = _data["userSsoLifetime"];
//             this.userCodeType = _data["userCodeType"];
//             this.deviceCodeLifetime = _data["deviceCodeLifetime"];
//             if (Array.isArray(_data["clientSecrets"])) {
//                 this.clientSecrets = [] as any;
//                 for (let item of _data["clientSecrets"])
//                     this.clientSecrets!.push(ClientSecretDto.fromJS(item));
//             }
//             if (Array.isArray(_data["claims"])) {
//                 this.claims = [] as any;
//                 for (let item of _data["claims"])
//                     this.claims!.push(ClientClaimDto.fromJS(item));
//             }
//             if (Array.isArray(_data["properties"])) {
//                 this.properties = [] as any;
//                 for (let item of _data["properties"])
//                     this.properties!.push(ClientPropertyDto.fromJS(item));
//             }
//             if (Array.isArray(_data["allowedGrantTypes"])) {
//                 this.allowedGrantTypes = [] as any;
//                 for (let item of _data["allowedGrantTypes"])
//                     this.allowedGrantTypes!.push(item);
//             }
//             if (Array.isArray(_data["identityProviderRestrictions"])) {
//                 this.identityProviderRestrictions = [] as any;
//                 for (let item of _data["identityProviderRestrictions"])
//                     this.identityProviderRestrictions!.push(item);
//             }
//             if (Array.isArray(_data["scopes"])) {
//                 this.scopes = [] as any;
//                 for (let item of _data["scopes"])
//                     this.scopes!.push(item);
//             }
//             if (Array.isArray(_data["allowedCorsOrigins"])) {
//                 this.allowedCorsOrigins = [] as any;
//                 for (let item of _data["allowedCorsOrigins"])
//                     this.allowedCorsOrigins!.push(item);
//             }
//             if (Array.isArray(_data["redirectUris"])) {
//                 this.redirectUris = [] as any;
//                 for (let item of _data["redirectUris"])
//                     this.redirectUris!.push(item);
//             }
//             if (Array.isArray(_data["postLogoutRedirectUris"])) {
//                 this.postLogoutRedirectUris = [] as any;
//                 for (let item of _data["postLogoutRedirectUris"])
//                     this.postLogoutRedirectUris!.push(item);
//             }
//         }
//     }
//
//     static fromJS(data: any): UpdateClientDto {
//         data = typeof data === 'object' ? data : {};
//         let result = new UpdateClientDto();
//         result.init(data);
//         return result;
//     }
//
//     toJSON(data?: any) {
//         data = typeof data === 'object' ? data : {};
//         if (this.extraProperties) {
//             data["extraProperties"] = {};
//             for (let key in this.extraProperties) {
//                 if (this.extraProperties.hasOwnProperty(key))
//                     (<any>data["extraProperties"])[key] = this.extraProperties[key];
//             }
//         }
//         data["clientName"] = this.clientName;
//         data["description"] = this.description;
//         data["clientUri"] = this.clientUri;
//         data["logoUri"] = this.logoUri;
//         data["enabled"] = this.enabled;
//         data["requireConsent"] = this.requireConsent;
//         data["allowOfflineAccess"] = this.allowOfflineAccess;
//         data["allowRememberConsent"] = this.allowRememberConsent;
//         data["requirePkce"] = this.requirePkce;
//         data["requireClientSecret"] = this.requireClientSecret;
//         data["requireRequestObject"] = this.requireRequestObject;
//         data["accessTokenLifetime"] = this.accessTokenLifetime;
//         data["consentLifetime"] = this.consentLifetime;
//         data["accessTokenType"] = this.accessTokenType;
//         data["enableLocalLogin"] = this.enableLocalLogin;
//         data["frontChannelLogoutUri"] = this.frontChannelLogoutUri;
//         data["frontChannelLogoutSessionRequired"] = this.frontChannelLogoutSessionRequired;
//         data["backChannelLogoutUri"] = this.backChannelLogoutUri;
//         data["allowedIdentityTokenSigningAlgorithms"] = this.allowedIdentityTokenSigningAlgorithms;
//         data["backChannelLogoutSessionRequired"] = this.backChannelLogoutSessionRequired;
//         data["includeJwtId"] = this.includeJwtId;
//         data["alwaysSendClientClaims"] = this.alwaysSendClientClaims;
//         data["pairWiseSubjectSalt"] = this.pairWiseSubjectSalt;
//         data["userSsoLifetime"] = this.userSsoLifetime;
//         data["userCodeType"] = this.userCodeType;
//         data["deviceCodeLifetime"] = this.deviceCodeLifetime;
//         if (Array.isArray(this.clientSecrets)) {
//             data["clientSecrets"] = [];
//             for (let item of this.clientSecrets)
//                 data["clientSecrets"].push(item.toJSON());
//         }
//         if (Array.isArray(this.claims)) {
//             data["claims"] = [];
//             for (let item of this.claims)
//                 data["claims"].push(item.toJSON());
//         }
//         if (Array.isArray(this.properties)) {
//             data["properties"] = [];
//             for (let item of this.properties)
//                 data["properties"].push(item.toJSON());
//         }
//         if (Array.isArray(this.allowedGrantTypes)) {
//             data["allowedGrantTypes"] = [];
//             for (let item of this.allowedGrantTypes)
//                 data["allowedGrantTypes"].push(item);
//         }
//         if (Array.isArray(this.identityProviderRestrictions)) {
//             data["identityProviderRestrictions"] = [];
//             for (let item of this.identityProviderRestrictions)
//                 data["identityProviderRestrictions"].push(item);
//         }
//         if (Array.isArray(this.scopes)) {
//             data["scopes"] = [];
//             for (let item of this.scopes)
//                 data["scopes"].push(item);
//         }
//         if (Array.isArray(this.allowedCorsOrigins)) {
//             data["allowedCorsOrigins"] = [];
//             for (let item of this.allowedCorsOrigins)
//                 data["allowedCorsOrigins"].push(item);
//         }
//         if (Array.isArray(this.redirectUris)) {
//             data["redirectUris"] = [];
//             for (let item of this.redirectUris)
//                 data["redirectUris"].push(item);
//         }
//         if (Array.isArray(this.postLogoutRedirectUris)) {
//             data["postLogoutRedirectUris"] = [];
//             for (let item of this.postLogoutRedirectUris)
//                 data["postLogoutRedirectUris"].push(item);
//         }
//         return data;
//     }
// }
//
// export interface IUpdateClientDto {
//     extraProperties: { [key: string]: any; } | undefined;
//     clientName: string | undefined;
//     description: string | undefined;
//     clientUri: string | undefined;
//     logoUri: string | undefined;
//     enabled: boolean;
//     requireConsent: boolean;
//     allowOfflineAccess: boolean;
//     allowRememberConsent: boolean;
//     requirePkce: boolean;
//     requireClientSecret: boolean;
//     requireRequestObject: boolean;
//     accessTokenLifetime: number;
//     consentLifetime: number | undefined;
//     accessTokenType: number;
//     enableLocalLogin: boolean;
//     frontChannelLogoutUri: string | undefined;
//     frontChannelLogoutSessionRequired: boolean;
//     backChannelLogoutUri: string | undefined;
//     allowedIdentityTokenSigningAlgorithms: string | undefined;
//     backChannelLogoutSessionRequired: boolean;
//     includeJwtId: boolean;
//     alwaysSendClientClaims: boolean;
//     pairWiseSubjectSalt: string | undefined;
//     userSsoLifetime: number | undefined;
//     userCodeType: string | undefined;
//     deviceCodeLifetime: number;
//     clientSecrets: ClientSecretDto[] | undefined;
//     claims: ClientClaimDto[] | undefined;
//     properties: ClientPropertyDto[] | undefined;
//     allowedGrantTypes: string[] | undefined;
//     identityProviderRestrictions: string[] | undefined;
//     scopes: string[] | undefined;
//     allowedCorsOrigins: string[] | undefined;
//     redirectUris: string[] | undefined;
//     postLogoutRedirectUris: string[] | undefined;
// }
//
// export class CreateIdentityResourceDto implements ICreateIdentityResourceDto {
//     readonly extraProperties!: { [key: string]: any; } | undefined;
//     name!: string;
//     displayName!: string | undefined;
//     description!: string | undefined;
//     enabled!: boolean;
//     required!: boolean;
//     emphasize!: boolean;
//     showInDiscoveryDocument!: boolean;
//     userClaims!: IdentityResourceClaimDto[] | undefined;
//     properties!: IdentityResourcePropertyDto[] | undefined;
//
//     constructor(data?: ICreateIdentityResourceDto) {
//         if (data) {
//             for (var property in data) {
//                 if (data.hasOwnProperty(property))
//                     (<any>this)[property] = (<any>data)[property];
//             }
//         }
//     }
//
//     init(_data?: any) {
//         if (_data) {
//             if (_data["extraProperties"]) {
//                 (<any>this).extraProperties = {} as any;
//                 for (let key in _data["extraProperties"]) {
//                     if (_data["extraProperties"].hasOwnProperty(key))
//                         (<any>(<any>this).extraProperties)![key] = _data["extraProperties"][key];
//                 }
//             }
//             this.name = _data["name"];
//             this.displayName = _data["displayName"];
//             this.description = _data["description"];
//             this.enabled = _data["enabled"];
//             this.required = _data["required"];
//             this.emphasize = _data["emphasize"];
//             this.showInDiscoveryDocument = _data["showInDiscoveryDocument"];
//             if (Array.isArray(_data["userClaims"])) {
//                 this.userClaims = [] as any;
//                 for (let item of _data["userClaims"])
//                     this.userClaims!.push(IdentityResourceClaimDto.fromJS(item));
//             }
//             if (Array.isArray(_data["properties"])) {
//                 this.properties = [] as any;
//                 for (let item of _data["properties"])
//                     this.properties!.push(IdentityResourcePropertyDto.fromJS(item));
//             }
//         }
//     }
//
//     static fromJS(data: any): CreateIdentityResourceDto {
//         data = typeof data === 'object' ? data : {};
//         let result = new CreateIdentityResourceDto();
//         result.init(data);
//         return result;
//     }
//
//     toJSON(data?: any) {
//         data = typeof data === 'object' ? data : {};
//         if (this.extraProperties) {
//             data["extraProperties"] = {};
//             for (let key in this.extraProperties) {
//                 if (this.extraProperties.hasOwnProperty(key))
//                     (<any>data["extraProperties"])[key] = this.extraProperties[key];
//             }
//         }
//         data["name"] = this.name;
//         data["displayName"] = this.displayName;
//         data["description"] = this.description;
//         data["enabled"] = this.enabled;
//         data["required"] = this.required;
//         data["emphasize"] = this.emphasize;
//         data["showInDiscoveryDocument"] = this.showInDiscoveryDocument;
//         if (Array.isArray(this.userClaims)) {
//             data["userClaims"] = [];
//             for (let item of this.userClaims)
//                 data["userClaims"].push(item.toJSON());
//         }
//         if (Array.isArray(this.properties)) {
//             data["properties"] = [];
//             for (let item of this.properties)
//                 data["properties"].push(item.toJSON());
//         }
//         return data;
//     }
// }
//
// export interface ICreateIdentityResourceDto {
//     extraProperties: { [key: string]: any; } | undefined;
//     name: string;
//     displayName: string | undefined;
//     description: string | undefined;
//     enabled: boolean;
//     required: boolean;
//     emphasize: boolean;
//     showInDiscoveryDocument: boolean;
//     userClaims: IdentityResourceClaimDto[] | undefined;
//     properties: IdentityResourcePropertyDto[] | undefined;
// }
//
// export class IdentityResourceClaimDto implements IIdentityResourceClaimDto {
//     identityResourceId!: string;
//     type!: string | undefined;
//
//     constructor(data?: IIdentityResourceClaimDto) {
//         if (data) {
//             for (var property in data) {
//                 if (data.hasOwnProperty(property))
//                     (<any>this)[property] = (<any>data)[property];
//             }
//         }
//     }
//
//     init(_data?: any) {
//         if (_data) {
//             this.identityResourceId = _data["identityResourceId"];
//             this.type = _data["type"];
//         }
//     }
//
//     static fromJS(data: any): IdentityResourceClaimDto {
//         data = typeof data === 'object' ? data : {};
//         let result = new IdentityResourceClaimDto();
//         result.init(data);
//         return result;
//     }
//
//     toJSON(data?: any) {
//         data = typeof data === 'object' ? data : {};
//         data["identityResourceId"] = this.identityResourceId;
//         data["type"] = this.type;
//         return data;
//     }
// }
//
// export interface IIdentityResourceClaimDto {
//     identityResourceId: string;
//     type: string | undefined;
// }
//
// export class IdentityResourcePropertyDto implements IIdentityResourcePropertyDto {
//     identityResourceId!: string;
//     key!: string | undefined;
//     value!: string | undefined;
//
//     constructor(data?: IIdentityResourcePropertyDto) {
//         if (data) {
//             for (var property in data) {
//                 if (data.hasOwnProperty(property))
//                     (<any>this)[property] = (<any>data)[property];
//             }
//         }
//     }
//
//     init(_data?: any) {
//         if (_data) {
//             this.identityResourceId = _data["identityResourceId"];
//             this.key = _data["key"];
//             this.value = _data["value"];
//         }
//     }
//
//     static fromJS(data: any): IdentityResourcePropertyDto {
//         data = typeof data === 'object' ? data : {};
//         let result = new IdentityResourcePropertyDto();
//         result.init(data);
//         return result;
//     }
//
//     toJSON(data?: any) {
//         data = typeof data === 'object' ? data : {};
//         data["identityResourceId"] = this.identityResourceId;
//         data["key"] = this.key;
//         data["value"] = this.value;
//         return data;
//     }
// }
//
// export interface IIdentityResourcePropertyDto {
//     identityResourceId: string;
//     key: string | undefined;
//     value: string | undefined;
// }
//
// export class IdentityResourceWithDetailsDto implements IIdentityResourceWithDetailsDto {
//     readonly extraProperties!: { [key: string]: any; } | undefined;
//     id!: string;
//     name!: string | undefined;
//     displayName!: string | undefined;
//     description!: string | undefined;
//     enabled!: boolean;
//     required!: boolean;
//     emphasize!: boolean;
//     showInDiscoveryDocument!: boolean;
//     userClaims!: IdentityResourceClaimDto[] | undefined;
//     properties!: IdentityResourcePropertyDto[] | undefined;
//
//     constructor(data?: IIdentityResourceWithDetailsDto) {
//         if (data) {
//             for (var property in data) {
//                 if (data.hasOwnProperty(property))
//                     (<any>this)[property] = (<any>data)[property];
//             }
//         }
//     }
//
//     init(_data?: any) {
//         if (_data) {
//             if (_data["extraProperties"]) {
//                 (<any>this).extraProperties = {} as any;
//                 for (let key in _data["extraProperties"]) {
//                     if (_data["extraProperties"].hasOwnProperty(key))
//                         (<any>(<any>this).extraProperties)![key] = _data["extraProperties"][key];
//                 }
//             }
//             this.id = _data["id"];
//             this.name = _data["name"];
//             this.displayName = _data["displayName"];
//             this.description = _data["description"];
//             this.enabled = _data["enabled"];
//             this.required = _data["required"];
//             this.emphasize = _data["emphasize"];
//             this.showInDiscoveryDocument = _data["showInDiscoveryDocument"];
//             if (Array.isArray(_data["userClaims"])) {
//                 this.userClaims = [] as any;
//                 for (let item of _data["userClaims"])
//                     this.userClaims!.push(IdentityResourceClaimDto.fromJS(item));
//             }
//             if (Array.isArray(_data["properties"])) {
//                 this.properties = [] as any;
//                 for (let item of _data["properties"])
//                     this.properties!.push(IdentityResourcePropertyDto.fromJS(item));
//             }
//         }
//     }
//
//     static fromJS(data: any): IdentityResourceWithDetailsDto {
//         data = typeof data === 'object' ? data : {};
//         let result = new IdentityResourceWithDetailsDto();
//         result.init(data);
//         return result;
//     }
//
//     toJSON(data?: any) {
//         data = typeof data === 'object' ? data : {};
//         if (this.extraProperties) {
//             data["extraProperties"] = {};
//             for (let key in this.extraProperties) {
//                 if (this.extraProperties.hasOwnProperty(key))
//                     (<any>data["extraProperties"])[key] = this.extraProperties[key];
//             }
//         }
//         data["id"] = this.id;
//         data["name"] = this.name;
//         data["displayName"] = this.displayName;
//         data["description"] = this.description;
//         data["enabled"] = this.enabled;
//         data["required"] = this.required;
//         data["emphasize"] = this.emphasize;
//         data["showInDiscoveryDocument"] = this.showInDiscoveryDocument;
//         if (Array.isArray(this.userClaims)) {
//             data["userClaims"] = [];
//             for (let item of this.userClaims)
//                 data["userClaims"].push(item.toJSON());
//         }
//         if (Array.isArray(this.properties)) {
//             data["properties"] = [];
//             for (let item of this.properties)
//                 data["properties"].push(item.toJSON());
//         }
//         return data;
//     }
// }
//
// export interface IIdentityResourceWithDetailsDto {
//     extraProperties: { [key: string]: any; } | undefined;
//     id: string;
//     name: string | undefined;
//     displayName: string | undefined;
//     description: string | undefined;
//     enabled: boolean;
//     required: boolean;
//     emphasize: boolean;
//     showInDiscoveryDocument: boolean;
//     userClaims: IdentityResourceClaimDto[] | undefined;
//     properties: IdentityResourcePropertyDto[] | undefined;
// }
//
// export class UpdateIdentityResourceDto implements IUpdateIdentityResourceDto {
//     readonly extraProperties!: { [key: string]: any; } | undefined;
//     name!: string;
//     displayName!: string | undefined;
//     description!: string | undefined;
//     enabled!: boolean;
//     required!: boolean;
//     emphasize!: boolean;
//     showInDiscoveryDocument!: boolean;
//     userClaims!: IdentityResourceClaimDto[] | undefined;
//     properties!: IdentityResourcePropertyDto[] | undefined;
//
//     constructor(data?: IUpdateIdentityResourceDto) {
//         if (data) {
//             for (var property in data) {
//                 if (data.hasOwnProperty(property))
//                     (<any>this)[property] = (<any>data)[property];
//             }
//         }
//     }
//
//     init(_data?: any) {
//         if (_data) {
//             if (_data["extraProperties"]) {
//                 (<any>this).extraProperties = {} as any;
//                 for (let key in _data["extraProperties"]) {
//                     if (_data["extraProperties"].hasOwnProperty(key))
//                         (<any>(<any>this).extraProperties)![key] = _data["extraProperties"][key];
//                 }
//             }
//             this.name = _data["name"];
//             this.displayName = _data["displayName"];
//             this.description = _data["description"];
//             this.enabled = _data["enabled"];
//             this.required = _data["required"];
//             this.emphasize = _data["emphasize"];
//             this.showInDiscoveryDocument = _data["showInDiscoveryDocument"];
//             if (Array.isArray(_data["userClaims"])) {
//                 this.userClaims = [] as any;
//                 for (let item of _data["userClaims"])
//                     this.userClaims!.push(IdentityResourceClaimDto.fromJS(item));
//             }
//             if (Array.isArray(_data["properties"])) {
//                 this.properties = [] as any;
//                 for (let item of _data["properties"])
//                     this.properties!.push(IdentityResourcePropertyDto.fromJS(item));
//             }
//         }
//     }
//
//     static fromJS(data: any): UpdateIdentityResourceDto {
//         data = typeof data === 'object' ? data : {};
//         let result = new UpdateIdentityResourceDto();
//         result.init(data);
//         return result;
//     }
//
//     toJSON(data?: any) {
//         data = typeof data === 'object' ? data : {};
//         if (this.extraProperties) {
//             data["extraProperties"] = {};
//             for (let key in this.extraProperties) {
//                 if (this.extraProperties.hasOwnProperty(key))
//                     (<any>data["extraProperties"])[key] = this.extraProperties[key];
//             }
//         }
//         data["name"] = this.name;
//         data["displayName"] = this.displayName;
//         data["description"] = this.description;
//         data["enabled"] = this.enabled;
//         data["required"] = this.required;
//         data["emphasize"] = this.emphasize;
//         data["showInDiscoveryDocument"] = this.showInDiscoveryDocument;
//         if (Array.isArray(this.userClaims)) {
//             data["userClaims"] = [];
//             for (let item of this.userClaims)
//                 data["userClaims"].push(item.toJSON());
//         }
//         if (Array.isArray(this.properties)) {
//             data["properties"] = [];
//             for (let item of this.properties)
//                 data["properties"].push(item.toJSON());
//         }
//         return data;
//     }
// }
//
// export interface IUpdateIdentityResourceDto {
//     extraProperties: { [key: string]: any; } | undefined;
//     name: string;
//     displayName: string | undefined;
//     description: string | undefined;
//     enabled: boolean;
//     required: boolean;
//     emphasize: boolean;
//     showInDiscoveryDocument: boolean;
//     userClaims: IdentityResourceClaimDto[] | undefined;
//     properties: IdentityResourcePropertyDto[] | undefined;
// }
//
// export class CreateLanguageDto implements ICreateLanguageDto {
//     readonly extraProperties!: { [key: string]: any; } | undefined;
//     displayName!: string | undefined;
//     cultureName!: string | undefined;
//     uiCultureName!: string | undefined;
//     flagIcon!: string | undefined;
//     isEnabled!: boolean;
//
//     constructor(data?: ICreateLanguageDto) {
//         if (data) {
//             for (var property in data) {
//                 if (data.hasOwnProperty(property))
//                     (<any>this)[property] = (<any>data)[property];
//             }
//         }
//     }
//
//     init(_data?: any) {
//         if (_data) {
//             if (_data["extraProperties"]) {
//                 (<any>this).extraProperties = {} as any;
//                 for (let key in _data["extraProperties"]) {
//                     if (_data["extraProperties"].hasOwnProperty(key))
//                         (<any>(<any>this).extraProperties)![key] = _data["extraProperties"][key];
//                 }
//             }
//             this.displayName = _data["displayName"];
//             this.cultureName = _data["cultureName"];
//             this.uiCultureName = _data["uiCultureName"];
//             this.flagIcon = _data["flagIcon"];
//             this.isEnabled = _data["isEnabled"];
//         }
//     }
//
//     static fromJS(data: any): CreateLanguageDto {
//         data = typeof data === 'object' ? data : {};
//         let result = new CreateLanguageDto();
//         result.init(data);
//         return result;
//     }
//
//     toJSON(data?: any) {
//         data = typeof data === 'object' ? data : {};
//         if (this.extraProperties) {
//             data["extraProperties"] = {};
//             for (let key in this.extraProperties) {
//                 if (this.extraProperties.hasOwnProperty(key))
//                     (<any>data["extraProperties"])[key] = this.extraProperties[key];
//             }
//         }
//         data["displayName"] = this.displayName;
//         data["cultureName"] = this.cultureName;
//         data["uiCultureName"] = this.uiCultureName;
//         data["flagIcon"] = this.flagIcon;
//         data["isEnabled"] = this.isEnabled;
//         return data;
//     }
// }
//
// export interface ICreateLanguageDto {
//     extraProperties: { [key: string]: any; } | undefined;
//     displayName: string | undefined;
//     cultureName: string | undefined;
//     uiCultureName: string | undefined;
//     flagIcon: string | undefined;
//     isEnabled: boolean;
// }
//
// export class CultureInfoDto implements ICultureInfoDto {
//     displayName!: string | undefined;
//     name!: string | undefined;
//
//     constructor(data?: ICultureInfoDto) {
//         if (data) {
//             for (var property in data) {
//                 if (data.hasOwnProperty(property))
//                     (<any>this)[property] = (<any>data)[property];
//             }
//         }
//     }
//
//     init(_data?: any) {
//         if (_data) {
//             this.displayName = _data["displayName"];
//             this.name = _data["name"];
//         }
//     }
//
//     static fromJS(data: any): CultureInfoDto {
//         data = typeof data === 'object' ? data : {};
//         let result = new CultureInfoDto();
//         result.init(data);
//         return result;
//     }
//
//     toJSON(data?: any) {
//         data = typeof data === 'object' ? data : {};
//         data["displayName"] = this.displayName;
//         data["name"] = this.name;
//         return data;
//     }
// }
//
// export interface ICultureInfoDto {
//     displayName: string | undefined;
//     name: string | undefined;
// }
//
// export class LanguageDto implements ILanguageDto {
//     readonly extraProperties!: { [key: string]: any; } | undefined;
//     id!: string;
//     creationTime!: DateTime;
//     creatorId!: string | undefined;
//     cultureName!: string | undefined;
//     uiCultureName!: string | undefined;
//     displayName!: string | undefined;
//     flagIcon!: string | undefined;
//     isEnabled!: boolean;
//     isDefaultLanguage!: boolean;
//
//     constructor(data?: ILanguageDto) {
//         if (data) {
//             for (var property in data) {
//                 if (data.hasOwnProperty(property))
//                     (<any>this)[property] = (<any>data)[property];
//             }
//         }
//     }
//
//     init(_data?: any) {
//         if (_data) {
//             if (_data["extraProperties"]) {
//                 (<any>this).extraProperties = {} as any;
//                 for (let key in _data["extraProperties"]) {
//                     if (_data["extraProperties"].hasOwnProperty(key))
//                         (<any>(<any>this).extraProperties)![key] = _data["extraProperties"][key];
//                 }
//             }
//             this.id = _data["id"];
//             this.creationTime = _data["creationTime"] ? DateTime.fromISO(_data["creationTime"].toString()) : <any>undefined;
//             this.creatorId = _data["creatorId"];
//             this.cultureName = _data["cultureName"];
//             this.uiCultureName = _data["uiCultureName"];
//             this.displayName = _data["displayName"];
//             this.flagIcon = _data["flagIcon"];
//             this.isEnabled = _data["isEnabled"];
//             this.isDefaultLanguage = _data["isDefaultLanguage"];
//         }
//     }
//
//     static fromJS(data: any): LanguageDto {
//         data = typeof data === 'object' ? data : {};
//         let result = new LanguageDto();
//         result.init(data);
//         return result;
//     }
//
//     toJSON(data?: any) {
//         data = typeof data === 'object' ? data : {};
//         if (this.extraProperties) {
//             data["extraProperties"] = {};
//             for (let key in this.extraProperties) {
//                 if (this.extraProperties.hasOwnProperty(key))
//                     (<any>data["extraProperties"])[key] = this.extraProperties[key];
//             }
//         }
//         data["id"] = this.id;
//         data["creationTime"] = this.creationTime ? this.creationTime.toString() : <any>undefined;
//         data["creatorId"] = this.creatorId;
//         data["cultureName"] = this.cultureName;
//         data["uiCultureName"] = this.uiCultureName;
//         data["displayName"] = this.displayName;
//         data["flagIcon"] = this.flagIcon;
//         data["isEnabled"] = this.isEnabled;
//         data["isDefaultLanguage"] = this.isDefaultLanguage;
//         return data;
//     }
// }
//
// export interface ILanguageDto {
//     extraProperties: { [key: string]: any; } | undefined;
//     id: string;
//     creationTime: DateTime;
//     creatorId: string | undefined;
//     cultureName: string | undefined;
//     uiCultureName: string | undefined;
//     displayName: string | undefined;
//     flagIcon: string | undefined;
//     isEnabled: boolean;
//     isDefaultLanguage: boolean;
// }
//
// export class LanguageResourceDto implements ILanguageResourceDto {
//     name!: string | undefined;
//
//     constructor(data?: ILanguageResourceDto) {
//         if (data) {
//             for (var property in data) {
//                 if (data.hasOwnProperty(property))
//                     (<any>this)[property] = (<any>data)[property];
//             }
//         }
//     }
//
//     init(_data?: any) {
//         if (_data) {
//             this.name = _data["name"];
//         }
//     }
//
//     static fromJS(data: any): LanguageResourceDto {
//         data = typeof data === 'object' ? data : {};
//         let result = new LanguageResourceDto();
//         result.init(data);
//         return result;
//     }
//
//     toJSON(data?: any) {
//         data = typeof data === 'object' ? data : {};
//         data["name"] = this.name;
//         return data;
//     }
// }
//
// export interface ILanguageResourceDto {
//     name: string | undefined;
// }
//
// export class LanguageTextDto implements ILanguageTextDto {
//     resourceName!: string | undefined;
//     cultureName!: string | undefined;
//     baseCultureName!: string | undefined;
//     baseValue!: string | undefined;
//     name!: string | undefined;
//     value!: string | undefined;
//
//     constructor(data?: ILanguageTextDto) {
//         if (data) {
//             for (var property in data) {
//                 if (data.hasOwnProperty(property))
//                     (<any>this)[property] = (<any>data)[property];
//             }
//         }
//     }
//
//     init(_data?: any) {
//         if (_data) {
//             this.resourceName = _data["resourceName"];
//             this.cultureName = _data["cultureName"];
//             this.baseCultureName = _data["baseCultureName"];
//             this.baseValue = _data["baseValue"];
//             this.name = _data["name"];
//             this.value = _data["value"];
//         }
//     }
//
//     static fromJS(data: any): LanguageTextDto {
//         data = typeof data === 'object' ? data : {};
//         let result = new LanguageTextDto();
//         result.init(data);
//         return result;
//     }
//
//     toJSON(data?: any) {
//         data = typeof data === 'object' ? data : {};
//         data["resourceName"] = this.resourceName;
//         data["cultureName"] = this.cultureName;
//         data["baseCultureName"] = this.baseCultureName;
//         data["baseValue"] = this.baseValue;
//         data["name"] = this.name;
//         data["value"] = this.value;
//         return data;
//     }
// }
//
// export interface ILanguageTextDto {
//     resourceName: string | undefined;
//     cultureName: string | undefined;
//     baseCultureName: string | undefined;
//     baseValue: string | undefined;
//     name: string | undefined;
//     value: string | undefined;
// }
//
// export class UpdateLanguageDto implements IUpdateLanguageDto {
//     readonly extraProperties!: { [key: string]: any; } | undefined;
//     displayName!: string | undefined;
//     flagIcon!: string | undefined;
//     isEnabled!: boolean;
//
//     constructor(data?: IUpdateLanguageDto) {
//         if (data) {
//             for (var property in data) {
//                 if (data.hasOwnProperty(property))
//                     (<any>this)[property] = (<any>data)[property];
//             }
//         }
//     }
//
//     init(_data?: any) {
//         if (_data) {
//             if (_data["extraProperties"]) {
//                 (<any>this).extraProperties = {} as any;
//                 for (let key in _data["extraProperties"]) {
//                     if (_data["extraProperties"].hasOwnProperty(key))
//                         (<any>(<any>this).extraProperties)![key] = _data["extraProperties"][key];
//                 }
//             }
//             this.displayName = _data["displayName"];
//             this.flagIcon = _data["flagIcon"];
//             this.isEnabled = _data["isEnabled"];
//         }
//     }
//
//     static fromJS(data: any): UpdateLanguageDto {
//         data = typeof data === 'object' ? data : {};
//         let result = new UpdateLanguageDto();
//         result.init(data);
//         return result;
//     }
//
//     toJSON(data?: any) {
//         data = typeof data === 'object' ? data : {};
//         if (this.extraProperties) {
//             data["extraProperties"] = {};
//             for (let key in this.extraProperties) {
//                 if (this.extraProperties.hasOwnProperty(key))
//                     (<any>data["extraProperties"])[key] = this.extraProperties[key];
//             }
//         }
//         data["displayName"] = this.displayName;
//         data["flagIcon"] = this.flagIcon;
//         data["isEnabled"] = this.isEnabled;
//         return data;
//     }
// }
//
// export interface IUpdateLanguageDto {
//     extraProperties: { [key: string]: any; } | undefined;
//     displayName: string | undefined;
//     flagIcon: string | undefined;
//     isEnabled: boolean;
// }
//
// export enum LeptonStyle {
//     _0 = 0,
//     _1 = 1,
//     _2 = 2,
//     _3 = 3,
//     _4 = 4,
//     _5 = 5,
// }
//
// export class LeptonThemeSettingsDto implements ILeptonThemeSettingsDto {
//     boxedLayout!: boolean;
//     menuPlacement!: MenuPlacement;
//     menuStatus!: MenuStatus;
//     style!: LeptonStyle;
//     publicLayoutStyle!: LeptonStyle;
//
//     constructor(data?: ILeptonThemeSettingsDto) {
//         if (data) {
//             for (var property in data) {
//                 if (data.hasOwnProperty(property))
//                     (<any>this)[property] = (<any>data)[property];
//             }
//         }
//     }
//
//     init(_data?: any) {
//         if (_data) {
//             this.boxedLayout = _data["boxedLayout"];
//             this.menuPlacement = _data["menuPlacement"];
//             this.menuStatus = _data["menuStatus"];
//             this.style = _data["style"];
//             this.publicLayoutStyle = _data["publicLayoutStyle"];
//         }
//     }
//
//     static fromJS(data: any): LeptonThemeSettingsDto {
//         data = typeof data === 'object' ? data : {};
//         let result = new LeptonThemeSettingsDto();
//         result.init(data);
//         return result;
//     }
//
//     toJSON(data?: any) {
//         data = typeof data === 'object' ? data : {};
//         data["boxedLayout"] = this.boxedLayout;
//         data["menuPlacement"] = this.menuPlacement;
//         data["menuStatus"] = this.menuStatus;
//         data["style"] = this.style;
//         data["publicLayoutStyle"] = this.publicLayoutStyle;
//         return data;
//     }
// }
//
// export interface ILeptonThemeSettingsDto {
//     boxedLayout: boolean;
//     menuPlacement: MenuPlacement;
//     menuStatus: MenuStatus;
//     style: LeptonStyle;
//     publicLayoutStyle: LeptonStyle;
// }
//
// export enum MenuPlacement {
//     _0 = 0,
//     _1 = 1,
// }
//
// export enum MenuStatus {
//     _0 = 0,
//     _1 = 1,
// }
//
// export class UpdateLeptonThemeSettingsDto implements IUpdateLeptonThemeSettingsDto {
//     boxedLayout!: boolean;
//     menuPlacement!: MenuPlacement;
//     menuStatus!: MenuStatus;
//     style!: LeptonStyle;
//     publicLayoutStyle!: LeptonStyle;
//
//     constructor(data?: IUpdateLeptonThemeSettingsDto) {
//         if (data) {
//             for (var property in data) {
//                 if (data.hasOwnProperty(property))
//                     (<any>this)[property] = (<any>data)[property];
//             }
//         }
//     }
//
//     init(_data?: any) {
//         if (_data) {
//             this.boxedLayout = _data["boxedLayout"];
//             this.menuPlacement = _data["menuPlacement"];
//             this.menuStatus = _data["menuStatus"];
//             this.style = _data["style"];
//             this.publicLayoutStyle = _data["publicLayoutStyle"];
//         }
//     }
//
//     static fromJS(data: any): UpdateLeptonThemeSettingsDto {
//         data = typeof data === 'object' ? data : {};
//         let result = new UpdateLeptonThemeSettingsDto();
//         result.init(data);
//         return result;
//     }
//
//     toJSON(data?: any) {
//         data = typeof data === 'object' ? data : {};
//         data["boxedLayout"] = this.boxedLayout;
//         data["menuPlacement"] = this.menuPlacement;
//         data["menuStatus"] = this.menuStatus;
//         data["style"] = this.style;
//         data["publicLayoutStyle"] = this.publicLayoutStyle;
//         return data;
//     }
// }
//
// export interface IUpdateLeptonThemeSettingsDto {
//     boxedLayout: boolean;
//     menuPlacement: MenuPlacement;
//     menuStatus: MenuStatus;
//     style: LeptonStyle;
//     publicLayoutStyle: LeptonStyle;
// }
//
// export class LanguageInfo implements ILanguageInfo {
//     readonly cultureName!: string | undefined;
//     readonly uiCultureName!: string | undefined;
//     readonly displayName!: string | undefined;
//     flagIcon!: string | undefined;
//
//     constructor(data?: ILanguageInfo) {
//         if (data) {
//             for (var property in data) {
//                 if (data.hasOwnProperty(property))
//                     (<any>this)[property] = (<any>data)[property];
//             }
//         }
//     }
//
//     init(_data?: any) {
//         if (_data) {
//             (<any>this).cultureName = _data["cultureName"];
//             (<any>this).uiCultureName = _data["uiCultureName"];
//             (<any>this).displayName = _data["displayName"];
//             this.flagIcon = _data["flagIcon"];
//         }
//     }
//
//     static fromJS(data: any): LanguageInfo {
//         data = typeof data === 'object' ? data : {};
//         let result = new LanguageInfo();
//         result.init(data);
//         return result;
//     }
//
//     toJSON(data?: any) {
//         data = typeof data === 'object' ? data : {};
//         data["cultureName"] = this.cultureName;
//         data["uiCultureName"] = this.uiCultureName;
//         data["displayName"] = this.displayName;
//         data["flagIcon"] = this.flagIcon;
//         return data;
//     }
// }
//
// export interface ILanguageInfo {
//     cultureName: string | undefined;
//     uiCultureName: string | undefined;
//     displayName: string | undefined;
//     flagIcon: string | undefined;
// }
//
// export class NameValue implements INameValue {
//     name!: string | undefined;
//     value!: string | undefined;
//
//     constructor(data?: INameValue) {
//         if (data) {
//             for (var property in data) {
//                 if (data.hasOwnProperty(property))
//                     (<any>this)[property] = (<any>data)[property];
//             }
//         }
//     }
//
//     init(_data?: any) {
//         if (_data) {
//             this.name = _data["name"];
//             this.value = _data["value"];
//         }
//     }
//
//     static fromJS(data: any): NameValue {
//         data = typeof data === 'object' ? data : {};
//         let result = new NameValue();
//         result.init(data);
//         return result;
//     }
//
//     toJSON(data?: any) {
//         data = typeof data === 'object' ? data : {};
//         data["name"] = this.name;
//         data["value"] = this.value;
//         return data;
//     }
// }
//
// export interface INameValue {
//     name: string | undefined;
//     value: string | undefined;
// }
//
// export class GetPermissionListResultDto implements IGetPermissionListResultDto {
//     entityDisplayName!: string | undefined;
//     groups!: PermissionGroupDto[] | undefined;
//
//     constructor(data?: IGetPermissionListResultDto) {
//         if (data) {
//             for (var property in data) {
//                 if (data.hasOwnProperty(property))
//                     (<any>this)[property] = (<any>data)[property];
//             }
//         }
//     }
//
//     init(_data?: any) {
//         if (_data) {
//             this.entityDisplayName = _data["entityDisplayName"];
//             if (Array.isArray(_data["groups"])) {
//                 this.groups = [] as any;
//                 for (let item of _data["groups"])
//                     this.groups!.push(PermissionGroupDto.fromJS(item));
//             }
//         }
//     }
//
//     static fromJS(data: any): GetPermissionListResultDto {
//         data = typeof data === 'object' ? data : {};
//         let result = new GetPermissionListResultDto();
//         result.init(data);
//         return result;
//     }
//
//     toJSON(data?: any) {
//         data = typeof data === 'object' ? data : {};
//         data["entityDisplayName"] = this.entityDisplayName;
//         if (Array.isArray(this.groups)) {
//             data["groups"] = [];
//             for (let item of this.groups)
//                 data["groups"].push(item.toJSON());
//         }
//         return data;
//     }
// }
//
// export interface IGetPermissionListResultDto {
//     entityDisplayName: string | undefined;
//     groups: PermissionGroupDto[] | undefined;
// }
//
// export class PermissionGrantInfoDto implements IPermissionGrantInfoDto {
//     name!: string | undefined;
//     displayName!: string | undefined;
//     parentName!: string | undefined;
//     isGranted!: boolean;
//     allowedProviders!: string[] | undefined;
//     grantedProviders!: ProviderInfoDto[] | undefined;
//
//     constructor(data?: IPermissionGrantInfoDto) {
//         if (data) {
//             for (var property in data) {
//                 if (data.hasOwnProperty(property))
//                     (<any>this)[property] = (<any>data)[property];
//             }
//         }
//     }
//
//     init(_data?: any) {
//         if (_data) {
//             this.name = _data["name"];
//             this.displayName = _data["displayName"];
//             this.parentName = _data["parentName"];
//             this.isGranted = _data["isGranted"];
//             if (Array.isArray(_data["allowedProviders"])) {
//                 this.allowedProviders = [] as any;
//                 for (let item of _data["allowedProviders"])
//                     this.allowedProviders!.push(item);
//             }
//             if (Array.isArray(_data["grantedProviders"])) {
//                 this.grantedProviders = [] as any;
//                 for (let item of _data["grantedProviders"])
//                     this.grantedProviders!.push(ProviderInfoDto.fromJS(item));
//             }
//         }
//     }
//
//     static fromJS(data: any): PermissionGrantInfoDto {
//         data = typeof data === 'object' ? data : {};
//         let result = new PermissionGrantInfoDto();
//         result.init(data);
//         return result;
//     }
//
//     toJSON(data?: any) {
//         data = typeof data === 'object' ? data : {};
//         data["name"] = this.name;
//         data["displayName"] = this.displayName;
//         data["parentName"] = this.parentName;
//         data["isGranted"] = this.isGranted;
//         if (Array.isArray(this.allowedProviders)) {
//             data["allowedProviders"] = [];
//             for (let item of this.allowedProviders)
//                 data["allowedProviders"].push(item);
//         }
//         if (Array.isArray(this.grantedProviders)) {
//             data["grantedProviders"] = [];
//             for (let item of this.grantedProviders)
//                 data["grantedProviders"].push(item.toJSON());
//         }
//         return data;
//     }
// }
//
// export interface IPermissionGrantInfoDto {
//     name: string | undefined;
//     displayName: string | undefined;
//     parentName: string | undefined;
//     isGranted: boolean;
//     allowedProviders: string[] | undefined;
//     grantedProviders: ProviderInfoDto[] | undefined;
// }
//
// export class PermissionGroupDto implements IPermissionGroupDto {
//     name!: string | undefined;
//     displayName!: string | undefined;
//     permissions!: PermissionGrantInfoDto[] | undefined;
//
//     constructor(data?: IPermissionGroupDto) {
//         if (data) {
//             for (var property in data) {
//                 if (data.hasOwnProperty(property))
//                     (<any>this)[property] = (<any>data)[property];
//             }
//         }
//     }
//
//     init(_data?: any) {
//         if (_data) {
//             this.name = _data["name"];
//             this.displayName = _data["displayName"];
//             if (Array.isArray(_data["permissions"])) {
//                 this.permissions = [] as any;
//                 for (let item of _data["permissions"])
//                     this.permissions!.push(PermissionGrantInfoDto.fromJS(item));
//             }
//         }
//     }
//
//     static fromJS(data: any): PermissionGroupDto {
//         data = typeof data === 'object' ? data : {};
//         let result = new PermissionGroupDto();
//         result.init(data);
//         return result;
//     }
//
//     toJSON(data?: any) {
//         data = typeof data === 'object' ? data : {};
//         data["name"] = this.name;
//         data["displayName"] = this.displayName;
//         if (Array.isArray(this.permissions)) {
//             data["permissions"] = [];
//             for (let item of this.permissions)
//                 data["permissions"].push(item.toJSON());
//         }
//         return data;
//     }
// }
//
// export interface IPermissionGroupDto {
//     name: string | undefined;
//     displayName: string | undefined;
//     permissions: PermissionGrantInfoDto[] | undefined;
// }
//
// export class ProviderInfoDto implements IProviderInfoDto {
//     providerName!: string | undefined;
//     providerKey!: string | undefined;
//
//     constructor(data?: IProviderInfoDto) {
//         if (data) {
//             for (var property in data) {
//                 if (data.hasOwnProperty(property))
//                     (<any>this)[property] = (<any>data)[property];
//             }
//         }
//     }
//
//     init(_data?: any) {
//         if (_data) {
//             this.providerName = _data["providerName"];
//             this.providerKey = _data["providerKey"];
//         }
//     }
//
//     static fromJS(data: any): ProviderInfoDto {
//         data = typeof data === 'object' ? data : {};
//         let result = new ProviderInfoDto();
//         result.init(data);
//         return result;
//     }
//
//     toJSON(data?: any) {
//         data = typeof data === 'object' ? data : {};
//         data["providerName"] = this.providerName;
//         data["providerKey"] = this.providerKey;
//         return data;
//     }
// }
//
// export interface IProviderInfoDto {
//     providerName: string | undefined;
//     providerKey: string | undefined;
// }
//
// export class UpdatePermissionDto implements IUpdatePermissionDto {
//     name!: string | undefined;
//     isGranted!: boolean;
//
//     constructor(data?: IUpdatePermissionDto) {
//         if (data) {
//             for (var property in data) {
//                 if (data.hasOwnProperty(property))
//                     (<any>this)[property] = (<any>data)[property];
//             }
//         }
//     }
//
//     init(_data?: any) {
//         if (_data) {
//             this.name = _data["name"];
//             this.isGranted = _data["isGranted"];
//         }
//     }
//
//     static fromJS(data: any): UpdatePermissionDto {
//         data = typeof data === 'object' ? data : {};
//         let result = new UpdatePermissionDto();
//         result.init(data);
//         return result;
//     }
//
//     toJSON(data?: any) {
//         data = typeof data === 'object' ? data : {};
//         data["name"] = this.name;
//         data["isGranted"] = this.isGranted;
//         return data;
//     }
// }
//
// export interface IUpdatePermissionDto {
//     name: string | undefined;
//     isGranted: boolean;
// }
//
// export class UpdatePermissionsDto implements IUpdatePermissionsDto {
//     permissions!: UpdatePermissionDto[] | undefined;
//
//     constructor(data?: IUpdatePermissionsDto) {
//         if (data) {
//             for (var property in data) {
//                 if (data.hasOwnProperty(property))
//                     (<any>this)[property] = (<any>data)[property];
//             }
//         }
//     }
//
//     init(_data?: any) {
//         if (_data) {
//             if (Array.isArray(_data["permissions"])) {
//                 this.permissions = [] as any;
//                 for (let item of _data["permissions"])
//                     this.permissions!.push(UpdatePermissionDto.fromJS(item));
//             }
//         }
//     }
//
//     static fromJS(data: any): UpdatePermissionsDto {
//         data = typeof data === 'object' ? data : {};
//         let result = new UpdatePermissionsDto();
//         result.init(data);
//         return result;
//     }
//
//     toJSON(data?: any) {
//         data = typeof data === 'object' ? data : {};
//         if (Array.isArray(this.permissions)) {
//             data["permissions"] = [];
//             for (let item of this.permissions)
//                 data["permissions"].push(item.toJSON());
//         }
//         return data;
//     }
// }
//
// export interface IUpdatePermissionsDto {
//     permissions: UpdatePermissionDto[] | undefined;
// }
//
// export class EmailSettingsDto implements IEmailSettingsDto {
//     smtpHost!: string | undefined;
//     smtpPort!: number;
//     smtpUserName!: string | undefined;
//     smtpPassword!: string | undefined;
//     smtpDomain!: string | undefined;
//     smtpEnableSsl!: boolean;
//     smtpUseDefaultCredentials!: boolean;
//     defaultFromAddress!: string | undefined;
//     defaultFromDisplayName!: string | undefined;
//
//     constructor(data?: IEmailSettingsDto) {
//         if (data) {
//             for (var property in data) {
//                 if (data.hasOwnProperty(property))
//                     (<any>this)[property] = (<any>data)[property];
//             }
//         }
//     }
//
//     init(_data?: any) {
//         if (_data) {
//             this.smtpHost = _data["smtpHost"];
//             this.smtpPort = _data["smtpPort"];
//             this.smtpUserName = _data["smtpUserName"];
//             this.smtpPassword = _data["smtpPassword"];
//             this.smtpDomain = _data["smtpDomain"];
//             this.smtpEnableSsl = _data["smtpEnableSsl"];
//             this.smtpUseDefaultCredentials = _data["smtpUseDefaultCredentials"];
//             this.defaultFromAddress = _data["defaultFromAddress"];
//             this.defaultFromDisplayName = _data["defaultFromDisplayName"];
//         }
//     }
//
//     static fromJS(data: any): EmailSettingsDto {
//         data = typeof data === 'object' ? data : {};
//         let result = new EmailSettingsDto();
//         result.init(data);
//         return result;
//     }
//
//     toJSON(data?: any) {
//         data = typeof data === 'object' ? data : {};
//         data["smtpHost"] = this.smtpHost;
//         data["smtpPort"] = this.smtpPort;
//         data["smtpUserName"] = this.smtpUserName;
//         data["smtpPassword"] = this.smtpPassword;
//         data["smtpDomain"] = this.smtpDomain;
//         data["smtpEnableSsl"] = this.smtpEnableSsl;
//         data["smtpUseDefaultCredentials"] = this.smtpUseDefaultCredentials;
//         data["defaultFromAddress"] = this.defaultFromAddress;
//         data["defaultFromDisplayName"] = this.defaultFromDisplayName;
//         return data;
//     }
// }
//
// export interface IEmailSettingsDto {
//     smtpHost: string | undefined;
//     smtpPort: number;
//     smtpUserName: string | undefined;
//     smtpPassword: string | undefined;
//     smtpDomain: string | undefined;
//     smtpEnableSsl: boolean;
//     smtpUseDefaultCredentials: boolean;
//     defaultFromAddress: string | undefined;
//     defaultFromDisplayName: string | undefined;
// }
//
// export class UpdateEmailSettingsDto implements IUpdateEmailSettingsDto {
//     smtpHost!: string | undefined;
//     smtpPort!: number;
//     smtpUserName!: string | undefined;
//     smtpPassword!: string | undefined;
//     smtpDomain!: string | undefined;
//     smtpEnableSsl!: boolean;
//     smtpUseDefaultCredentials!: boolean;
//     defaultFromAddress!: string;
//     defaultFromDisplayName!: string;
//
//     constructor(data?: IUpdateEmailSettingsDto) {
//         if (data) {
//             for (var property in data) {
//                 if (data.hasOwnProperty(property))
//                     (<any>this)[property] = (<any>data)[property];
//             }
//         }
//     }
//
//     init(_data?: any) {
//         if (_data) {
//             this.smtpHost = _data["smtpHost"];
//             this.smtpPort = _data["smtpPort"];
//             this.smtpUserName = _data["smtpUserName"];
//             this.smtpPassword = _data["smtpPassword"];
//             this.smtpDomain = _data["smtpDomain"];
//             this.smtpEnableSsl = _data["smtpEnableSsl"];
//             this.smtpUseDefaultCredentials = _data["smtpUseDefaultCredentials"];
//             this.defaultFromAddress = _data["defaultFromAddress"];
//             this.defaultFromDisplayName = _data["defaultFromDisplayName"];
//         }
//     }
//
//     static fromJS(data: any): UpdateEmailSettingsDto {
//         data = typeof data === 'object' ? data : {};
//         let result = new UpdateEmailSettingsDto();
//         result.init(data);
//         return result;
//     }
//
//     toJSON(data?: any) {
//         data = typeof data === 'object' ? data : {};
//         data["smtpHost"] = this.smtpHost;
//         data["smtpPort"] = this.smtpPort;
//         data["smtpUserName"] = this.smtpUserName;
//         data["smtpPassword"] = this.smtpPassword;
//         data["smtpDomain"] = this.smtpDomain;
//         data["smtpEnableSsl"] = this.smtpEnableSsl;
//         data["smtpUseDefaultCredentials"] = this.smtpUseDefaultCredentials;
//         data["defaultFromAddress"] = this.defaultFromAddress;
//         data["defaultFromDisplayName"] = this.defaultFromDisplayName;
//         return data;
//     }
// }
//
// export interface IUpdateEmailSettingsDto {
//     smtpHost: string | undefined;
//     smtpPort: number;
//     smtpUserName: string | undefined;
//     smtpPassword: string | undefined;
//     smtpDomain: string | undefined;
//     smtpEnableSsl: boolean;
//     smtpUseDefaultCredentials: boolean;
//     defaultFromAddress: string;
//     defaultFromDisplayName: string;
// }
//
// export class RestoreTemplateContentInput implements IRestoreTemplateContentInput {
//     templateName!: string;
//     cultureName!: string | undefined;
//
//     constructor(data?: IRestoreTemplateContentInput) {
//         if (data) {
//             for (var property in data) {
//                 if (data.hasOwnProperty(property))
//                     (<any>this)[property] = (<any>data)[property];
//             }
//         }
//     }
//
//     init(_data?: any) {
//         if (_data) {
//             this.templateName = _data["templateName"];
//             this.cultureName = _data["cultureName"];
//         }
//     }
//
//     static fromJS(data: any): RestoreTemplateContentInput {
//         data = typeof data === 'object' ? data : {};
//         let result = new RestoreTemplateContentInput();
//         result.init(data);
//         return result;
//     }
//
//     toJSON(data?: any) {
//         data = typeof data === 'object' ? data : {};
//         data["templateName"] = this.templateName;
//         data["cultureName"] = this.cultureName;
//         return data;
//     }
// }
//
// export interface IRestoreTemplateContentInput {
//     templateName: string;
//     cultureName: string | undefined;
// }
//
// export class TemplateDefinitionDto implements ITemplateDefinitionDto {
//     name!: string | undefined;
//     displayName!: string | undefined;
//     isLayout!: boolean;
//     layout!: string | undefined;
//     isInlineLocalized!: boolean;
//     defaultCultureName!: string | undefined;
//
//     constructor(data?: ITemplateDefinitionDto) {
//         if (data) {
//             for (var property in data) {
//                 if (data.hasOwnProperty(property))
//                     (<any>this)[property] = (<any>data)[property];
//             }
//         }
//     }
//
//     init(_data?: any) {
//         if (_data) {
//             this.name = _data["name"];
//             this.displayName = _data["displayName"];
//             this.isLayout = _data["isLayout"];
//             this.layout = _data["layout"];
//             this.isInlineLocalized = _data["isInlineLocalized"];
//             this.defaultCultureName = _data["defaultCultureName"];
//         }
//     }
//
//     static fromJS(data: any): TemplateDefinitionDto {
//         data = typeof data === 'object' ? data : {};
//         let result = new TemplateDefinitionDto();
//         result.init(data);
//         return result;
//     }
//
//     toJSON(data?: any) {
//         data = typeof data === 'object' ? data : {};
//         data["name"] = this.name;
//         data["displayName"] = this.displayName;
//         data["isLayout"] = this.isLayout;
//         data["layout"] = this.layout;
//         data["isInlineLocalized"] = this.isInlineLocalized;
//         data["defaultCultureName"] = this.defaultCultureName;
//         return data;
//     }
// }
//
// export interface ITemplateDefinitionDto {
//     name: string | undefined;
//     displayName: string | undefined;
//     isLayout: boolean;
//     layout: string | undefined;
//     isInlineLocalized: boolean;
//     defaultCultureName: string | undefined;
// }
//
// export class TextTemplateContentDto implements ITextTemplateContentDto {
//     name!: string | undefined;
//     cultureName!: string | undefined;
//     content!: string | undefined;
//
//     constructor(data?: ITextTemplateContentDto) {
//         if (data) {
//             for (var property in data) {
//                 if (data.hasOwnProperty(property))
//                     (<any>this)[property] = (<any>data)[property];
//             }
//         }
//     }
//
//     init(_data?: any) {
//         if (_data) {
//             this.name = _data["name"];
//             this.cultureName = _data["cultureName"];
//             this.content = _data["content"];
//         }
//     }
//
//     static fromJS(data: any): TextTemplateContentDto {
//         data = typeof data === 'object' ? data : {};
//         let result = new TextTemplateContentDto();
//         result.init(data);
//         return result;
//     }
//
//     toJSON(data?: any) {
//         data = typeof data === 'object' ? data : {};
//         data["name"] = this.name;
//         data["cultureName"] = this.cultureName;
//         data["content"] = this.content;
//         return data;
//     }
// }
//
// export interface ITextTemplateContentDto {
//     name: string | undefined;
//     cultureName: string | undefined;
//     content: string | undefined;
// }
//
// export class UpdateTemplateContentInput implements IUpdateTemplateContentInput {
//     templateName!: string;
//     cultureName!: string | undefined;
//     content!: string | undefined;
//
//     constructor(data?: IUpdateTemplateContentInput) {
//         if (data) {
//             for (var property in data) {
//                 if (data.hasOwnProperty(property))
//                     (<any>this)[property] = (<any>data)[property];
//             }
//         }
//     }
//
//     init(_data?: any) {
//         if (_data) {
//             this.templateName = _data["templateName"];
//             this.cultureName = _data["cultureName"];
//             this.content = _data["content"];
//         }
//     }
//
//     static fromJS(data: any): UpdateTemplateContentInput {
//         data = typeof data === 'object' ? data : {};
//         let result = new UpdateTemplateContentInput();
//         result.init(data);
//         return result;
//     }
//
//     toJSON(data?: any) {
//         data = typeof data === 'object' ? data : {};
//         data["templateName"] = this.templateName;
//         data["cultureName"] = this.cultureName;
//         data["content"] = this.content;
//         return data;
//     }
// }
//
// export interface IUpdateTemplateContentInput {
//     templateName: string;
//     cultureName: string | undefined;
//     content: string | undefined;
// }
//
// export class UserData implements IUserData {
//     id!: string;
//     tenantId!: string | undefined;
//     userName!: string | undefined;
//     name!: string | undefined;
//     surname!: string | undefined;
//     email!: string | undefined;
//     emailConfirmed!: boolean;
//     phoneNumber!: string | undefined;
//     phoneNumberConfirmed!: boolean;
//
//     constructor(data?: IUserData) {
//         if (data) {
//             for (var property in data) {
//                 if (data.hasOwnProperty(property))
//                     (<any>this)[property] = (<any>data)[property];
//             }
//         }
//     }
//
//     init(_data?: any) {
//         if (_data) {
//             this.id = _data["id"];
//             this.tenantId = _data["tenantId"];
//             this.userName = _data["userName"];
//             this.name = _data["name"];
//             this.surname = _data["surname"];
//             this.email = _data["email"];
//             this.emailConfirmed = _data["emailConfirmed"];
//             this.phoneNumber = _data["phoneNumber"];
//             this.phoneNumberConfirmed = _data["phoneNumberConfirmed"];
//         }
//     }
//
//     static fromJS(data: any): UserData {
//         data = typeof data === 'object' ? data : {};
//         let result = new UserData();
//         result.init(data);
//         return result;
//     }
//
//     toJSON(data?: any) {
//         data = typeof data === 'object' ? data : {};
//         data["id"] = this.id;
//         data["tenantId"] = this.tenantId;
//         data["userName"] = this.userName;
//         data["name"] = this.name;
//         data["surname"] = this.surname;
//         data["email"] = this.email;
//         data["emailConfirmed"] = this.emailConfirmed;
//         data["phoneNumber"] = this.phoneNumber;
//         data["phoneNumberConfirmed"] = this.phoneNumberConfirmed;
//         return data;
//     }
// }
//
// export interface IUserData {
//     id: string;
//     tenantId: string | undefined;
//     userName: string | undefined;
//     name: string | undefined;
//     surname: string | undefined;
//     email: string | undefined;
//     emailConfirmed: boolean;
//     phoneNumber: string | undefined;
//     phoneNumberConfirmed: boolean;
// }
//
// export class IStringValueType implements IIStringValueType {
//     readonly name!: string | undefined;
//     readonly properties!: { [key: string]: any; } | undefined;
//     validator!: IValueValidator;
//
//     constructor(data?: IIStringValueType) {
//         if (data) {
//             for (var property in data) {
//                 if (data.hasOwnProperty(property))
//                     (<any>this)[property] = (<any>data)[property];
//             }
//         }
//     }
//
//     init(_data?: any) {
//         if (_data) {
//             (<any>this).name = _data["name"];
//             if (_data["properties"]) {
//                 (<any>this).properties = {} as any;
//                 for (let key in _data["properties"]) {
//                     if (_data["properties"].hasOwnProperty(key))
//                         (<any>(<any>this).properties)![key] = _data["properties"][key];
//                 }
//             }
//             this.validator = _data["validator"] ? IValueValidator.fromJS(_data["validator"]) : <any>undefined;
//         }
//     }
//
//     static fromJS(data: any): IStringValueType {
//         data = typeof data === 'object' ? data : {};
//         let result = new IStringValueType();
//         result.init(data);
//         return result;
//     }
//
//     toJSON(data?: any) {
//         data = typeof data === 'object' ? data : {};
//         data["name"] = this.name;
//         if (this.properties) {
//             data["properties"] = {};
//             for (let key in this.properties) {
//                 if (this.properties.hasOwnProperty(key))
//                     (<any>data["properties"])[key] = this.properties[key];
//             }
//         }
//         data["validator"] = this.validator ? this.validator.toJSON() : <any>undefined;
//         return data;
//     }
// }
//
// export interface IIStringValueType {
//     name: string | undefined;
//     properties: { [key: string]: any; } | undefined;
//     validator: IValueValidator;
// }
//
// export class IValueValidator implements IIValueValidator {
//     readonly name!: string | undefined;
//     readonly properties!: { [key: string]: any; } | undefined;
//
//     constructor(data?: IIValueValidator) {
//         if (data) {
//             for (var property in data) {
//                 if (data.hasOwnProperty(property))
//                     (<any>this)[property] = (<any>data)[property];
//             }
//         }
//     }
//
//     init(_data?: any) {
//         if (_data) {
//             (<any>this).name = _data["name"];
//             if (_data["properties"]) {
//                 (<any>this).properties = {} as any;
//                 for (let key in _data["properties"]) {
//                     if (_data["properties"].hasOwnProperty(key))
//                         (<any>(<any>this).properties)![key] = _data["properties"][key];
//                 }
//             }
//         }
//     }
//
//     static fromJS(data: any): IValueValidator {
//         data = typeof data === 'object' ? data : {};
//         let result = new IValueValidator();
//         result.init(data);
//         return result;
//     }
//
//     toJSON(data?: any) {
//         data = typeof data === 'object' ? data : {};
//         data["name"] = this.name;
//         if (this.properties) {
//             data["properties"] = {};
//             for (let key in this.properties) {
//                 if (this.properties.hasOwnProperty(key))
//                     (<any>data["properties"])[key] = this.properties[key];
//             }
//         }
//         return data;
//     }
// }
//
// export interface IIValueValidator {
//     name: string | undefined;
//     properties: { [key: string]: any; } | undefined;
// }
//
// export class CreateDirectoryInput implements ICreateDirectoryInput {
//     parentId!: string | undefined;
//     name!: string;
//
//     constructor(data?: ICreateDirectoryInput) {
//         if (data) {
//             for (var property in data) {
//                 if (data.hasOwnProperty(property))
//                     (<any>this)[property] = (<any>data)[property];
//             }
//         }
//     }
//
//     init(_data?: any) {
//         if (_data) {
//             this.parentId = _data["parentId"];
//             this.name = _data["name"];
//         }
//     }
//
//     static fromJS(data: any): CreateDirectoryInput {
//         data = typeof data === 'object' ? data : {};
//         let result = new CreateDirectoryInput();
//         result.init(data);
//         return result;
//     }
//
//     toJSON(data?: any) {
//         data = typeof data === 'object' ? data : {};
//         data["parentId"] = this.parentId;
//         data["name"] = this.name;
//         return data;
//     }
// }
//
// export interface ICreateDirectoryInput {
//     parentId: string | undefined;
//     name: string;
// }
//
// export class DirectoryContentDto implements IDirectoryContentDto {
//     name!: string | undefined;
//     isDirectory!: boolean;
//     id!: string;
//     size!: number;
//     iconInfo!: FileIconInfo;
//
//     constructor(data?: IDirectoryContentDto) {
//         if (data) {
//             for (var property in data) {
//                 if (data.hasOwnProperty(property))
//                     (<any>this)[property] = (<any>data)[property];
//             }
//         }
//     }
//
//     init(_data?: any) {
//         if (_data) {
//             this.name = _data["name"];
//             this.isDirectory = _data["isDirectory"];
//             this.id = _data["id"];
//             this.size = _data["size"];
//             this.iconInfo = _data["iconInfo"] ? FileIconInfo.fromJS(_data["iconInfo"]) : <any>undefined;
//         }
//     }
//
//     static fromJS(data: any): DirectoryContentDto {
//         data = typeof data === 'object' ? data : {};
//         let result = new DirectoryContentDto();
//         result.init(data);
//         return result;
//     }
//
//     toJSON(data?: any) {
//         data = typeof data === 'object' ? data : {};
//         data["name"] = this.name;
//         data["isDirectory"] = this.isDirectory;
//         data["id"] = this.id;
//         data["size"] = this.size;
//         data["iconInfo"] = this.iconInfo ? this.iconInfo.toJSON() : <any>undefined;
//         return data;
//     }
// }
//
// export interface IDirectoryContentDto {
//     name: string | undefined;
//     isDirectory: boolean;
//     id: string;
//     size: number;
//     iconInfo: FileIconInfo;
// }
//
// export class DirectoryDescriptorDto implements IDirectoryDescriptorDto {
//     id!: string;
//     creationTime!: DateTime;
//     creatorId!: string | undefined;
//     lastModificationTime!: DateTime | undefined;
//     lastModifierId!: string | undefined;
//     name!: string | undefined;
//     parentId!: string | undefined;
//
//     constructor(data?: IDirectoryDescriptorDto) {
//         if (data) {
//             for (var property in data) {
//                 if (data.hasOwnProperty(property))
//                     (<any>this)[property] = (<any>data)[property];
//             }
//         }
//     }
//
//     init(_data?: any) {
//         if (_data) {
//             this.id = _data["id"];
//             this.creationTime = _data["creationTime"] ? DateTime.fromISO(_data["creationTime"].toString()) : <any>undefined;
//             this.creatorId = _data["creatorId"];
//             this.lastModificationTime = _data["lastModificationTime"] ? DateTime.fromISO(_data["lastModificationTime"].toString()) : <any>undefined;
//             this.lastModifierId = _data["lastModifierId"];
//             this.name = _data["name"];
//             this.parentId = _data["parentId"];
//         }
//     }
//
//     static fromJS(data: any): DirectoryDescriptorDto {
//         data = typeof data === 'object' ? data : {};
//         let result = new DirectoryDescriptorDto();
//         result.init(data);
//         return result;
//     }
//
//     toJSON(data?: any) {
//         data = typeof data === 'object' ? data : {};
//         data["id"] = this.id;
//         data["creationTime"] = this.creationTime ? this.creationTime.toString() : <any>undefined;
//         data["creatorId"] = this.creatorId;
//         data["lastModificationTime"] = this.lastModificationTime ? this.lastModificationTime.toString() : <any>undefined;
//         data["lastModifierId"] = this.lastModifierId;
//         data["name"] = this.name;
//         data["parentId"] = this.parentId;
//         return data;
//     }
// }
//
// export interface IDirectoryDescriptorDto {
//     id: string;
//     creationTime: DateTime;
//     creatorId: string | undefined;
//     lastModificationTime: DateTime | undefined;
//     lastModifierId: string | undefined;
//     name: string | undefined;
//     parentId: string | undefined;
// }
//
// export class DirectoryDescriptorInfoDto implements IDirectoryDescriptorInfoDto {
//     id!: string;
//     name!: string | undefined;
//     parentId!: string | undefined;
//     hasChildren!: boolean;
//
//     constructor(data?: IDirectoryDescriptorInfoDto) {
//         if (data) {
//             for (var property in data) {
//                 if (data.hasOwnProperty(property))
//                     (<any>this)[property] = (<any>data)[property];
//             }
//         }
//     }
//
//     init(_data?: any) {
//         if (_data) {
//             this.id = _data["id"];
//             this.name = _data["name"];
//             this.parentId = _data["parentId"];
//             this.hasChildren = _data["hasChildren"];
//         }
//     }
//
//     static fromJS(data: any): DirectoryDescriptorInfoDto {
//         data = typeof data === 'object' ? data : {};
//         let result = new DirectoryDescriptorInfoDto();
//         result.init(data);
//         return result;
//     }
//
//     toJSON(data?: any) {
//         data = typeof data === 'object' ? data : {};
//         data["id"] = this.id;
//         data["name"] = this.name;
//         data["parentId"] = this.parentId;
//         data["hasChildren"] = this.hasChildren;
//         return data;
//     }
// }
//
// export interface IDirectoryDescriptorInfoDto {
//     id: string;
//     name: string | undefined;
//     parentId: string | undefined;
//     hasChildren: boolean;
// }
//
// export class MoveDirectoryInput implements IMoveDirectoryInput {
//     id!: string;
//     newParentId!: string | undefined;
//
//     constructor(data?: IMoveDirectoryInput) {
//         if (data) {
//             for (var property in data) {
//                 if (data.hasOwnProperty(property))
//                     (<any>this)[property] = (<any>data)[property];
//             }
//         }
//     }
//
//     init(_data?: any) {
//         if (_data) {
//             this.id = _data["id"];
//             this.newParentId = _data["newParentId"];
//         }
//     }
//
//     static fromJS(data: any): MoveDirectoryInput {
//         data = typeof data === 'object' ? data : {};
//         let result = new MoveDirectoryInput();
//         result.init(data);
//         return result;
//     }
//
//     toJSON(data?: any) {
//         data = typeof data === 'object' ? data : {};
//         data["id"] = this.id;
//         data["newParentId"] = this.newParentId;
//         return data;
//     }
// }
//
// export interface IMoveDirectoryInput {
//     id: string;
//     newParentId: string | undefined;
// }
//
// export class RenameDirectoryInput implements IRenameDirectoryInput {
//     name!: string;
//
//     constructor(data?: IRenameDirectoryInput) {
//         if (data) {
//             for (var property in data) {
//                 if (data.hasOwnProperty(property))
//                     (<any>this)[property] = (<any>data)[property];
//             }
//         }
//     }
//
//     init(_data?: any) {
//         if (_data) {
//             this.name = _data["name"];
//         }
//     }
//
//     static fromJS(data: any): RenameDirectoryInput {
//         data = typeof data === 'object' ? data : {};
//         let result = new RenameDirectoryInput();
//         result.init(data);
//         return result;
//     }
//
//     toJSON(data?: any) {
//         data = typeof data === 'object' ? data : {};
//         data["name"] = this.name;
//         return data;
//     }
// }
//
// export interface IRenameDirectoryInput {
//     name: string;
// }
//
// export class DownloadTokenResultDto implements IDownloadTokenResultDto {
//     token!: string | undefined;
//
//     constructor(data?: IDownloadTokenResultDto) {
//         if (data) {
//             for (var property in data) {
//                 if (data.hasOwnProperty(property))
//                     (<any>this)[property] = (<any>data)[property];
//             }
//         }
//     }
//
//     init(_data?: any) {
//         if (_data) {
//             this.token = _data["token"];
//         }
//     }
//
//     static fromJS(data: any): DownloadTokenResultDto {
//         data = typeof data === 'object' ? data : {};
//         let result = new DownloadTokenResultDto();
//         result.init(data);
//         return result;
//     }
//
//     toJSON(data?: any) {
//         data = typeof data === 'object' ? data : {};
//         data["token"] = this.token;
//         return data;
//     }
// }
//
// export interface IDownloadTokenResultDto {
//     token: string | undefined;
// }
//
// export class FileDescriptorDto implements IFileDescriptorDto {
//     id!: string;
//     creationTime!: DateTime;
//     creatorId!: string | undefined;
//     lastModificationTime!: DateTime | undefined;
//     lastModifierId!: string | undefined;
//     directoryId!: string | undefined;
//     name!: string | undefined;
//     mimeType!: string | undefined;
//     size!: number;
//
//     constructor(data?: IFileDescriptorDto) {
//         if (data) {
//             for (var property in data) {
//                 if (data.hasOwnProperty(property))
//                     (<any>this)[property] = (<any>data)[property];
//             }
//         }
//     }
//
//     init(_data?: any) {
//         if (_data) {
//             this.id = _data["id"];
//             this.creationTime = _data["creationTime"] ? DateTime.fromISO(_data["creationTime"].toString()) : <any>undefined;
//             this.creatorId = _data["creatorId"];
//             this.lastModificationTime = _data["lastModificationTime"] ? DateTime.fromISO(_data["lastModificationTime"].toString()) : <any>undefined;
//             this.lastModifierId = _data["lastModifierId"];
//             this.directoryId = _data["directoryId"];
//             this.name = _data["name"];
//             this.mimeType = _data["mimeType"];
//             this.size = _data["size"];
//         }
//     }
//
//     static fromJS(data: any): FileDescriptorDto {
//         data = typeof data === 'object' ? data : {};
//         let result = new FileDescriptorDto();
//         result.init(data);
//         return result;
//     }
//
//     toJSON(data?: any) {
//         data = typeof data === 'object' ? data : {};
//         data["id"] = this.id;
//         data["creationTime"] = this.creationTime ? this.creationTime.toString() : <any>undefined;
//         data["creatorId"] = this.creatorId;
//         data["lastModificationTime"] = this.lastModificationTime ? this.lastModificationTime.toString() : <any>undefined;
//         data["lastModifierId"] = this.lastModifierId;
//         data["directoryId"] = this.directoryId;
//         data["name"] = this.name;
//         data["mimeType"] = this.mimeType;
//         data["size"] = this.size;
//         return data;
//     }
// }
//
// export interface IFileDescriptorDto {
//     id: string;
//     creationTime: DateTime;
//     creatorId: string | undefined;
//     lastModificationTime: DateTime | undefined;
//     lastModifierId: string | undefined;
//     directoryId: string | undefined;
//     name: string | undefined;
//     mimeType: string | undefined;
//     size: number;
// }
//
// export class FileIconInfo implements IFileIconInfo {
//     icon!: string | undefined;
//     type!: FileIconType;
//
//     constructor(data?: IFileIconInfo) {
//         if (data) {
//             for (var property in data) {
//                 if (data.hasOwnProperty(property))
//                     (<any>this)[property] = (<any>data)[property];
//             }
//         }
//     }
//
//     init(_data?: any) {
//         if (_data) {
//             this.icon = _data["icon"];
//             this.type = _data["type"];
//         }
//     }
//
//     static fromJS(data: any): FileIconInfo {
//         data = typeof data === 'object' ? data : {};
//         let result = new FileIconInfo();
//         result.init(data);
//         return result;
//     }
//
//     toJSON(data?: any) {
//         data = typeof data === 'object' ? data : {};
//         data["icon"] = this.icon;
//         data["type"] = this.type;
//         return data;
//     }
// }
//
// export interface IFileIconInfo {
//     icon: string | undefined;
//     type: FileIconType;
// }
//
// export enum FileIconType {
//     _0 = 0,
//     _1 = 1,
// }
//
// export class FileUploadPreInfoDto implements IFileUploadPreInfoDto {
//     fileName!: string | undefined;
//     doesExist!: boolean;
//     hasValidName!: boolean;
//
//     constructor(data?: IFileUploadPreInfoDto) {
//         if (data) {
//             for (var property in data) {
//                 if (data.hasOwnProperty(property))
//                     (<any>this)[property] = (<any>data)[property];
//             }
//         }
//     }
//
//     init(_data?: any) {
//         if (_data) {
//             this.fileName = _data["fileName"];
//             this.doesExist = _data["doesExist"];
//             this.hasValidName = _data["hasValidName"];
//         }
//     }
//
//     static fromJS(data: any): FileUploadPreInfoDto {
//         data = typeof data === 'object' ? data : {};
//         let result = new FileUploadPreInfoDto();
//         result.init(data);
//         return result;
//     }
//
//     toJSON(data?: any) {
//         data = typeof data === 'object' ? data : {};
//         data["fileName"] = this.fileName;
//         data["doesExist"] = this.doesExist;
//         data["hasValidName"] = this.hasValidName;
//         return data;
//     }
// }
//
// export interface IFileUploadPreInfoDto {
//     fileName: string | undefined;
//     doesExist: boolean;
//     hasValidName: boolean;
// }
//
// export class FileUploadPreInfoRequest implements IFileUploadPreInfoRequest {
//     directoryId!: string | undefined;
//     fileName!: string | undefined;
//     size!: number;
//
//     constructor(data?: IFileUploadPreInfoRequest) {
//         if (data) {
//             for (var property in data) {
//                 if (data.hasOwnProperty(property))
//                     (<any>this)[property] = (<any>data)[property];
//             }
//         }
//     }
//
//     init(_data?: any) {
//         if (_data) {
//             this.directoryId = _data["directoryId"];
//             this.fileName = _data["fileName"];
//             this.size = _data["size"];
//         }
//     }
//
//     static fromJS(data: any): FileUploadPreInfoRequest {
//         data = typeof data === 'object' ? data : {};
//         let result = new FileUploadPreInfoRequest();
//         result.init(data);
//         return result;
//     }
//
//     toJSON(data?: any) {
//         data = typeof data === 'object' ? data : {};
//         data["directoryId"] = this.directoryId;
//         data["fileName"] = this.fileName;
//         data["size"] = this.size;
//         return data;
//     }
// }
//
// export interface IFileUploadPreInfoRequest {
//     directoryId: string | undefined;
//     fileName: string | undefined;
//     size: number;
// }
//
// export class MoveFileInput implements IMoveFileInput {
//     id!: string;
//     newDirectoryId!: string | undefined;
//
//     constructor(data?: IMoveFileInput) {
//         if (data) {
//             for (var property in data) {
//                 if (data.hasOwnProperty(property))
//                     (<any>this)[property] = (<any>data)[property];
//             }
//         }
//     }
//
//     init(_data?: any) {
//         if (_data) {
//             this.id = _data["id"];
//             this.newDirectoryId = _data["newDirectoryId"];
//         }
//     }
//
//     static fromJS(data: any): MoveFileInput {
//         data = typeof data === 'object' ? data : {};
//         let result = new MoveFileInput();
//         result.init(data);
//         return result;
//     }
//
//     toJSON(data?: any) {
//         data = typeof data === 'object' ? data : {};
//         data["id"] = this.id;
//         data["newDirectoryId"] = this.newDirectoryId;
//         return data;
//     }
// }
//
// export interface IMoveFileInput {
//     id: string;
//     newDirectoryId: string | undefined;
// }
//
// export class RenameFileInput implements IRenameFileInput {
//     name!: string;
//
//     constructor(data?: IRenameFileInput) {
//         if (data) {
//             for (var property in data) {
//                 if (data.hasOwnProperty(property))
//                     (<any>this)[property] = (<any>data)[property];
//             }
//         }
//     }
//
//     init(_data?: any) {
//         if (_data) {
//             this.name = _data["name"];
//         }
//     }
//
//     static fromJS(data: any): RenameFileInput {
//         data = typeof data === 'object' ? data : {};
//         let result = new RenameFileInput();
//         result.init(data);
//         return result;
//     }
//
//     toJSON(data?: any) {
//         data = typeof data === 'object' ? data : {};
//         data["name"] = this.name;
//         return data;
//     }
// }
//
// export interface IRenameFileInput {
//     name: string;
// }
//
// export class EditionCreateDto implements IEditionCreateDto {
//     readonly extraProperties!: { [key: string]: any; } | undefined;
//     displayName!: string;
//
//     constructor(data?: IEditionCreateDto) {
//         if (data) {
//             for (var property in data) {
//                 if (data.hasOwnProperty(property))
//                     (<any>this)[property] = (<any>data)[property];
//             }
//         }
//     }
//
//     init(_data?: any) {
//         if (_data) {
//             if (_data["extraProperties"]) {
//                 (<any>this).extraProperties = {} as any;
//                 for (let key in _data["extraProperties"]) {
//                     if (_data["extraProperties"].hasOwnProperty(key))
//                         (<any>(<any>this).extraProperties)![key] = _data["extraProperties"][key];
//                 }
//             }
//             this.displayName = _data["displayName"];
//         }
//     }
//
//     static fromJS(data: any): EditionCreateDto {
//         data = typeof data === 'object' ? data : {};
//         let result = new EditionCreateDto();
//         result.init(data);
//         return result;
//     }
//
//     toJSON(data?: any) {
//         data = typeof data === 'object' ? data : {};
//         if (this.extraProperties) {
//             data["extraProperties"] = {};
//             for (let key in this.extraProperties) {
//                 if (this.extraProperties.hasOwnProperty(key))
//                     (<any>data["extraProperties"])[key] = this.extraProperties[key];
//             }
//         }
//         data["displayName"] = this.displayName;
//         return data;
//     }
// }
//
// export interface IEditionCreateDto {
//     extraProperties: { [key: string]: any; } | undefined;
//     displayName: string;
// }
//
// export class EditionDto implements IEditionDto {
//     readonly extraProperties!: { [key: string]: any; } | undefined;
//     id!: string;
//     displayName!: string | undefined;
//
//     constructor(data?: IEditionDto) {
//         if (data) {
//             for (var property in data) {
//                 if (data.hasOwnProperty(property))
//                     (<any>this)[property] = (<any>data)[property];
//             }
//         }
//     }
//
//     init(_data?: any) {
//         if (_data) {
//             if (_data["extraProperties"]) {
//                 (<any>this).extraProperties = {} as any;
//                 for (let key in _data["extraProperties"]) {
//                     if (_data["extraProperties"].hasOwnProperty(key))
//                         (<any>(<any>this).extraProperties)![key] = _data["extraProperties"][key];
//                 }
//             }
//             this.id = _data["id"];
//             this.displayName = _data["displayName"];
//         }
//     }
//
//     static fromJS(data: any): EditionDto {
//         data = typeof data === 'object' ? data : {};
//         let result = new EditionDto();
//         result.init(data);
//         return result;
//     }
//
//     toJSON(data?: any) {
//         data = typeof data === 'object' ? data : {};
//         if (this.extraProperties) {
//             data["extraProperties"] = {};
//             for (let key in this.extraProperties) {
//                 if (this.extraProperties.hasOwnProperty(key))
//                     (<any>data["extraProperties"])[key] = this.extraProperties[key];
//             }
//         }
//         data["id"] = this.id;
//         data["displayName"] = this.displayName;
//         return data;
//     }
// }
//
// export interface IEditionDto {
//     extraProperties: { [key: string]: any; } | undefined;
//     id: string;
//     displayName: string | undefined;
// }
//
// export class EditionUpdateDto implements IEditionUpdateDto {
//     readonly extraProperties!: { [key: string]: any; } | undefined;
//     displayName!: string;
//
//     constructor(data?: IEditionUpdateDto) {
//         if (data) {
//             for (var property in data) {
//                 if (data.hasOwnProperty(property))
//                     (<any>this)[property] = (<any>data)[property];
//             }
//         }
//     }
//
//     init(_data?: any) {
//         if (_data) {
//             if (_data["extraProperties"]) {
//                 (<any>this).extraProperties = {} as any;
//                 for (let key in _data["extraProperties"]) {
//                     if (_data["extraProperties"].hasOwnProperty(key))
//                         (<any>(<any>this).extraProperties)![key] = _data["extraProperties"][key];
//                 }
//             }
//             this.displayName = _data["displayName"];
//         }
//     }
//
//     static fromJS(data: any): EditionUpdateDto {
//         data = typeof data === 'object' ? data : {};
//         let result = new EditionUpdateDto();
//         result.init(data);
//         return result;
//     }
//
//     toJSON(data?: any) {
//         data = typeof data === 'object' ? data : {};
//         if (this.extraProperties) {
//             data["extraProperties"] = {};
//             for (let key in this.extraProperties) {
//                 if (this.extraProperties.hasOwnProperty(key))
//                     (<any>data["extraProperties"])[key] = this.extraProperties[key];
//             }
//         }
//         data["displayName"] = this.displayName;
//         return data;
//     }
// }
//
// export interface IEditionUpdateDto {
//     extraProperties: { [key: string]: any; } | undefined;
//     displayName: string;
// }
//
// export class SaasTenantCreateDto implements ISaasTenantCreateDto {
//     readonly extraProperties!: { [key: string]: any; } | undefined;
//     name!: string;
//     editionId!: string | undefined;
//     adminEmailAddress!: string;
//     adminPassword!: string;
//     defaultConnectionString!: string | undefined;
//
//     constructor(data?: ISaasTenantCreateDto) {
//         if (data) {
//             for (var property in data) {
//                 if (data.hasOwnProperty(property))
//                     (<any>this)[property] = (<any>data)[property];
//             }
//         }
//     }
//
//     init(_data?: any) {
//         if (_data) {
//             if (_data["extraProperties"]) {
//                 (<any>this).extraProperties = {} as any;
//                 for (let key in _data["extraProperties"]) {
//                     if (_data["extraProperties"].hasOwnProperty(key))
//                         (<any>(<any>this).extraProperties)![key] = _data["extraProperties"][key];
//                 }
//             }
//             this.name = _data["name"];
//             this.editionId = _data["editionId"];
//             this.adminEmailAddress = _data["adminEmailAddress"];
//             this.adminPassword = _data["adminPassword"];
//             this.defaultConnectionString = _data["defaultConnectionString"];
//         }
//     }
//
//     static fromJS(data: any): SaasTenantCreateDto {
//         data = typeof data === 'object' ? data : {};
//         let result = new SaasTenantCreateDto();
//         result.init(data);
//         return result;
//     }
//
//     toJSON(data?: any) {
//         data = typeof data === 'object' ? data : {};
//         if (this.extraProperties) {
//             data["extraProperties"] = {};
//             for (let key in this.extraProperties) {
//                 if (this.extraProperties.hasOwnProperty(key))
//                     (<any>data["extraProperties"])[key] = this.extraProperties[key];
//             }
//         }
//         data["name"] = this.name;
//         data["editionId"] = this.editionId;
//         data["adminEmailAddress"] = this.adminEmailAddress;
//         data["adminPassword"] = this.adminPassword;
//         data["defaultConnectionString"] = this.defaultConnectionString;
//         return data;
//     }
// }
//
// export interface ISaasTenantCreateDto {
//     extraProperties: { [key: string]: any; } | undefined;
//     name: string;
//     editionId: string | undefined;
//     adminEmailAddress: string;
//     adminPassword: string;
//     defaultConnectionString: string | undefined;
// }
//
// export class SaasTenantDto implements ISaasTenantDto {
//     readonly extraProperties!: { [key: string]: any; } | undefined;
//     id!: string;
//     name!: string | undefined;
//     editionId!: string | undefined;
//     editionName!: string | undefined;
//     hasDefaultConnectionString!: boolean;
//
//     constructor(data?: ISaasTenantDto) {
//         if (data) {
//             for (var property in data) {
//                 if (data.hasOwnProperty(property))
//                     (<any>this)[property] = (<any>data)[property];
//             }
//         }
//     }
//
//     init(_data?: any) {
//         if (_data) {
//             if (_data["extraProperties"]) {
//                 (<any>this).extraProperties = {} as any;
//                 for (let key in _data["extraProperties"]) {
//                     if (_data["extraProperties"].hasOwnProperty(key))
//                         (<any>(<any>this).extraProperties)![key] = _data["extraProperties"][key];
//                 }
//             }
//             this.id = _data["id"];
//             this.name = _data["name"];
//             this.editionId = _data["editionId"];
//             this.editionName = _data["editionName"];
//             this.hasDefaultConnectionString = _data["hasDefaultConnectionString"];
//         }
//     }
//
//     static fromJS(data: any): SaasTenantDto {
//         data = typeof data === 'object' ? data : {};
//         let result = new SaasTenantDto();
//         result.init(data);
//         return result;
//     }
//
//     toJSON(data?: any) {
//         data = typeof data === 'object' ? data : {};
//         if (this.extraProperties) {
//             data["extraProperties"] = {};
//             for (let key in this.extraProperties) {
//                 if (this.extraProperties.hasOwnProperty(key))
//                     (<any>data["extraProperties"])[key] = this.extraProperties[key];
//             }
//         }
//         data["id"] = this.id;
//         data["name"] = this.name;
//         data["editionId"] = this.editionId;
//         data["editionName"] = this.editionName;
//         data["hasDefaultConnectionString"] = this.hasDefaultConnectionString;
//         return data;
//     }
// }
//
// export interface ISaasTenantDto {
//     extraProperties: { [key: string]: any; } | undefined;
//     id: string;
//     name: string | undefined;
//     editionId: string | undefined;
//     editionName: string | undefined;
//     hasDefaultConnectionString: boolean;
// }
//
// export class SaasTenantUpdateDto implements ISaasTenantUpdateDto {
//     readonly extraProperties!: { [key: string]: any; } | undefined;
//     name!: string;
//     editionId!: string | undefined;
//
//     constructor(data?: ISaasTenantUpdateDto) {
//         if (data) {
//             for (var property in data) {
//                 if (data.hasOwnProperty(property))
//                     (<any>this)[property] = (<any>data)[property];
//             }
//         }
//     }
//
//     init(_data?: any) {
//         if (_data) {
//             if (_data["extraProperties"]) {
//                 (<any>this).extraProperties = {} as any;
//                 for (let key in _data["extraProperties"]) {
//                     if (_data["extraProperties"].hasOwnProperty(key))
//                         (<any>(<any>this).extraProperties)![key] = _data["extraProperties"][key];
//                 }
//             }
//             this.name = _data["name"];
//             this.editionId = _data["editionId"];
//         }
//     }
//
//     static fromJS(data: any): SaasTenantUpdateDto {
//         data = typeof data === 'object' ? data : {};
//         let result = new SaasTenantUpdateDto();
//         result.init(data);
//         return result;
//     }
//
//     toJSON(data?: any) {
//         data = typeof data === 'object' ? data : {};
//         if (this.extraProperties) {
//             data["extraProperties"] = {};
//             for (let key in this.extraProperties) {
//                 if (this.extraProperties.hasOwnProperty(key))
//                     (<any>data["extraProperties"])[key] = this.extraProperties[key];
//             }
//         }
//         data["name"] = this.name;
//         data["editionId"] = this.editionId;
//         return data;
//     }
// }
//
// export interface ISaasTenantUpdateDto {
//     extraProperties: { [key: string]: any; } | undefined;
//     name: string;
//     editionId: string | undefined;
// }
//
// export class GetEditionUsageStatisticsResult implements IGetEditionUsageStatisticsResult {
//     data!: { [key: string]: number; } | undefined;
//
//     constructor(data?: IGetEditionUsageStatisticsResult) {
//         if (data) {
//             for (var property in data) {
//                 if (data.hasOwnProperty(property))
//                     (<any>this)[property] = (<any>data)[property];
//             }
//         }
//     }
//
//     init(_data?: any) {
//         if (_data) {
//             if (_data["data"]) {
//                 this.data = {} as any;
//                 for (let key in _data["data"]) {
//                     if (_data["data"].hasOwnProperty(key))
//                         (<any>this.data)![key] = _data["data"][key];
//                 }
//             }
//         }
//     }
//
//     static fromJS(data: any): GetEditionUsageStatisticsResult {
//         data = typeof data === 'object' ? data : {};
//         let result = new GetEditionUsageStatisticsResult();
//         result.init(data);
//         return result;
//     }
//
//     toJSON(data?: any) {
//         data = typeof data === 'object' ? data : {};
//         if (this.data) {
//             data["data"] = {};
//             for (let key in this.data) {
//                 if (this.data.hasOwnProperty(key))
//                     (<any>data["data"])[key] = this.data[key];
//             }
//         }
//         return data;
//     }
// }
//
// export interface IGetEditionUsageStatisticsResult {
//     data: { [key: string]: number; } | undefined;
// }
//
// export interface FileParameter {
//     data: any;
//     fileName: string;
// }
//
// export interface FileResponse {
//     data: Blob;
//     status: number;
//     fileName?: string;
//     headers?: { [name: string]: any };
// }
//
// export class ApiException extends Error {
//     message: string;
//     status: number;
//     response: string;
//     headers: { [key: string]: any; };
//     result: any;
//
//     constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
//         super();
//
//         this.message = message;
//         this.status = status;
//         this.response = response;
//         this.headers = headers;
//         this.result = result;
//     }
//
//     protected isApiException = true;
//
//     static isApiException(obj: any): obj is ApiException {
//         return obj.isApiException === true;
//     }
// }
//
// function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): Observable<any> {
//     if (result !== null && result !== undefined)
//         return _observableThrow(result);
//     else
//         return _observableThrow(new ApiException(message, status, response, headers, null));
// }
//
// function blobToText(blob: any): Observable<string> {
//     return new Observable<string>((observer: any) => {
//         if (!blob) {
//             observer.next("");
//             observer.complete();
//         } else {
//             let reader = new FileReader();
//             reader.onload = event => {
//                 observer.next((<any>event.target).result);
//                 observer.complete();
//             };
//             reader.readAsText(blob);
//         }
//     });
// }
